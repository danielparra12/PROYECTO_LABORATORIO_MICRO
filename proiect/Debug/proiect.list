
proiect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080063b8  080063b8  000163b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066c0  080066c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c0  080066c0  000166c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066c4  080066c4  000166c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000070  08006738  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08006738  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096f2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d1b  00000000  00000000  0002978b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182c9  00000000  00000000  0002c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bca9  00000000  00000000  00044951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a2d  00000000  00000000  000505fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9027  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d8  00000000  00000000  000d9078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800639c 	.word	0x0800639c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800639c 	.word	0x0800639c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_frsub>:
 8000a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a50:	e002      	b.n	8000a58 <__addsf3>
 8000a52:	bf00      	nop

08000a54 <__aeabi_fsub>:
 8000a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a58 <__addsf3>:
 8000a58:	0042      	lsls	r2, r0, #1
 8000a5a:	bf1f      	itttt	ne
 8000a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a60:	ea92 0f03 	teqne	r2, r3
 8000a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6c:	d06a      	beq.n	8000b44 <__addsf3+0xec>
 8000a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a76:	bfc1      	itttt	gt
 8000a78:	18d2      	addgt	r2, r2, r3
 8000a7a:	4041      	eorgt	r1, r0
 8000a7c:	4048      	eorgt	r0, r1
 8000a7e:	4041      	eorgt	r1, r0
 8000a80:	bfb8      	it	lt
 8000a82:	425b      	neglt	r3, r3
 8000a84:	2b19      	cmp	r3, #25
 8000a86:	bf88      	it	hi
 8000a88:	4770      	bxhi	lr
 8000a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000aa6:	bf18      	it	ne
 8000aa8:	4249      	negne	r1, r1
 8000aaa:	ea92 0f03 	teq	r2, r3
 8000aae:	d03f      	beq.n	8000b30 <__addsf3+0xd8>
 8000ab0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ab4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ab8:	eb10 000c 	adds.w	r0, r0, ip
 8000abc:	f1c3 0320 	rsb	r3, r3, #32
 8000ac0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__addsf3+0x78>
 8000aca:	4249      	negs	r1, r1
 8000acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ad4:	d313      	bcc.n	8000afe <__addsf3+0xa6>
 8000ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ada:	d306      	bcc.n	8000aea <__addsf3+0x92>
 8000adc:	0840      	lsrs	r0, r0, #1
 8000ade:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ae2:	f102 0201 	add.w	r2, r2, #1
 8000ae6:	2afe      	cmp	r2, #254	; 0xfe
 8000ae8:	d251      	bcs.n	8000b8e <__addsf3+0x136>
 8000aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af2:	bf08      	it	eq
 8000af4:	f020 0001 	biceq.w	r0, r0, #1
 8000af8:	ea40 0003 	orr.w	r0, r0, r3
 8000afc:	4770      	bx	lr
 8000afe:	0049      	lsls	r1, r1, #1
 8000b00:	eb40 0000 	adc.w	r0, r0, r0
 8000b04:	3a01      	subs	r2, #1
 8000b06:	bf28      	it	cs
 8000b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b0c:	d2ed      	bcs.n	8000aea <__addsf3+0x92>
 8000b0e:	fab0 fc80 	clz	ip, r0
 8000b12:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b16:	ebb2 020c 	subs.w	r2, r2, ip
 8000b1a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b1e:	bfaa      	itet	ge
 8000b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b24:	4252      	neglt	r2, r2
 8000b26:	4318      	orrge	r0, r3
 8000b28:	bfbc      	itt	lt
 8000b2a:	40d0      	lsrlt	r0, r2
 8000b2c:	4318      	orrlt	r0, r3
 8000b2e:	4770      	bx	lr
 8000b30:	f092 0f00 	teq	r2, #0
 8000b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b38:	bf06      	itte	eq
 8000b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b3e:	3201      	addeq	r2, #1
 8000b40:	3b01      	subne	r3, #1
 8000b42:	e7b5      	b.n	8000ab0 <__addsf3+0x58>
 8000b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b4c:	bf18      	it	ne
 8000b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b52:	d021      	beq.n	8000b98 <__addsf3+0x140>
 8000b54:	ea92 0f03 	teq	r2, r3
 8000b58:	d004      	beq.n	8000b64 <__addsf3+0x10c>
 8000b5a:	f092 0f00 	teq	r2, #0
 8000b5e:	bf08      	it	eq
 8000b60:	4608      	moveq	r0, r1
 8000b62:	4770      	bx	lr
 8000b64:	ea90 0f01 	teq	r0, r1
 8000b68:	bf1c      	itt	ne
 8000b6a:	2000      	movne	r0, #0
 8000b6c:	4770      	bxne	lr
 8000b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b72:	d104      	bne.n	8000b7e <__addsf3+0x126>
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	bf28      	it	cs
 8000b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	4770      	bx	lr
 8000b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b82:	bf3c      	itt	cc
 8000b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bxcc	lr
 8000b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	4770      	bx	lr
 8000b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b9c:	bf16      	itet	ne
 8000b9e:	4608      	movne	r0, r1
 8000ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ba4:	4601      	movne	r1, r0
 8000ba6:	0242      	lsls	r2, r0, #9
 8000ba8:	bf06      	itte	eq
 8000baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bae:	ea90 0f01 	teqeq	r0, r1
 8000bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_ui2f>:
 8000bb8:	f04f 0300 	mov.w	r3, #0
 8000bbc:	e004      	b.n	8000bc8 <__aeabi_i2f+0x8>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_i2f>:
 8000bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bc4:	bf48      	it	mi
 8000bc6:	4240      	negmi	r0, r0
 8000bc8:	ea5f 0c00 	movs.w	ip, r0
 8000bcc:	bf08      	it	eq
 8000bce:	4770      	bxeq	lr
 8000bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bd4:	4601      	mov	r1, r0
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	e01c      	b.n	8000c16 <__aeabi_l2f+0x2a>

08000bdc <__aeabi_ul2f>:
 8000bdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000be0:	bf08      	it	eq
 8000be2:	4770      	bxeq	lr
 8000be4:	f04f 0300 	mov.w	r3, #0
 8000be8:	e00a      	b.n	8000c00 <__aeabi_l2f+0x14>
 8000bea:	bf00      	nop

08000bec <__aeabi_l2f>:
 8000bec:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf0:	bf08      	it	eq
 8000bf2:	4770      	bxeq	lr
 8000bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__aeabi_l2f+0x14>
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	ea5f 0c01 	movs.w	ip, r1
 8000c04:	bf02      	ittt	eq
 8000c06:	4684      	moveq	ip, r0
 8000c08:	4601      	moveq	r1, r0
 8000c0a:	2000      	moveq	r0, #0
 8000c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c10:	bf08      	it	eq
 8000c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c1a:	fabc f28c 	clz	r2, ip
 8000c1e:	3a08      	subs	r2, #8
 8000c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c24:	db10      	blt.n	8000c48 <__aeabi_l2f+0x5c>
 8000c26:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c30:	f1c2 0220 	rsb	r2, r2, #32
 8000c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c38:	fa20 f202 	lsr.w	r2, r0, r2
 8000c3c:	eb43 0002 	adc.w	r0, r3, r2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f102 0220 	add.w	r2, r2, #32
 8000c4c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c58:	fa21 f202 	lsr.w	r2, r1, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_fmul>:
 8000c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c70:	bf1e      	ittt	ne
 8000c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c76:	ea92 0f0c 	teqne	r2, ip
 8000c7a:	ea93 0f0c 	teqne	r3, ip
 8000c7e:	d06f      	beq.n	8000d60 <__aeabi_fmul+0xf8>
 8000c80:	441a      	add	r2, r3
 8000c82:	ea80 0c01 	eor.w	ip, r0, r1
 8000c86:	0240      	lsls	r0, r0, #9
 8000c88:	bf18      	it	ne
 8000c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c8e:	d01e      	beq.n	8000cce <__aeabi_fmul+0x66>
 8000c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c9c:	fba0 3101 	umull	r3, r1, r0, r1
 8000ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ca8:	bf3e      	ittt	cc
 8000caa:	0049      	lslcc	r1, r1, #1
 8000cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cb0:	005b      	lslcc	r3, r3, #1
 8000cb2:	ea40 0001 	orr.w	r0, r0, r1
 8000cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cba:	2afd      	cmp	r2, #253	; 0xfd
 8000cbc:	d81d      	bhi.n	8000cfa <__aeabi_fmul+0x92>
 8000cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc6:	bf08      	it	eq
 8000cc8:	f020 0001 	biceq.w	r0, r0, #1
 8000ccc:	4770      	bx	lr
 8000cce:	f090 0f00 	teq	r0, #0
 8000cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cd6:	bf08      	it	eq
 8000cd8:	0249      	lsleq	r1, r1, #9
 8000cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ce2:	3a7f      	subs	r2, #127	; 0x7f
 8000ce4:	bfc2      	ittt	gt
 8000ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cee:	4770      	bxgt	lr
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	dc5d      	bgt.n	8000db8 <__aeabi_fmul+0x150>
 8000cfc:	f112 0f19 	cmn.w	r2, #25
 8000d00:	bfdc      	itt	le
 8000d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d06:	4770      	bxle	lr
 8000d08:	f1c2 0200 	rsb	r2, r2, #0
 8000d0c:	0041      	lsls	r1, r0, #1
 8000d0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d12:	f1c2 0220 	rsb	r2, r2, #32
 8000d16:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d1a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d1e:	f140 0000 	adc.w	r0, r0, #0
 8000d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d26:	bf08      	it	eq
 8000d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2c:	4770      	bx	lr
 8000d2e:	f092 0f00 	teq	r2, #0
 8000d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d36:	bf02      	ittt	eq
 8000d38:	0040      	lsleq	r0, r0, #1
 8000d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d3e:	3a01      	subeq	r2, #1
 8000d40:	d0f9      	beq.n	8000d36 <__aeabi_fmul+0xce>
 8000d42:	ea40 000c 	orr.w	r0, r0, ip
 8000d46:	f093 0f00 	teq	r3, #0
 8000d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0049      	lsleq	r1, r1, #1
 8000d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d56:	3b01      	subeq	r3, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xe6>
 8000d5a:	ea41 010c 	orr.w	r1, r1, ip
 8000d5e:	e78f      	b.n	8000c80 <__aeabi_fmul+0x18>
 8000d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d64:	ea92 0f0c 	teq	r2, ip
 8000d68:	bf18      	it	ne
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d00a      	beq.n	8000d86 <__aeabi_fmul+0x11e>
 8000d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d74:	bf18      	it	ne
 8000d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	d1d8      	bne.n	8000d2e <__aeabi_fmul+0xc6>
 8000d7c:	ea80 0001 	eor.w	r0, r0, r1
 8000d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d84:	4770      	bx	lr
 8000d86:	f090 0f00 	teq	r0, #0
 8000d8a:	bf17      	itett	ne
 8000d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d90:	4608      	moveq	r0, r1
 8000d92:	f091 0f00 	teqne	r1, #0
 8000d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d9a:	d014      	beq.n	8000dc6 <__aeabi_fmul+0x15e>
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	d101      	bne.n	8000da6 <__aeabi_fmul+0x13e>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	d10f      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000da6:	ea93 0f0c 	teq	r3, ip
 8000daa:	d103      	bne.n	8000db4 <__aeabi_fmul+0x14c>
 8000dac:	024b      	lsls	r3, r1, #9
 8000dae:	bf18      	it	ne
 8000db0:	4608      	movne	r0, r1
 8000db2:	d108      	bne.n	8000dc6 <__aeabi_fmul+0x15e>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc4:	4770      	bx	lr
 8000dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000dce:	4770      	bx	lr

08000dd0 <__aeabi_fdiv>:
 8000dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd8:	bf1e      	ittt	ne
 8000dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dde:	ea92 0f0c 	teqne	r2, ip
 8000de2:	ea93 0f0c 	teqne	r3, ip
 8000de6:	d069      	beq.n	8000ebc <__aeabi_fdiv+0xec>
 8000de8:	eba2 0203 	sub.w	r2, r2, r3
 8000dec:	ea80 0c01 	eor.w	ip, r0, r1
 8000df0:	0249      	lsls	r1, r1, #9
 8000df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000df6:	d037      	beq.n	8000e68 <__aeabi_fdiv+0x98>
 8000df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	bf38      	it	cc
 8000e0c:	005b      	lslcc	r3, r3, #1
 8000e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e16:	428b      	cmp	r3, r1
 8000e18:	bf24      	itt	cs
 8000e1a:	1a5b      	subcs	r3, r3, r1
 8000e1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e24:	bf24      	itt	cs
 8000e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e32:	bf24      	itt	cs
 8000e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e40:	bf24      	itt	cs
 8000e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	bf18      	it	ne
 8000e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e52:	d1e0      	bne.n	8000e16 <__aeabi_fdiv+0x46>
 8000e54:	2afd      	cmp	r2, #253	; 0xfd
 8000e56:	f63f af50 	bhi.w	8000cfa <__aeabi_fmul+0x92>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e60:	bf08      	it	eq
 8000e62:	f020 0001 	biceq.w	r0, r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e70:	327f      	adds	r2, #127	; 0x7f
 8000e72:	bfc2      	ittt	gt
 8000e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e7c:	4770      	bxgt	lr
 8000e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	3a01      	subs	r2, #1
 8000e88:	e737      	b.n	8000cfa <__aeabi_fmul+0x92>
 8000e8a:	f092 0f00 	teq	r2, #0
 8000e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e92:	bf02      	ittt	eq
 8000e94:	0040      	lsleq	r0, r0, #1
 8000e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e9a:	3a01      	subeq	r2, #1
 8000e9c:	d0f9      	beq.n	8000e92 <__aeabi_fdiv+0xc2>
 8000e9e:	ea40 000c 	orr.w	r0, r0, ip
 8000ea2:	f093 0f00 	teq	r3, #0
 8000ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0049      	lsleq	r1, r1, #1
 8000eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eb2:	3b01      	subeq	r3, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xda>
 8000eb6:	ea41 010c 	orr.w	r1, r1, ip
 8000eba:	e795      	b.n	8000de8 <__aeabi_fdiv+0x18>
 8000ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec0:	ea92 0f0c 	teq	r2, ip
 8000ec4:	d108      	bne.n	8000ed8 <__aeabi_fdiv+0x108>
 8000ec6:	0242      	lsls	r2, r0, #9
 8000ec8:	f47f af7d 	bne.w	8000dc6 <__aeabi_fmul+0x15e>
 8000ecc:	ea93 0f0c 	teq	r3, ip
 8000ed0:	f47f af70 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e776      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ed8:	ea93 0f0c 	teq	r3, ip
 8000edc:	d104      	bne.n	8000ee8 <__aeabi_fdiv+0x118>
 8000ede:	024b      	lsls	r3, r1, #9
 8000ee0:	f43f af4c 	beq.w	8000d7c <__aeabi_fmul+0x114>
 8000ee4:	4608      	mov	r0, r1
 8000ee6:	e76e      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1ca      	bne.n	8000e8a <__aeabi_fdiv+0xba>
 8000ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000ef8:	f47f af5c 	bne.w	8000db4 <__aeabi_fmul+0x14c>
 8000efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f00:	f47f af3c 	bne.w	8000d7c <__aeabi_fmul+0x114>
 8000f04:	e75f      	b.n	8000dc6 <__aeabi_fmul+0x15e>
 8000f06:	bf00      	nop

08000f08 <__aeabi_f2iz>:
 8000f08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f0c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f10:	d30f      	bcc.n	8000f32 <__aeabi_f2iz+0x2a>
 8000f12:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f16:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f1a:	d90d      	bls.n	8000f38 <__aeabi_f2iz+0x30>
 8000f1c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f24:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f28:	fa23 f002 	lsr.w	r0, r3, r2
 8000f2c:	bf18      	it	ne
 8000f2e:	4240      	negne	r0, r0
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr
 8000f38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f3c:	d101      	bne.n	8000f42 <__aeabi_f2iz+0x3a>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	d105      	bne.n	8000f4e <__aeabi_f2iz+0x46>
 8000f42:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f46:	bf08      	it	eq
 8000f48:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f4c:	4770      	bx	lr
 8000f4e:	f04f 0000 	mov.w	r0, #0
 8000f52:	4770      	bx	lr

08000f54 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f023 030f 	bic.w	r3, r3, #15
 8000f64:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	f043 030c 	orr.w	r3, r3, #12
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0308 	orr.w	r3, r3, #8
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f80:	7bbb      	ldrb	r3, [r7, #14]
 8000f82:	f043 030c 	orr.w	r3, r3, #12
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000f8a:	7bbb      	ldrb	r3, [r7, #14]
 8000f8c:	f043 0308 	orr.w	r3, r3, #8
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f94:	f107 0208 	add.w	r2, r7, #8
 8000f98:	2364      	movs	r3, #100	; 0x64
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	214e      	movs	r1, #78	; 0x4e
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <lcd_send_cmd+0x5c>)
 8000fa2:	f001 fd93 	bl	8002acc <HAL_I2C_Master_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200000bc 	.word	0x200000bc

08000fb4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f023 030f 	bic.w	r3, r3, #15
 8000fc4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 030d 	orr.w	r3, r3, #13
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0309 	orr.w	r3, r3, #9
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000fe0:	7bbb      	ldrb	r3, [r7, #14]
 8000fe2:	f043 030d 	orr.w	r3, r3, #13
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	f043 0309 	orr.w	r3, r3, #9
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ff4:	f107 0208 	add.w	r2, r7, #8
 8000ff8:	2364      	movs	r3, #100	; 0x64
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	214e      	movs	r1, #78	; 0x4e
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <lcd_send_data+0x5c>)
 8001002:	f001 fd63 	bl	8002acc <HAL_I2C_Master_Transmit>
}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000bc 	.word	0x200000bc

08001014 <lcd_clear>:

void lcd_clear (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800101a:	2080      	movs	r0, #128	; 0x80
 800101c:	f7ff ff9a 	bl	8000f54 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	e005      	b.n	8001032 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001026:	2020      	movs	r0, #32
 8001028:	f7ff ffc4 	bl	8000fb4 <lcd_send_data>
	for (int i=0; i<70; i++)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3301      	adds	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b45      	cmp	r3, #69	; 0x45
 8001036:	ddf6      	ble.n	8001026 <lcd_clear+0x12>
	}
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
    switch (row)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <lcd_put_cur+0x18>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d005      	beq.n	8001064 <lcd_put_cur+0x22>
 8001058:	e009      	b.n	800106e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	603b      	str	r3, [r7, #0]
            break;
 8001062:	e004      	b.n	800106e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800106a:	603b      	str	r3, [r7, #0]
            break;
 800106c:	bf00      	nop
    }

    lcd_send_cmd (col);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff6e 	bl	8000f54 <lcd_send_cmd>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <lcd_init>:


void lcd_init (void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001084:	2032      	movs	r0, #50	; 0x32
 8001086:	f000 fc1d 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800108a:	2030      	movs	r0, #48	; 0x30
 800108c:	f7ff ff62 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001090:	2005      	movs	r0, #5
 8001092:	f000 fc17 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001096:	2030      	movs	r0, #48	; 0x30
 8001098:	f7ff ff5c 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800109c:	2001      	movs	r0, #1
 800109e:	f000 fc11 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x30);
 80010a2:	2030      	movs	r0, #48	; 0x30
 80010a4:	f7ff ff56 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 fc0b 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80010ae:	2020      	movs	r0, #32
 80010b0:	f7ff ff50 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(10);
 80010b4:	200a      	movs	r0, #10
 80010b6:	f000 fc05 	bl	80018c4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010ba:	2028      	movs	r0, #40	; 0x28
 80010bc:	f7ff ff4a 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010c0:	2001      	movs	r0, #1
 80010c2:	f000 fbff 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010c6:	2008      	movs	r0, #8
 80010c8:	f7ff ff44 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 fbf9 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff ff3e 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010d8:	2001      	movs	r0, #1
 80010da:	f000 fbf3 	bl	80018c4 <HAL_Delay>
	HAL_Delay(1);
 80010de:	2001      	movs	r0, #1
 80010e0:	f000 fbf0 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010e4:	2006      	movs	r0, #6
 80010e6:	f7ff ff35 	bl	8000f54 <lcd_send_cmd>
	HAL_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fbea 	bl	80018c4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010f0:	200c      	movs	r0, #12
 80010f2:	f7ff ff2f 	bl	8000f54 <lcd_send_cmd>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}

080010fa <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001102:	e006      	b.n	8001112 <lcd_send_string+0x18>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff51 	bl	8000fb4 <lcd_send_data>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f4      	bne.n	8001104 <lcd_send_string+0xa>
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b08f      	sub	sp, #60	; 0x3c
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 fb69 	bl	8001800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f899 	bl	8001264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 f953 	bl	80013dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001136:	f000 f8e5 	bl	8001304 <MX_ADC1_Init>
  MX_I2C1_Init();
 800113a:	f000 f921 	bl	8001380 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1); //START ADC
 800113e:	4846      	ldr	r0, [pc, #280]	; (8001258 <main+0x134>)
 8001140:	f000 fcbc 	bl	8001abc <HAL_ADC_Start>

  float a;
  float V1;
  int A2=0,A3=0,A4=0;
 8001144:	2300      	movs	r3, #0
 8001146:	637b      	str	r3, [r7, #52]	; 0x34
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  int N=4;
 8001150:	2304      	movs	r3, #4
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
  float A1;


  float V2;
  a=0.000805;
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <main+0x138>)
 8001156:	623b      	str	r3, [r7, #32]
  {


	  //ADC

		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY); //CONVIERTE LA DATA LEIDA
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	483e      	ldr	r0, [pc, #248]	; (8001258 <main+0x134>)
 800115e:	f000 fd5b 	bl	8001c18 <HAL_ADC_PollForConversion>
		  raw_data = HAL_ADC_GetValue(&hadc1);//se lee el valor convertido
 8001162:	483d      	ldr	r0, [pc, #244]	; (8001258 <main+0x134>)
 8001164:	f000 fe5e 	bl	8001e24 <HAL_ADC_GetValue>
 8001168:	4603      	mov	r3, r0
 800116a:	83fb      	strh	r3, [r7, #30]

	  //END ADC


	  V1= raw_data*a;
 800116c:	8bfb      	ldrh	r3, [r7, #30]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fd26 	bl	8000bc0 <__aeabi_i2f>
 8001174:	4603      	mov	r3, r0
 8001176:	4619      	mov	r1, r3
 8001178:	6a38      	ldr	r0, [r7, #32]
 800117a:	f7ff fd75 	bl	8000c68 <__aeabi_fmul>
 800117e:	4603      	mov	r3, r0
 8001180:	61bb      	str	r3, [r7, #24]
	     A4=A3;
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
	 	 A3=A2;
 8001186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
	 	 A2=A1;
 800118a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800118c:	f7ff febc 	bl	8000f08 <__aeabi_f2iz>
 8001190:	4603      	mov	r3, r0
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
	 	 A1=V1;
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c
	 V2 = (A1+A2+A3+A4)/N;
 8001198:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800119a:	f7ff fd11 	bl	8000bc0 <__aeabi_i2f>
 800119e:	4603      	mov	r3, r0
 80011a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fc58 	bl	8000a58 <__addsf3>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461c      	mov	r4, r3
 80011ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011ae:	f7ff fd07 	bl	8000bc0 <__aeabi_i2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4619      	mov	r1, r3
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff fc4e 	bl	8000a58 <__addsf3>
 80011bc:	4603      	mov	r3, r0
 80011be:	461c      	mov	r4, r3
 80011c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011c2:	f7ff fcfd 	bl	8000bc0 <__aeabi_i2f>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4619      	mov	r1, r3
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fc44 	bl	8000a58 <__addsf3>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461c      	mov	r4, r3
 80011d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011d6:	f7ff fcf3 	bl	8000bc0 <__aeabi_i2f>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	4620      	mov	r0, r4
 80011e0:	f7ff fdf6 	bl	8000dd0 <__aeabi_fdiv>
 80011e4:	4603      	mov	r3, r0
 80011e6:	617b      	str	r3, [r7, #20]

	  //for loop

	  	  lcd_clear();   //THIS FUNCTION CLEAR THE LCD AND
 80011e8:	f7ff ff14 	bl	8001014 <lcd_clear>
	  	  HAL_Delay(1000);
 80011ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011f0:	f000 fb68 	bl	80018c4 <HAL_Delay>
	  	  lcd_init ();	//INITIALIZE THE LCD (** if the LCD is cleared, you need to initialize it again ***)
 80011f4:	f7ff ff44 	bl	8001080 <lcd_init>

	  	  lcd_put_cur(0,0);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2000      	movs	r0, #0
 80011fc:	f7ff ff21 	bl	8001042 <lcd_put_cur>
	  	  HAL_Delay(10);
 8001200:	200a      	movs	r0, #10
 8001202:	f000 fb5f 	bl	80018c4 <HAL_Delay>

	  	  lcd_send_string ("VOLTAJE [V]");
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <main+0x13c>)
 8001208:	f7ff ff77 	bl	80010fa <lcd_send_string>


	  	gcvt(V1, 4, voltajepalabra);
 800120c:	69b8      	ldr	r0, [r7, #24]
 800120e:	f7ff f903 	bl	8000418 <__aeabi_f2d>
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	2204      	movs	r2, #4
 8001218:	f002 fcee 	bl	8003bf8 <gcvt>
	  	lcd_put_cur(1,2);
 800121c:	2102      	movs	r1, #2
 800121e:	2001      	movs	r0, #1
 8001220:	f7ff ff0f 	bl	8001042 <lcd_put_cur>
	  	lcd_send_string (voltajepalabra);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff66 	bl	80010fa <lcd_send_string>

	  	gcvt(V2, 4, voltajepalabra2);
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff f8f2 	bl	8000418 <__aeabi_f2d>
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	2204      	movs	r2, #4
 8001238:	f002 fcde 	bl	8003bf8 <gcvt>
	  	lcd_put_cur(1,8);
 800123c:	2108      	movs	r1, #8
 800123e:	2001      	movs	r0, #1
 8001240:	f7ff feff 	bl	8001042 <lcd_put_cur>
	  	lcd_send_string (voltajepalabra2);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff57 	bl	80010fa <lcd_send_string>
	  	HAL_Delay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001250:	f000 fb38 	bl	80018c4 <HAL_Delay>
  {
 8001254:	e780      	b.n	8001158 <main+0x34>
 8001256:	bf00      	nop
 8001258:	2000008c 	.word	0x2000008c
 800125c:	3a5306a3 	.word	0x3a5306a3
 8001260:	080063b8 	.word	0x080063b8

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	; 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	2228      	movs	r2, #40	; 0x28
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fd0e 	bl	8003c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129c:	2310      	movs	r3, #16
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 ff15 	bl	80030d8 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80012b4:	f000 f8cc 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 f982 	bl	80035dc <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012de:	f000 f8b7 	bl	8001450 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012e2:	2302      	movs	r3, #2
 80012e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f002 fb0d 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012f8:	f000 f8aa 	bl	8001450 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	; 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_ADC1_Init+0x74>)
 8001316:	4a19      	ldr	r2, [pc, #100]	; (800137c <MX_ADC1_Init+0x78>)
 8001318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MX_ADC1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_ADC1_Init+0x74>)
 8001322:	2201      	movs	r2, #1
 8001324:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_ADC1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_ADC1_Init+0x74>)
 800132e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001332:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001334:	4b10      	ldr	r3, [pc, #64]	; (8001378 <MX_ADC1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_ADC1_Init+0x74>)
 800133c:	2201      	movs	r2, #1
 800133e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001340:	480d      	ldr	r0, [pc, #52]	; (8001378 <MX_ADC1_Init+0x74>)
 8001342:	f000 fae3 	bl	800190c <HAL_ADC_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800134c:	f000 f880 	bl	8001450 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001350:	2300      	movs	r3, #0
 8001352:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001354:	2301      	movs	r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_ADC1_Init+0x74>)
 8001362:	f000 fe41 	bl	8001fe8 <HAL_ADC_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800136c:	f000 f870 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000008c 	.word	0x2000008c
 800137c:	40012400 	.word	0x40012400

08001380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001386:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <MX_I2C1_Init+0x54>)
 8001388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 150000;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_I2C1_Init+0x50>)
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <MX_I2C1_Init+0x58>)
 800138e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_I2C1_Init+0x50>)
 800139e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C1_Init+0x50>)
 80013be:	f001 fa41 	bl	8002844 <HAL_I2C_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013c8:	f000 f842 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000bc 	.word	0x200000bc
 80013d4:	40005400 	.word	0x40005400
 80013d8:	000249f0 	.word	0x000249f0

080013dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_GPIO_Init+0x68>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a13      	ldr	r2, [pc, #76]	; (8001444 <MX_GPIO_Init+0x68>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_GPIO_Init+0x68>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_GPIO_Init+0x68>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <MX_GPIO_Init+0x68>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_GPIO_Init+0x68>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0308 	and.w	r3, r3, #8
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_GPIO_Init+0x6c>)
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_GPIO_Init+0x70>)
 8001436:	f001 f881 	bl	800253c <HAL_GPIO_Init>

}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	10110000 	.word	0x10110000
 800144c:	40010c00 	.word	0x40010c00

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_MspInit+0x5c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6193      	str	r3, [r2, #24]
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_MspInit+0x5c>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_MspInit+0x5c>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_MspInit+0x5c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148e:	607b      	str	r3, [r7, #4]
 8001490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_MspInit+0x60>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	4a04      	ldr	r2, [pc, #16]	; (80014bc <HAL_MspInit+0x60>)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	3714      	adds	r7, #20
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000

080014c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0310 	add.w	r3, r7, #16
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_ADC_MspInit+0x7c>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d129      	bne.n	8001534 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e0:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a16      	ldr	r2, [pc, #88]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a10      	ldr	r2, [pc, #64]	; (8001540 <HAL_ADC_MspInit+0x80>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_ADC_MspInit+0x80>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001514:	2303      	movs	r3, #3
 8001516:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	4619      	mov	r1, r3
 800151e:	4809      	ldr	r0, [pc, #36]	; (8001544 <HAL_ADC_MspInit+0x84>)
 8001520:	f001 f80c 	bl	800253c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2012      	movs	r0, #18
 800152a:	f000 ffd0 	bl	80024ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800152e:	2012      	movs	r0, #18
 8001530:	f000 ffe9 	bl	8002506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40012400 	.word	0x40012400
 8001540:	40021000 	.word	0x40021000
 8001544:	40010800 	.word	0x40010800

08001548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a15      	ldr	r2, [pc, #84]	; (80015b8 <HAL_I2C_MspInit+0x70>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d123      	bne.n	80015b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_I2C_MspInit+0x74>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <HAL_I2C_MspInit+0x74>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_I2C_MspInit+0x74>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001584:	2312      	movs	r3, #18
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	4619      	mov	r1, r3
 8001592:	480b      	ldr	r0, [pc, #44]	; (80015c0 <HAL_I2C_MspInit+0x78>)
 8001594:	f000 ffd2 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_I2C_MspInit+0x74>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_I2C_MspInit+0x74>)
 800159e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a2:	61d3      	str	r3, [r2, #28]
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <HAL_I2C_MspInit+0x74>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3720      	adds	r7, #32
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40005400 	.word	0x40005400
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010c00 	.word	0x40010c00

080015c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <NMI_Handler+0x4>

080015ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <HardFault_Handler+0x4>

080015d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <MemManage_Handler+0x4>

080015d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015da:	e7fe      	b.n	80015da <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f93f 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <ADC1_2_IRQHandler+0x10>)
 800161a:	f000 fc0f 	bl	8001e3c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2000008c 	.word	0x2000008c

08001628 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <_kill>:

int _kill(int pid, int sig)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001640:	f002 fafe 	bl	8003c40 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	2216      	movs	r2, #22
 8001648:	601a      	str	r2, [r3, #0]
	return -1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_exit>:

void _exit (int status)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800165e:	f04f 31ff 	mov.w	r1, #4294967295
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffe7 	bl	8001636 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001668:	e7fe      	b.n	8001668 <_exit+0x12>

0800166a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	e00a      	b.n	8001692 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800167c:	f3af 8000 	nop.w
 8001680:	4601      	mov	r1, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	b2ca      	uxtb	r2, r1
 800168a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	3301      	adds	r3, #1
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697a      	ldr	r2, [r7, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	429a      	cmp	r2, r3
 8001698:	dbf0      	blt.n	800167c <_read+0x12>
	}

return len;
 800169a:	687b      	ldr	r3, [r7, #4]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	e009      	b.n	80016ca <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	dbf1      	blt.n	80016b6 <_write+0x12>
	}
	return len;
 80016d2:	687b      	ldr	r3, [r7, #4]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_close>:

int _close(int file)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr

080016f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001702:	605a      	str	r2, [r3, #4]
	return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <_isatty>:

int _isatty(int file)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
	return 0;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f002 fa68 	bl	8003c40 <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20005000 	.word	0x20005000
 800179c:	00000400 	.word	0x00000400
 80017a0:	20000110 	.word	0x20000110
 80017a4:	20000128 	.word	0x20000128

080017a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017da:	f7ff ffe5 	bl	80017a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017de:	f002 fa35 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e2:	f7ff fc9f 	bl	8001124 <main>
  bx lr
 80017e6:	4770      	bx	lr
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80017f0:	080066c8 	.word	0x080066c8
  ldr r2, =_sbss
 80017f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80017f8:	20000128 	.word	0x20000128

080017fc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <CAN1_RX1_IRQHandler>
	...

08001800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <HAL_Init+0x28>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <HAL_Init+0x28>)
 800180a:	f043 0310 	orr.w	r3, r3, #16
 800180e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 fe51 	bl	80024b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	200f      	movs	r0, #15
 8001818:	f000 f808 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fe1e 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fe69 	bl	8002522 <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 fe31 	bl	80024ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	; (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	20000008 	.word	0x20000008
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_IncTick+0x1c>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x20>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a03      	ldr	r2, [pc, #12]	; (80018ac <HAL_IncTick+0x20>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr
 80018a8:	20000008 	.word	0x20000008
 80018ac:	20000114 	.word	0x20000114

080018b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b02      	ldr	r3, [pc, #8]	; (80018c0 <HAL_GetTick+0x10>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	20000114 	.word	0x20000114

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff fff0 	bl	80018b0 <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <HAL_Delay+0x44>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffe0 	bl	80018b0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008

0800190c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0be      	b.n	8001aac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fdb8 	bl	80014c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fc9b 	bl	800228c <ADC_ConversionStop_Disable>
 8001956:	4603      	mov	r3, r0
 8001958:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	f040 8099 	bne.w	8001a9a <HAL_ADC_Init+0x18e>
 8001968:	7dfb      	ldrb	r3, [r7, #23]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f040 8095 	bne.w	8001a9a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001978:	f023 0302 	bic.w	r3, r3, #2
 800197c:	f043 0202 	orr.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800198c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7b1b      	ldrb	r3, [r3, #12]
 8001992:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001994:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	4313      	orrs	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a4:	d003      	beq.n	80019ae <HAL_ADC_Init+0xa2>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d102      	bne.n	80019b4 <HAL_ADC_Init+0xa8>
 80019ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b2:	e000      	b.n	80019b6 <HAL_ADC_Init+0xaa>
 80019b4:	2300      	movs	r3, #0
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7d1b      	ldrb	r3, [r3, #20]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d119      	bne.n	80019f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7b1b      	ldrb	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	035a      	lsls	r2, r3, #13
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e00b      	b.n	80019f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e4:	f043 0220 	orr.w	r2, r3, #32
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f043 0201 	orr.w	r2, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <HAL_ADC_Init+0x1a8>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	68b9      	ldr	r1, [r7, #8]
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a28:	d003      	beq.n	8001a32 <HAL_ADC_Init+0x126>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d104      	bne.n	8001a3c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	051b      	lsls	r3, r3, #20
 8001a3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_ADC_Init+0x1ac>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d10b      	bne.n	8001a78 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	f043 0201 	orr.w	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a76:	e018      	b.n	8001aaa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	f023 0312 	bic.w	r3, r3, #18
 8001a80:	f043 0210 	orr.w	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a98:	e007      	b.n	8001aaa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f043 0210 	orr.w	r2, r3, #16
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ab8:	ff1f0efe 	.word	0xff1f0efe

08001abc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Start+0x1a>
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e098      	b.n	8001c08 <HAL_ADC_Start+0x14c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fb7a 	bl	80021d8 <ADC_Enable>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f040 8087 	bne.w	8001bfe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af8:	f023 0301 	bic.w	r3, r3, #1
 8001afc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a41      	ldr	r2, [pc, #260]	; (8001c10 <HAL_ADC_Start+0x154>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d105      	bne.n	8001b1a <HAL_ADC_Start+0x5e>
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_ADC_Start+0x158>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d026      	beq.n	8001b82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b44:	e01d      	b.n	8001b82 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a2f      	ldr	r2, [pc, #188]	; (8001c14 <HAL_ADC_Start+0x158>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_Start+0xaa>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a2b      	ldr	r2, [pc, #172]	; (8001c10 <HAL_ADC_Start+0x154>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10d      	bne.n	8001b82 <HAL_ADC_Start+0xc6>
 8001b66:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_ADC_Start+0x158>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d006      	beq.n	8001b9c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	f023 0206 	bic.w	r2, r3, #6
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f06f 0202 	mvn.w	r2, #2
 8001bb2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bbe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001bc2:	d113      	bne.n	8001bec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bc8:	4a11      	ldr	r2, [pc, #68]	; (8001c10 <HAL_ADC_Start+0x154>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d105      	bne.n	8001bda <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_ADC_Start+0x158>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d108      	bne.n	8001bec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	e00c      	b.n	8001c06 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	e003      	b.n	8001c06 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40012800 	.word	0x40012800
 8001c14:	40012400 	.word	0x40012400

08001c18 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c2e:	f7ff fe3f 	bl	80018b0 <HAL_GetTick>
 8001c32:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c46:	f043 0220 	orr.w	r2, r3, #32
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0d3      	b.n	8001e02 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d131      	bne.n	8001ccc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d12a      	bne.n	8001ccc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c76:	e021      	b.n	8001cbc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7e:	d01d      	beq.n	8001cbc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x7e>
 8001c86:	f7ff fe13 	bl	80018b0 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d212      	bcs.n	8001cbc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e0a2      	b.n	8001e02 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0d6      	beq.n	8001c78 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cca:	e070      	b.n	8001dae <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001ccc:	4b4f      	ldr	r3, [pc, #316]	; (8001e0c <HAL_ADC_PollForConversion+0x1f4>)
 8001cce:	681c      	ldr	r4, [r3, #0]
 8001cd0:	2002      	movs	r0, #2
 8001cd2:	f001 fed1 	bl	8003a78 <HAL_RCCEx_GetPeriphCLKFreq>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	4b4b      	ldr	r3, [pc, #300]	; (8001e10 <HAL_ADC_PollForConversion+0x1f8>)
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x104>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68d9      	ldr	r1, [r3, #12]
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_ADC_PollForConversion+0x1fc>)
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d111      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x104>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6919      	ldr	r1, [r3, #16]
 8001cfe:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_ADC_PollForConversion+0x200>)
 8001d00:	400b      	ands	r3, r1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d108      	bne.n	8001d18 <HAL_ADC_PollForConversion+0x100>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68d9      	ldr	r1, [r3, #12]
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <HAL_ADC_PollForConversion+0x204>)
 8001d0e:	400b      	ands	r3, r1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_ADC_PollForConversion+0x100>
 8001d14:	2314      	movs	r3, #20
 8001d16:	e020      	b.n	8001d5a <HAL_ADC_PollForConversion+0x142>
 8001d18:	2329      	movs	r3, #41	; 0x29
 8001d1a:	e01e      	b.n	8001d5a <HAL_ADC_PollForConversion+0x142>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6919      	ldr	r1, [r3, #16]
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_ADC_PollForConversion+0x200>)
 8001d24:	400b      	ands	r3, r1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <HAL_ADC_PollForConversion+0x120>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_ADC_PollForConversion+0x204>)
 8001d32:	400b      	ands	r3, r1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00d      	beq.n	8001d54 <HAL_ADC_PollForConversion+0x13c>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <HAL_ADC_PollForConversion+0x208>)
 8001d40:	400b      	ands	r3, r1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x140>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	4b34      	ldr	r3, [pc, #208]	; (8001e20 <HAL_ADC_PollForConversion+0x208>)
 8001d4e:	400b      	ands	r3, r1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x140>
 8001d54:	2354      	movs	r3, #84	; 0x54
 8001d56:	e000      	b.n	8001d5a <HAL_ADC_PollForConversion+0x142>
 8001d58:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d60:	e021      	b.n	8001da6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d01a      	beq.n	8001da0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <HAL_ADC_PollForConversion+0x168>
 8001d70:	f7ff fd9e 	bl	80018b0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d20f      	bcs.n	8001da0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d90b      	bls.n	8001da0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f043 0204 	orr.w	r2, r3, #4
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e030      	b.n	8001e02 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d8d9      	bhi.n	8001d62 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f06f 0212 	mvn.w	r2, #18
 8001db6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dd2:	d115      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d111      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	f043 0201 	orr.w	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	371c      	adds	r7, #28
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd90      	pop	{r4, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	24924924 	.word	0x24924924
 8001e14:	00924924 	.word	0x00924924
 8001e18:	12492492 	.word	0x12492492
 8001e1c:	00492492 	.word	0x00492492
 8001e20:	00249249 	.word	0x00249249

08001e24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d140      	bne.n	8001ed4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d139      	bne.n	8001ed4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e86:	d11d      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d119      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0220 	bic.w	r2, r2, #32
 8001e9e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d105      	bne.n	8001ec4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	f043 0201 	orr.w	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f87c 	bl	8001fc2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f06f 0212 	mvn.w	r2, #18
 8001ed2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ede:	2b80      	cmp	r3, #128	; 0x80
 8001ee0:	d14f      	bne.n	8001f82 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d148      	bne.n	8001f82 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f12:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001f16:	d012      	beq.n	8001f3e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d125      	bne.n	8001f72 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f30:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f34:	d11d      	bne.n	8001f72 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d119      	bne.n	8001f72 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f4c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6a:	f043 0201 	orr.w	r2, r3, #1
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f9cb 	bl	800230e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 020c 	mvn.w	r2, #12
 8001f80:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b40      	cmp	r3, #64	; 0x40
 8001f8e:	d114      	bne.n	8001fba <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f812 	bl	8001fd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0201 	mvn.w	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
	...

08001fe8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x20>
 8002004:	2302      	movs	r3, #2
 8002006:	e0dc      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1da>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d81c      	bhi.n	8002052 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b05      	subs	r3, #5
 800202a:	221f      	movs	r2, #31
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	4019      	ands	r1, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	3b05      	subs	r3, #5
 8002044:	fa00 f203 	lsl.w	r2, r0, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	635a      	str	r2, [r3, #52]	; 0x34
 8002050:	e03c      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b0c      	cmp	r3, #12
 8002058:	d81c      	bhi.n	8002094 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	3b23      	subs	r3, #35	; 0x23
 800206c:	221f      	movs	r2, #31
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	4019      	ands	r1, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b23      	subs	r3, #35	; 0x23
 8002086:	fa00 f203 	lsl.w	r2, r0, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	; 0x30
 8002092:	e01b      	b.n	80020cc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685a      	ldr	r2, [r3, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	3b41      	subs	r3, #65	; 0x41
 80020a6:	221f      	movs	r2, #31
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4019      	ands	r1, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	4413      	add	r3, r2
 80020be:	3b41      	subs	r3, #65	; 0x41
 80020c0:	fa00 f203 	lsl.w	r2, r0, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b09      	cmp	r3, #9
 80020d2:	d91c      	bls.n	800210e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68d9      	ldr	r1, [r3, #12]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	3b1e      	subs	r3, #30
 80020e6:	2207      	movs	r2, #7
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4019      	ands	r1, r3
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6898      	ldr	r0, [r3, #8]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	3b1e      	subs	r3, #30
 8002100:	fa00 f203 	lsl.w	r2, r0, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e019      	b.n	8002142 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	2207      	movs	r2, #7
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	4019      	ands	r1, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6898      	ldr	r0, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4413      	add	r3, r2
 8002136:	fa00 f203 	lsl.w	r2, r0, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b10      	cmp	r3, #16
 8002148:	d003      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800214e:	2b11      	cmp	r3, #17
 8002150:	d132      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_ADC_ConfigChannel+0x1e4>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d125      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d126      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002178:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b10      	cmp	r3, #16
 8002180:	d11a      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002182:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9a      	lsrs	r2, r3, #18
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002198:	e002      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3b01      	subs	r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f9      	bne.n	800219a <HAL_ADC_ConfigChannel+0x1b2>
 80021a6:	e007      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40012400 	.word	0x40012400
 80021d0:	20000000 	.word	0x20000000
 80021d4:	431bde83 	.word	0x431bde83

080021d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d040      	beq.n	8002278 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0201 	orr.w	r2, r2, #1
 8002204:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <ADC_Enable+0xac>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <ADC_Enable+0xb0>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002214:	e002      	b.n	800221c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3b01      	subs	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f9      	bne.n	8002216 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002222:	f7ff fb45 	bl	80018b0 <HAL_GetTick>
 8002226:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002228:	e01f      	b.n	800226a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800222a:	f7ff fb41 	bl	80018b0 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d918      	bls.n	800226a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d011      	beq.n	800226a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	f043 0210 	orr.w	r2, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f043 0201 	orr.w	r2, r3, #1
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e007      	b.n	800227a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d1d8      	bne.n	800222a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000000 	.word	0x20000000
 8002288:	431bde83 	.word	0x431bde83

0800228c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12e      	bne.n	8002304 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b6:	f7ff fafb 	bl	80018b0 <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022bc:	e01b      	b.n	80022f6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022be:	f7ff faf7 	bl	80018b0 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d914      	bls.n	80022f6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f043 0210 	orr.w	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e007      	b.n	8002306 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d0dc      	beq.n	80022be <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800233c:	4013      	ands	r3, r2
 800233e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800234c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <__NVIC_SetPriorityGrouping+0x44>)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	60d3      	str	r3, [r2, #12]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_GetPriorityGrouping+0x18>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	f003 0307 	and.w	r3, r3, #7
}
 8002376:	4618      	mov	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	2b00      	cmp	r3, #0
 8002394:	db0b      	blt.n	80023ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4906      	ldr	r1, [pc, #24]	; (80023b8 <__NVIC_EnableIRQ+0x34>)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	2001      	movs	r0, #1
 80023a6:	fa00 f202 	lsl.w	r2, r0, r2
 80023aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100

080023bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	6039      	str	r1, [r7, #0]
 80023c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db0a      	blt.n	80023e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	490c      	ldr	r1, [pc, #48]	; (8002408 <__NVIC_SetPriority+0x4c>)
 80023d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023da:	0112      	lsls	r2, r2, #4
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	440b      	add	r3, r1
 80023e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023e4:	e00a      	b.n	80023fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4908      	ldr	r1, [pc, #32]	; (800240c <__NVIC_SetPriority+0x50>)
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	3b04      	subs	r3, #4
 80023f4:	0112      	lsls	r2, r2, #4
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	440b      	add	r3, r1
 80023fa:	761a      	strb	r2, [r3, #24]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	; 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f1c3 0307 	rsb	r3, r3, #7
 800242a:	2b04      	cmp	r3, #4
 800242c:	bf28      	it	cs
 800242e:	2304      	movcs	r3, #4
 8002430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3304      	adds	r3, #4
 8002436:	2b06      	cmp	r3, #6
 8002438:	d902      	bls.n	8002440 <NVIC_EncodePriority+0x30>
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3b03      	subs	r3, #3
 800243e:	e000      	b.n	8002442 <NVIC_EncodePriority+0x32>
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	f04f 32ff 	mov.w	r2, #4294967295
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	401a      	ands	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002458:	f04f 31ff 	mov.w	r1, #4294967295
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa01 f303 	lsl.w	r3, r1, r3
 8002462:	43d9      	mvns	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	4313      	orrs	r3, r2
         );
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	; 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002484:	d301      	bcc.n	800248a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002486:	2301      	movs	r3, #1
 8002488:	e00f      	b.n	80024aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800248a:	4a0a      	ldr	r2, [pc, #40]	; (80024b4 <SysTick_Config+0x40>)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002492:	210f      	movs	r1, #15
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f7ff ff90 	bl	80023bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <SysTick_Config+0x40>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024a2:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <SysTick_Config+0x40>)
 80024a4:	2207      	movs	r2, #7
 80024a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	e000e010 	.word	0xe000e010

080024b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff2d 	bl	8002320 <__NVIC_SetPriorityGrouping>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024e0:	f7ff ff42 	bl	8002368 <__NVIC_GetPriorityGrouping>
 80024e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f7ff ff90 	bl	8002410 <NVIC_EncodePriority>
 80024f0:	4602      	mov	r2, r0
 80024f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff5f 	bl	80023bc <__NVIC_SetPriority>
}
 80024fe:	bf00      	nop
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff ff35 	bl	8002384 <__NVIC_EnableIRQ>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ffa2 	bl	8002474 <SysTick_Config>
 8002530:	4603      	mov	r3, r0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800253c:	b480      	push	{r7}
 800253e:	b08b      	sub	sp, #44	; 0x2c
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254e:	e169      	b.n	8002824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002550:	2201      	movs	r2, #1
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	429a      	cmp	r2, r3
 800256a:	f040 8158 	bne.w	800281e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4a9a      	ldr	r2, [pc, #616]	; (80027dc <HAL_GPIO_Init+0x2a0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d05e      	beq.n	8002636 <HAL_GPIO_Init+0xfa>
 8002578:	4a98      	ldr	r2, [pc, #608]	; (80027dc <HAL_GPIO_Init+0x2a0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d875      	bhi.n	800266a <HAL_GPIO_Init+0x12e>
 800257e:	4a98      	ldr	r2, [pc, #608]	; (80027e0 <HAL_GPIO_Init+0x2a4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d058      	beq.n	8002636 <HAL_GPIO_Init+0xfa>
 8002584:	4a96      	ldr	r2, [pc, #600]	; (80027e0 <HAL_GPIO_Init+0x2a4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d86f      	bhi.n	800266a <HAL_GPIO_Init+0x12e>
 800258a:	4a96      	ldr	r2, [pc, #600]	; (80027e4 <HAL_GPIO_Init+0x2a8>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d052      	beq.n	8002636 <HAL_GPIO_Init+0xfa>
 8002590:	4a94      	ldr	r2, [pc, #592]	; (80027e4 <HAL_GPIO_Init+0x2a8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d869      	bhi.n	800266a <HAL_GPIO_Init+0x12e>
 8002596:	4a94      	ldr	r2, [pc, #592]	; (80027e8 <HAL_GPIO_Init+0x2ac>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d04c      	beq.n	8002636 <HAL_GPIO_Init+0xfa>
 800259c:	4a92      	ldr	r2, [pc, #584]	; (80027e8 <HAL_GPIO_Init+0x2ac>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d863      	bhi.n	800266a <HAL_GPIO_Init+0x12e>
 80025a2:	4a92      	ldr	r2, [pc, #584]	; (80027ec <HAL_GPIO_Init+0x2b0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d046      	beq.n	8002636 <HAL_GPIO_Init+0xfa>
 80025a8:	4a90      	ldr	r2, [pc, #576]	; (80027ec <HAL_GPIO_Init+0x2b0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d85d      	bhi.n	800266a <HAL_GPIO_Init+0x12e>
 80025ae:	2b12      	cmp	r3, #18
 80025b0:	d82a      	bhi.n	8002608 <HAL_GPIO_Init+0xcc>
 80025b2:	2b12      	cmp	r3, #18
 80025b4:	d859      	bhi.n	800266a <HAL_GPIO_Init+0x12e>
 80025b6:	a201      	add	r2, pc, #4	; (adr r2, 80025bc <HAL_GPIO_Init+0x80>)
 80025b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025bc:	08002637 	.word	0x08002637
 80025c0:	08002611 	.word	0x08002611
 80025c4:	08002623 	.word	0x08002623
 80025c8:	08002665 	.word	0x08002665
 80025cc:	0800266b 	.word	0x0800266b
 80025d0:	0800266b 	.word	0x0800266b
 80025d4:	0800266b 	.word	0x0800266b
 80025d8:	0800266b 	.word	0x0800266b
 80025dc:	0800266b 	.word	0x0800266b
 80025e0:	0800266b 	.word	0x0800266b
 80025e4:	0800266b 	.word	0x0800266b
 80025e8:	0800266b 	.word	0x0800266b
 80025ec:	0800266b 	.word	0x0800266b
 80025f0:	0800266b 	.word	0x0800266b
 80025f4:	0800266b 	.word	0x0800266b
 80025f8:	0800266b 	.word	0x0800266b
 80025fc:	0800266b 	.word	0x0800266b
 8002600:	08002619 	.word	0x08002619
 8002604:	0800262d 	.word	0x0800262d
 8002608:	4a79      	ldr	r2, [pc, #484]	; (80027f0 <HAL_GPIO_Init+0x2b4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800260e:	e02c      	b.n	800266a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	623b      	str	r3, [r7, #32]
          break;
 8002616:	e029      	b.n	800266c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	3304      	adds	r3, #4
 800261e:	623b      	str	r3, [r7, #32]
          break;
 8002620:	e024      	b.n	800266c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	3308      	adds	r3, #8
 8002628:	623b      	str	r3, [r7, #32]
          break;
 800262a:	e01f      	b.n	800266c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	330c      	adds	r3, #12
 8002632:	623b      	str	r3, [r7, #32]
          break;
 8002634:	e01a      	b.n	800266c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800263e:	2304      	movs	r3, #4
 8002640:	623b      	str	r3, [r7, #32]
          break;
 8002642:	e013      	b.n	800266c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800264c:	2308      	movs	r3, #8
 800264e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	611a      	str	r2, [r3, #16]
          break;
 8002656:	e009      	b.n	800266c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002658:	2308      	movs	r3, #8
 800265a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	615a      	str	r2, [r3, #20]
          break;
 8002662:	e003      	b.n	800266c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
          break;
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x130>
          break;
 800266a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d801      	bhi.n	8002676 <HAL_GPIO_Init+0x13a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	e001      	b.n	800267a <HAL_GPIO_Init+0x13e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2bff      	cmp	r3, #255	; 0xff
 8002680:	d802      	bhi.n	8002688 <HAL_GPIO_Init+0x14c>
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	e002      	b.n	800268e <HAL_GPIO_Init+0x152>
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	3b08      	subs	r3, #8
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	210f      	movs	r1, #15
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	fa01 f303 	lsl.w	r3, r1, r3
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	6a39      	ldr	r1, [r7, #32]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	fa01 f303 	lsl.w	r3, r1, r3
 80026a8:	431a      	orrs	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80b1 	beq.w	800281e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026bc:	4b4d      	ldr	r3, [pc, #308]	; (80027f4 <HAL_GPIO_Init+0x2b8>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	4a4c      	ldr	r2, [pc, #304]	; (80027f4 <HAL_GPIO_Init+0x2b8>)
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	6193      	str	r3, [r2, #24]
 80026c8:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <HAL_GPIO_Init+0x2b8>)
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026d4:	4a48      	ldr	r2, [pc, #288]	; (80027f8 <HAL_GPIO_Init+0x2bc>)
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4013      	ands	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a40      	ldr	r2, [pc, #256]	; (80027fc <HAL_GPIO_Init+0x2c0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d013      	beq.n	8002728 <HAL_GPIO_Init+0x1ec>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <HAL_GPIO_Init+0x2c4>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00d      	beq.n	8002724 <HAL_GPIO_Init+0x1e8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a3e      	ldr	r2, [pc, #248]	; (8002804 <HAL_GPIO_Init+0x2c8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d007      	beq.n	8002720 <HAL_GPIO_Init+0x1e4>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3d      	ldr	r2, [pc, #244]	; (8002808 <HAL_GPIO_Init+0x2cc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_GPIO_Init+0x1e0>
 8002718:	2303      	movs	r3, #3
 800271a:	e006      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 800271c:	2304      	movs	r3, #4
 800271e:	e004      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 8002720:	2302      	movs	r3, #2
 8002722:	e002      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <HAL_GPIO_Init+0x1ee>
 8002728:	2300      	movs	r3, #0
 800272a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800272c:	f002 0203 	and.w	r2, r2, #3
 8002730:	0092      	lsls	r2, r2, #2
 8002732:	4093      	lsls	r3, r2
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800273a:	492f      	ldr	r1, [pc, #188]	; (80027f8 <HAL_GPIO_Init+0x2bc>)
 800273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273e:	089b      	lsrs	r3, r3, #2
 8002740:	3302      	adds	r3, #2
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d006      	beq.n	8002762 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002754:	4b2d      	ldr	r3, [pc, #180]	; (800280c <HAL_GPIO_Init+0x2d0>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	492c      	ldr	r1, [pc, #176]	; (800280c <HAL_GPIO_Init+0x2d0>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	e006      	b.n	8002770 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002762:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_GPIO_Init+0x2d0>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	43db      	mvns	r3, r3
 800276a:	4928      	ldr	r1, [pc, #160]	; (800280c <HAL_GPIO_Init+0x2d0>)
 800276c:	4013      	ands	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d006      	beq.n	800278a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800277c:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_GPIO_Init+0x2d0>)
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	4922      	ldr	r1, [pc, #136]	; (800280c <HAL_GPIO_Init+0x2d0>)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4313      	orrs	r3, r2
 8002786:	604b      	str	r3, [r1, #4]
 8002788:	e006      	b.n	8002798 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800278a:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_GPIO_Init+0x2d0>)
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	43db      	mvns	r3, r3
 8002792:	491e      	ldr	r1, [pc, #120]	; (800280c <HAL_GPIO_Init+0x2d0>)
 8002794:	4013      	ands	r3, r2
 8002796:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_GPIO_Init+0x2d0>)
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	4918      	ldr	r1, [pc, #96]	; (800280c <HAL_GPIO_Init+0x2d0>)
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_GPIO_Init+0x2d0>)
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	4914      	ldr	r1, [pc, #80]	; (800280c <HAL_GPIO_Init+0x2d0>)
 80027bc:	4013      	ands	r3, r2
 80027be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d021      	beq.n	8002810 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_GPIO_Init+0x2d0>)
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_GPIO_Init+0x2d0>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]
 80027d8:	e021      	b.n	800281e <HAL_GPIO_Init+0x2e2>
 80027da:	bf00      	nop
 80027dc:	10320000 	.word	0x10320000
 80027e0:	10310000 	.word	0x10310000
 80027e4:	10220000 	.word	0x10220000
 80027e8:	10210000 	.word	0x10210000
 80027ec:	10120000 	.word	0x10120000
 80027f0:	10110000 	.word	0x10110000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40010000 	.word	0x40010000
 80027fc:	40010800 	.word	0x40010800
 8002800:	40010c00 	.word	0x40010c00
 8002804:	40011000 	.word	0x40011000
 8002808:	40011400 	.word	0x40011400
 800280c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_GPIO_Init+0x304>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	43db      	mvns	r3, r3
 8002818:	4909      	ldr	r1, [pc, #36]	; (8002840 <HAL_GPIO_Init+0x304>)
 800281a:	4013      	ands	r3, r2
 800281c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	3301      	adds	r3, #1
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	f47f ae8e 	bne.w	8002550 <HAL_GPIO_Init+0x14>
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	372c      	adds	r7, #44	; 0x2c
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40010400 	.word	0x40010400

08002844 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e12b      	b.n	8002aae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fe6c 	bl	8001548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002896:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028a8:	f000 ffea 	bl	8003880 <HAL_RCC_GetPCLK1Freq>
 80028ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a81      	ldr	r2, [pc, #516]	; (8002ab8 <HAL_I2C_Init+0x274>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d807      	bhi.n	80028c8 <HAL_I2C_Init+0x84>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4a80      	ldr	r2, [pc, #512]	; (8002abc <HAL_I2C_Init+0x278>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	bf94      	ite	ls
 80028c0:	2301      	movls	r3, #1
 80028c2:	2300      	movhi	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e006      	b.n	80028d6 <HAL_I2C_Init+0x92>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a7d      	ldr	r2, [pc, #500]	; (8002ac0 <HAL_I2C_Init+0x27c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	bf94      	ite	ls
 80028d0:	2301      	movls	r3, #1
 80028d2:	2300      	movhi	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e0e7      	b.n	8002aae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4a78      	ldr	r2, [pc, #480]	; (8002ac4 <HAL_I2C_Init+0x280>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0c9b      	lsrs	r3, r3, #18
 80028e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4a6a      	ldr	r2, [pc, #424]	; (8002ab8 <HAL_I2C_Init+0x274>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d802      	bhi.n	8002918 <HAL_I2C_Init+0xd4>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3301      	adds	r3, #1
 8002916:	e009      	b.n	800292c <HAL_I2C_Init+0xe8>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800291e:	fb02 f303 	mul.w	r3, r2, r3
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <HAL_I2C_Init+0x284>)
 8002924:	fba2 2303 	umull	r2, r3, r2, r3
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	3301      	adds	r3, #1
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	430b      	orrs	r3, r1
 8002932:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800293e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	495c      	ldr	r1, [pc, #368]	; (8002ab8 <HAL_I2C_Init+0x274>)
 8002948:	428b      	cmp	r3, r1
 800294a:	d819      	bhi.n	8002980 <HAL_I2C_Init+0x13c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	1e59      	subs	r1, r3, #1
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fbb1 f3f3 	udiv	r3, r1, r3
 800295a:	1c59      	adds	r1, r3, #1
 800295c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002960:	400b      	ands	r3, r1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_I2C_Init+0x138>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e59      	subs	r1, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fbb1 f3f3 	udiv	r3, r1, r3
 8002974:	3301      	adds	r3, #1
 8002976:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800297a:	e051      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 800297c:	2304      	movs	r3, #4
 800297e:	e04f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d111      	bne.n	80029ac <HAL_I2C_Init+0x168>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	440b      	add	r3, r1
 8002996:	fbb0 f3f3 	udiv	r3, r0, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	e012      	b.n	80029d2 <HAL_I2C_Init+0x18e>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1e58      	subs	r0, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	0099      	lsls	r1, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Init+0x196>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e022      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10e      	bne.n	8002a00 <HAL_I2C_Init+0x1bc>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1e58      	subs	r0, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6859      	ldr	r1, [r3, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	440b      	add	r3, r1
 80029f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029f4:	3301      	adds	r3, #1
 80029f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fe:	e00f      	b.n	8002a20 <HAL_I2C_Init+0x1dc>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1e58      	subs	r0, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	0099      	lsls	r1, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	6809      	ldr	r1, [r1, #0]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6911      	ldr	r1, [r2, #16]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	4311      	orrs	r1, r2
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6812      	ldr	r2, [r2, #0]
 8002a60:	430b      	orrs	r3, r1
 8002a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	000186a0 	.word	0x000186a0
 8002abc:	001e847f 	.word	0x001e847f
 8002ac0:	003d08ff 	.word	0x003d08ff
 8002ac4:	431bde83 	.word	0x431bde83
 8002ac8:	10624dd3 	.word	0x10624dd3

08002acc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	817b      	strh	r3, [r7, #10]
 8002adc:	4613      	mov	r3, r2
 8002ade:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ae0:	f7fe fee6 	bl	80018b0 <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	f040 80e0 	bne.w	8002cb4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	4970      	ldr	r1, [pc, #448]	; (8002cc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002afe:	68f8      	ldr	r0, [r7, #12]
 8002b00:	f000 f964 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0d3      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x50>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d007      	beq.n	8002b42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2221      	movs	r2, #33	; 0x21
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	893a      	ldrh	r2, [r7, #8]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4a50      	ldr	r2, [pc, #320]	; (8002cc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b84:	8979      	ldrh	r1, [r7, #10]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	6a3a      	ldr	r2, [r7, #32]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f89c 	bl	8002cc8 <I2C_MasterRequestWrite>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e08d      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bb0:	e066      	b.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f9de 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d107      	bne.n	8002bda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06b      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	781a      	ldrb	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d11b      	bne.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d017      	beq.n	8002c54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	6a39      	ldr	r1, [r7, #32]
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f9ce 	bl	8002ffa <I2C_WaitOnBTFFlagUntilTimeout>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00d      	beq.n	8002c80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d107      	bne.n	8002c7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e01a      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d194      	bne.n	8002bb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	e000      	b.n	8002cb6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
  }
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	00100002 	.word	0x00100002
 8002cc4:	ffff0000 	.word	0xffff0000

08002cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d006      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d003      	beq.n	8002cf2 <I2C_MasterRequestWrite+0x2a>
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cf0:	d108      	bne.n	8002d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e00b      	b.n	8002d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	2b12      	cmp	r3, #18
 8002d0a:	d107      	bne.n	8002d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f84f 	bl	8002dcc <I2C_WaitOnFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00d      	beq.n	8002d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d42:	d103      	bne.n	8002d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e035      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d58:	d108      	bne.n	8002d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e01b      	b.n	8002da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	11db      	asrs	r3, r3, #7
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0306 	and.w	r3, r3, #6
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f063 030f 	orn	r3, r3, #15
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <I2C_MasterRequestWrite+0xfc>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f875 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e010      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	4907      	ldr	r1, [pc, #28]	; (8002dc8 <I2C_MasterRequestWrite+0x100>)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f865 	bl	8002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	00010008 	.word	0x00010008
 8002dc8:	00010002 	.word	0x00010002

08002dcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ddc:	e025      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d021      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7fe fd63 	bl	80018b0 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d302      	bcc.n	8002dfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2220      	movs	r2, #32
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f043 0220 	orr.w	r2, r3, #32
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e023      	b.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10d      	bne.n	8002e50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	e00c      	b.n	8002e6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	43da      	mvns	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d0b6      	beq.n	8002dde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e88:	e051      	b.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d123      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eb2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f043 0204 	orr.w	r2, r3, #4
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e046      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d021      	beq.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7fe fce1 	bl	80018b0 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d116      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0220 	orr.w	r2, r3, #32
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e020      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	0c1b      	lsrs	r3, r3, #16
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d10c      	bne.n	8002f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4013      	ands	r3, r2
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf14      	ite	ne
 8002f4a:	2301      	movne	r3, #1
 8002f4c:	2300      	moveq	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e00b      	b.n	8002f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf14      	ite	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	2300      	moveq	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d18d      	bne.n	8002e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e02d      	b.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f878 	bl	800307c <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e02d      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d021      	beq.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fc87 	bl	80018b0 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d116      	bne.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e007      	b.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fec:	2b80      	cmp	r3, #128	; 0x80
 8002fee:	d1ca      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b084      	sub	sp, #16
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003006:	e02d      	b.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 f837 	bl	800307c <I2C_IsAcknowledgeFailed>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e02d      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d021      	beq.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003020:	f7fe fc46 	bl	80018b0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d302      	bcc.n	8003036 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	f043 0220 	orr.w	r2, r3, #32
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e007      	b.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b04      	cmp	r3, #4
 8003070:	d1ca      	bne.n	8003008 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003092:	d11b      	bne.n	80030cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e000      	b.n	80030ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e272      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8087 	beq.w	8003206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030f8:	4b92      	ldr	r3, [pc, #584]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b04      	cmp	r3, #4
 8003102:	d00c      	beq.n	800311e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003104:	4b8f      	ldr	r3, [pc, #572]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d112      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
 8003110:	4b8c      	ldr	r3, [pc, #560]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311e:	4b89      	ldr	r3, [pc, #548]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d06c      	beq.n	8003204 <HAL_RCC_OscConfig+0x12c>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d168      	bne.n	8003204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e24c      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d106      	bne.n	800314e <HAL_RCC_OscConfig+0x76>
 8003140:	4b80      	ldr	r3, [pc, #512]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a7f      	ldr	r2, [pc, #508]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	e02e      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a7a      	ldr	r2, [pc, #488]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800315c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b78      	ldr	r3, [pc, #480]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a77      	ldr	r2, [pc, #476]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e01d      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003178:	d10c      	bne.n	8003194 <HAL_RCC_OscConfig+0xbc>
 800317a:	4b72      	ldr	r3, [pc, #456]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a71      	ldr	r2, [pc, #452]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003184:	6013      	str	r3, [r2, #0]
 8003186:	4b6f      	ldr	r3, [pc, #444]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6e      	ldr	r2, [pc, #440]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800318c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003190:	6013      	str	r3, [r2, #0]
 8003192:	e00b      	b.n	80031ac <HAL_RCC_OscConfig+0xd4>
 8003194:	4b6b      	ldr	r3, [pc, #428]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800319a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a67      	ldr	r2, [pc, #412]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d013      	beq.n	80031dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b4:	f7fe fb7c 	bl	80018b0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe fb78 	bl	80018b0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e200      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ce:	4b5d      	ldr	r3, [pc, #372]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0xe4>
 80031da:	e014      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fb68 	bl	80018b0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fb64 	bl	80018b0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	; 0x64
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e1ec      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f6:	4b53      	ldr	r3, [pc, #332]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x10c>
 8003202:	e000      	b.n	8003206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d063      	beq.n	80032da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003212:	4b4c      	ldr	r3, [pc, #304]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800321e:	4b49      	ldr	r3, [pc, #292]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11c      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003236:	4b43      	ldr	r3, [pc, #268]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d001      	beq.n	800324e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e1c0      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324e:	4b3d      	ldr	r3, [pc, #244]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	4939      	ldr	r1, [pc, #228]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003262:	e03a      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326c:	4b36      	ldr	r3, [pc, #216]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fe fb1d 	bl	80018b0 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fb19 	bl	80018b0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e1a1      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800328c:	4b2d      	ldr	r3, [pc, #180]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003298:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4927      	ldr	r1, [pc, #156]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]
 80032ac:	e015      	b.n	80032da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ae:	4b26      	ldr	r3, [pc, #152]	; (8003348 <HAL_RCC_OscConfig+0x270>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fafc 	bl	80018b0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032bc:	f7fe faf8 	bl	80018b0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e180      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	4b1d      	ldr	r3, [pc, #116]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d03a      	beq.n	800335c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d019      	beq.n	8003322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ee:	4b17      	ldr	r3, [pc, #92]	; (800334c <HAL_RCC_OscConfig+0x274>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f4:	f7fe fadc 	bl	80018b0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fc:	f7fe fad8 	bl	80018b0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e160      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330e:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <HAL_RCC_OscConfig+0x26c>)
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800331a:	2001      	movs	r0, #1
 800331c:	f000 fad8 	bl	80038d0 <RCC_Delay>
 8003320:	e01c      	b.n	800335c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <HAL_RCC_OscConfig+0x274>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fac2 	bl	80018b0 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe fabe 	bl	80018b0 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d908      	bls.n	8003350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e146      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	42420000 	.word	0x42420000
 800334c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003350:	4b92      	ldr	r3, [pc, #584]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e9      	bne.n	8003330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 80a6 	beq.w	80034b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800336e:	4b8b      	ldr	r3, [pc, #556]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10d      	bne.n	8003396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b88      	ldr	r3, [pc, #544]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	4a87      	ldr	r2, [pc, #540]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	61d3      	str	r3, [r2, #28]
 8003386:	4b85      	ldr	r3, [pc, #532]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	4b82      	ldr	r3, [pc, #520]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d118      	bne.n	80033d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033a2:	4b7f      	ldr	r3, [pc, #508]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7e      	ldr	r2, [pc, #504]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fa7f 	bl	80018b0 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033b6:	f7fe fa7b 	bl	80018b0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b64      	cmp	r3, #100	; 0x64
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e103      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c8:	4b75      	ldr	r3, [pc, #468]	; (80035a0 <HAL_RCC_OscConfig+0x4c8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d0f0      	beq.n	80033b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <HAL_RCC_OscConfig+0x312>
 80033dc:	4b6f      	ldr	r3, [pc, #444]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4a6e      	ldr	r2, [pc, #440]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	f043 0301 	orr.w	r3, r3, #1
 80033e6:	6213      	str	r3, [r2, #32]
 80033e8:	e02d      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x334>
 80033f2:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	4a69      	ldr	r2, [pc, #420]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	6213      	str	r3, [r2, #32]
 80033fe:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	4a66      	ldr	r2, [pc, #408]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	6213      	str	r3, [r2, #32]
 800340a:	e01c      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	2b05      	cmp	r3, #5
 8003412:	d10c      	bne.n	800342e <HAL_RCC_OscConfig+0x356>
 8003414:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4a60      	ldr	r2, [pc, #384]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800341a:	f043 0304 	orr.w	r3, r3, #4
 800341e:	6213      	str	r3, [r2, #32]
 8003420:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	4a5d      	ldr	r2, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6213      	str	r3, [r2, #32]
 800342c:	e00b      	b.n	8003446 <HAL_RCC_OscConfig+0x36e>
 800342e:	4b5b      	ldr	r3, [pc, #364]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	6213      	str	r3, [r2, #32]
 800343a:	4b58      	ldr	r3, [pc, #352]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4a57      	ldr	r2, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003440:	f023 0304 	bic.w	r3, r3, #4
 8003444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d015      	beq.n	800347a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800344e:	f7fe fa2f 	bl	80018b0 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fa2b 	bl	80018b0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e0b1      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346c:	4b4b      	ldr	r3, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ee      	beq.n	8003456 <HAL_RCC_OscConfig+0x37e>
 8003478:	e014      	b.n	80034a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347a:	f7fe fa19 	bl	80018b0 <HAL_GetTick>
 800347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003480:	e00a      	b.n	8003498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003482:	f7fe fa15 	bl	80018b0 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003490:	4293      	cmp	r3, r2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e09b      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003498:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ee      	bne.n	8003482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d105      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034aa:	4b3c      	ldr	r3, [pc, #240]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034b4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8087 	beq.w	80035ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c0:	4b36      	ldr	r3, [pc, #216]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d061      	beq.n	8003590 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d146      	bne.n	8003562 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe f9e9 	bl	80018b0 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe f9e5 	bl	80018b0 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e06d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034f4:	4b29      	ldr	r3, [pc, #164]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1f0      	bne.n	80034e2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d108      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800350a:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	4921      	ldr	r1, [pc, #132]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003518:	4313      	orrs	r3, r2
 800351a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a19      	ldr	r1, [r3, #32]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	430b      	orrs	r3, r1
 800352e:	491b      	ldr	r1, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003536:	2201      	movs	r2, #1
 8003538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353a:	f7fe f9b9 	bl	80018b0 <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003542:	f7fe f9b5 	bl	80018b0 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e03d      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0f0      	beq.n	8003542 <HAL_RCC_OscConfig+0x46a>
 8003560:	e035      	b.n	80035ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_RCC_OscConfig+0x4cc>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe f9a2 	bl	80018b0 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe f99e 	bl	80018b0 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e026      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_OscConfig+0x4c4>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x498>
 800358e:	e01e      	b.n	80035ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e019      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
 800359c:	40021000 	.word	0x40021000
 80035a0:	40007000 	.word	0x40007000
 80035a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x500>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40021000 	.word	0x40021000

080035dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e0d0      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d910      	bls.n	8003620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b67      	ldr	r3, [pc, #412]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	4965      	ldr	r1, [pc, #404]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b63      	ldr	r3, [pc, #396]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0b8      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d020      	beq.n	800366e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003638:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	4a58      	ldr	r2, [pc, #352]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003642:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0308 	and.w	r3, r3, #8
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003650:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a52      	ldr	r2, [pc, #328]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003656:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800365a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800365c:	4b50      	ldr	r3, [pc, #320]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	494d      	ldr	r1, [pc, #308]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d040      	beq.n	80036fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d107      	bne.n	8003692 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d115      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e07f      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800369a:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e073      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e06b      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f023 0203 	bic.w	r2, r3, #3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	4936      	ldr	r1, [pc, #216]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036cc:	f7fe f8f0 	bl	80018b0 <HAL_GetTick>
 80036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d4:	f7fe f8ec 	bl	80018b0 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e053      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 020c 	and.w	r2, r3, #12
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d1eb      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036fc:	4b27      	ldr	r3, [pc, #156]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	429a      	cmp	r2, r3
 8003708:	d210      	bcs.n	800372c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f023 0207 	bic.w	r2, r3, #7
 8003712:	4922      	ldr	r1, [pc, #136]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	4313      	orrs	r3, r2
 8003718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371a:	4b20      	ldr	r3, [pc, #128]	; (800379c <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e032      	b.n	8003792 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4916      	ldr	r1, [pc, #88]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d009      	beq.n	800376a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003756:	4b12      	ldr	r3, [pc, #72]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	490e      	ldr	r1, [pc, #56]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800376a:	f000 f821 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 800376e:	4602      	mov	r2, r0
 8003770:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	490a      	ldr	r1, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x1c8>)
 800377c:	5ccb      	ldrb	r3, [r1, r3]
 800377e:	fa22 f303 	lsr.w	r3, r2, r3
 8003782:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <HAL_RCC_ClockConfig+0x1d0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe f84e 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40022000 	.word	0x40022000
 80037a0:	40021000 	.word	0x40021000
 80037a4:	080063e4 	.word	0x080063e4
 80037a8:	20000000 	.word	0x20000000
 80037ac:	20000004 	.word	0x20000004

080037b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	b490      	push	{r4, r7}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_GetSysClockFreq+0xac>)
 80037b8:	1d3c      	adds	r4, r7, #4
 80037ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80037c0:	f240 2301 	movw	r3, #513	; 0x201
 80037c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	2300      	movs	r3, #0
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb0>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 030c 	and.w	r3, r3, #12
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x40>
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d003      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0x46>
 80037ee:	e02b      	b.n	8003848 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037f2:	623b      	str	r3, [r7, #32]
      break;
 80037f4:	e02b      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	0c9b      	lsrs	r3, r3, #18
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3328      	adds	r3, #40	; 0x28
 8003800:	443b      	add	r3, r7
 8003802:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003806:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0c5b      	lsrs	r3, r3, #17
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	3328      	adds	r3, #40	; 0x28
 800381e:	443b      	add	r3, r7
 8003820:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003824:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a0e      	ldr	r2, [pc, #56]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb4>)
 800382a:	fb03 f202 	mul.w	r2, r3, r2
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	fbb2 f3f3 	udiv	r3, r2, r3
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
 8003836:	e004      	b.n	8003842 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	4a0b      	ldr	r2, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	623b      	str	r3, [r7, #32]
      break;
 8003846:	e002      	b.n	800384e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb4>)
 800384a:	623b      	str	r3, [r7, #32]
      break;
 800384c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800384e:	6a3b      	ldr	r3, [r7, #32]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3728      	adds	r7, #40	; 0x28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc90      	pop	{r4, r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	080063c4 	.word	0x080063c4
 8003860:	40021000 	.word	0x40021000
 8003864:	007a1200 	.word	0x007a1200
 8003868:	003d0900 	.word	0x003d0900

0800386c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003870:	4b02      	ldr	r3, [pc, #8]	; (800387c <HAL_RCC_GetHCLKFreq+0x10>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	20000000 	.word	0x20000000

08003880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003884:	f7ff fff2 	bl	800386c <HAL_RCC_GetHCLKFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	4903      	ldr	r1, [pc, #12]	; (80038a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003896:	5ccb      	ldrb	r3, [r1, r3]
 8003898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800389c:	4618      	mov	r0, r3
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	080063f4 	.word	0x080063f4

080038a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038ac:	f7ff ffde 	bl	800386c <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0adb      	lsrs	r3, r3, #11
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4903      	ldr	r1, [pc, #12]	; (80038cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	080063f4 	.word	0x080063f4

080038d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <RCC_Delay+0x34>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <RCC_Delay+0x38>)
 80038de:	fba2 2303 	umull	r2, r3, r2, r3
 80038e2:	0a5b      	lsrs	r3, r3, #9
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038ec:	bf00      	nop
  }
  while (Delay --);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1e5a      	subs	r2, r3, #1
 80038f2:	60fa      	str	r2, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f9      	bne.n	80038ec <RCC_Delay+0x1c>
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3714      	adds	r7, #20
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr
 8003904:	20000000 	.word	0x20000000
 8003908:	10624dd3 	.word	0x10624dd3

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	613b      	str	r3, [r7, #16]
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d07d      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003928:	2300      	movs	r3, #0
 800392a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003938:	4b4c      	ldr	r3, [pc, #304]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	4a4b      	ldr	r2, [pc, #300]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003942:	61d3      	str	r3, [r2, #28]
 8003944:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b46      	ldr	r3, [pc, #280]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d118      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003960:	4b43      	ldr	r3, [pc, #268]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396c:	f7fd ffa0 	bl	80018b0 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	e008      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003974:	f7fd ff9c 	bl	80018b0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e06d      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b3a      	ldr	r3, [pc, #232]	; (8003a70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0f0      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003992:	4b36      	ldr	r3, [pc, #216]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d02e      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d027      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039b0:	4b2e      	ldr	r3, [pc, #184]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039ba:	4b2e      	ldr	r3, [pc, #184]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039c0:	4b2c      	ldr	r3, [pc, #176]	; (8003a74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80039c6:	4a29      	ldr	r2, [pc, #164]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d014      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d6:	f7fd ff6b 	bl	80018b0 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039dc:	e00a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039de:	f7fd ff67 	bl	80018b0 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e036      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f4:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0ee      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a00:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	4917      	ldr	r1, [pc, #92]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a13      	ldr	r2, [pc, #76]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	490b      	ldr	r1, [pc, #44]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	4904      	ldr	r1, [pc, #16]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40007000 	.word	0x40007000
 8003a74:	42420440 	.word	0x42420440

08003a78 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a78:	b590      	push	{r4, r7, lr}
 8003a7a:	b08d      	sub	sp, #52	; 0x34
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a80:	4b58      	ldr	r3, [pc, #352]	; (8003be4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003a82:	f107 040c 	add.w	r4, r7, #12
 8003a86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a8c:	f240 2301 	movw	r3, #513	; 0x201
 8003a90:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	2300      	movs	r3, #0
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	f200 808e 	bhi.w	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d049      	beq.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d079      	beq.n	8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003ac0:	e086      	b.n	8003bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003ac2:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ac8:	4b47      	ldr	r3, [pc, #284]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d07f      	beq.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	0c9b      	lsrs	r3, r3, #18
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	3330      	adds	r3, #48	; 0x30
 8003ade:	443b      	add	r3, r7
 8003ae0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ae4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003af0:	4b3d      	ldr	r3, [pc, #244]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0c5b      	lsrs	r3, r3, #17
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	3330      	adds	r3, #48	; 0x30
 8003afc:	443b      	add	r3, r7
 8003afe:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003b0e:	4a37      	ldr	r2, [pc, #220]	; (8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b16:	6a3b      	ldr	r3, [r7, #32]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003b24:	fb02 f303 	mul.w	r3, r2, r3
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003b2a:	4b2f      	ldr	r3, [pc, #188]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b36:	d102      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b3c:	e04a      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	085b      	lsrs	r3, r3, #1
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b4c:	e042      	b.n	8003bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5e:	d108      	bne.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b70:	e01f      	b.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003b8a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b90:	e00f      	b.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d016      	beq.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003baa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bb0:	e012      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003bb2:	e011      	b.n	8003bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003bb4:	f7ff fe78 	bl	80038a8 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0b9b      	lsrs	r3, r3, #14
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003bce:	e004      	b.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003bd0:	bf00      	nop
 8003bd2:	e002      	b.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003bd8:	bf00      	nop
    }
  }
  return (frequency);
 8003bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3734      	adds	r7, #52	; 0x34
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}
 8003be4:	080063d4 	.word	0x080063d4
 8003be8:	40021000 	.word	0x40021000
 8003bec:	007a1200 	.word	0x007a1200
 8003bf0:	003d0900 	.word	0x003d0900
 8003bf4:	aaaaaaab 	.word	0xaaaaaaab

08003bf8 <gcvt>:
 8003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	4615      	mov	r5, r2
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2200      	movs	r2, #0
 8003c02:	b085      	sub	sp, #20
 8003c04:	4606      	mov	r6, r0
 8003c06:	460f      	mov	r7, r1
 8003c08:	f7fc fed0 	bl	80009ac <__aeabi_dcmplt>
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	b118      	cbz	r0, 8003c18 <gcvt+0x20>
 8003c10:	222d      	movs	r2, #45	; 0x2d
 8003c12:	3d01      	subs	r5, #1
 8003c14:	f803 2b01 	strb.w	r2, [r3], #1
 8003c18:	2267      	movs	r2, #103	; 0x67
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	e9cd 5300 	strd	r5, r3, [sp]
 8003c20:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003c24:	4905      	ldr	r1, [pc, #20]	; (8003c3c <gcvt+0x44>)
 8003c26:	4632      	mov	r2, r6
 8003c28:	463b      	mov	r3, r7
 8003c2a:	6808      	ldr	r0, [r1, #0]
 8003c2c:	f000 f8b4 	bl	8003d98 <_gcvt>
 8003c30:	2800      	cmp	r0, #0
 8003c32:	bf14      	ite	ne
 8003c34:	4620      	movne	r0, r4
 8003c36:	2000      	moveq	r0, #0
 8003c38:	b005      	add	sp, #20
 8003c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c3c:	2000000c 	.word	0x2000000c

08003c40 <__errno>:
 8003c40:	4b01      	ldr	r3, [pc, #4]	; (8003c48 <__errno+0x8>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	2000000c 	.word	0x2000000c

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	2600      	movs	r6, #0
 8003c50:	4d0c      	ldr	r5, [pc, #48]	; (8003c84 <__libc_init_array+0x38>)
 8003c52:	4c0d      	ldr	r4, [pc, #52]	; (8003c88 <__libc_init_array+0x3c>)
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	42a6      	cmp	r6, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	f002 fb9e 	bl	800639c <_init>
 8003c60:	2600      	movs	r6, #0
 8003c62:	4d0a      	ldr	r5, [pc, #40]	; (8003c8c <__libc_init_array+0x40>)
 8003c64:	4c0a      	ldr	r4, [pc, #40]	; (8003c90 <__libc_init_array+0x44>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	42a6      	cmp	r6, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c74:	4798      	blx	r3
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c7e:	4798      	blx	r3
 8003c80:	3601      	adds	r6, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	080066c0 	.word	0x080066c0
 8003c88:	080066c0 	.word	0x080066c0
 8003c8c:	080066c0 	.word	0x080066c0
 8003c90:	080066c4 	.word	0x080066c4

08003c94 <memset>:
 8003c94:	4603      	mov	r3, r0
 8003c96:	4402      	add	r2, r0
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d100      	bne.n	8003c9e <memset+0xa>
 8003c9c:	4770      	bx	lr
 8003c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca2:	e7f9      	b.n	8003c98 <memset+0x4>

08003ca4 <print_e>:
 8003ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca6:	b08b      	sub	sp, #44	; 0x2c
 8003ca8:	460d      	mov	r5, r1
 8003caa:	a908      	add	r1, sp, #32
 8003cac:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8003cae:	9104      	str	r1, [sp, #16]
 8003cb0:	a907      	add	r1, sp, #28
 8003cb2:	9103      	str	r1, [sp, #12]
 8003cb4:	a909      	add	r1, sp, #36	; 0x24
 8003cb6:	9102      	str	r1, [sp, #8]
 8003cb8:	1c71      	adds	r1, r6, #1
 8003cba:	9101      	str	r1, [sp, #4]
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	9100      	str	r1, [sp, #0]
 8003cc0:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8003cc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003cc6:	f000 fe2f 	bl	8004928 <_dtoa_r>
 8003cca:	f242 730f 	movw	r3, #9999	; 0x270f
 8003cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cd0:	4601      	mov	r1, r0
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d104      	bne.n	8003ce0 <print_e+0x3c>
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f000 fd74 	bl	80047c4 <strcpy>
 8003cdc:	b00b      	add	sp, #44	; 0x2c
 8003cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce0:	462b      	mov	r3, r5
 8003ce2:	7800      	ldrb	r0, [r0, #0]
 8003ce4:	2e00      	cmp	r6, #0
 8003ce6:	f803 0b01 	strb.w	r0, [r3], #1
 8003cea:	bfc8      	it	gt
 8003cec:	2401      	movgt	r4, #1
 8003cee:	202e      	movs	r0, #46	; 0x2e
 8003cf0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8003cf4:	b10d      	cbz	r5, 8003cfa <print_e+0x56>
 8003cf6:	2e00      	cmp	r6, #0
 8003cf8:	dc37      	bgt.n	8003d6a <print_e+0xc6>
 8003cfa:	2f67      	cmp	r7, #103	; 0x67
 8003cfc:	d046      	beq.n	8003d8c <print_e+0xe8>
 8003cfe:	2f47      	cmp	r7, #71	; 0x47
 8003d00:	d046      	beq.n	8003d90 <print_e+0xec>
 8003d02:	212e      	movs	r1, #46	; 0x2e
 8003d04:	2030      	movs	r0, #48	; 0x30
 8003d06:	2e00      	cmp	r6, #0
 8003d08:	dc38      	bgt.n	8003d7c <print_e+0xd8>
 8003d0a:	1e51      	subs	r1, r2, #1
 8003d0c:	2900      	cmp	r1, #0
 8003d0e:	bfa8      	it	ge
 8003d10:	222b      	movge	r2, #43	; 0x2b
 8003d12:	4618      	mov	r0, r3
 8003d14:	9109      	str	r1, [sp, #36]	; 0x24
 8003d16:	bfbe      	ittt	lt
 8003d18:	212d      	movlt	r1, #45	; 0x2d
 8003d1a:	f1c2 0201 	rsblt	r2, r2, #1
 8003d1e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8003d20:	f800 7b02 	strb.w	r7, [r0], #2
 8003d24:	bfa8      	it	ge
 8003d26:	705a      	strbge	r2, [r3, #1]
 8003d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d2a:	bfb8      	it	lt
 8003d2c:	7059      	strblt	r1, [r3, #1]
 8003d2e:	2a63      	cmp	r2, #99	; 0x63
 8003d30:	dd0b      	ble.n	8003d4a <print_e+0xa6>
 8003d32:	2164      	movs	r1, #100	; 0x64
 8003d34:	fb92 f1f1 	sdiv	r1, r2, r1
 8003d38:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8003d3c:	1cd8      	adds	r0, r3, #3
 8003d3e:	709c      	strb	r4, [r3, #2]
 8003d40:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003d44:	fb03 2201 	mla	r2, r3, r1, r2
 8003d48:	9209      	str	r2, [sp, #36]	; 0x24
 8003d4a:	220a      	movs	r2, #10
 8003d4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d4e:	fb93 f2f2 	sdiv	r2, r3, r2
 8003d52:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8003d56:	7001      	strb	r1, [r0, #0]
 8003d58:	f06f 0109 	mvn.w	r1, #9
 8003d5c:	fb01 3302 	mla	r3, r1, r2, r3
 8003d60:	3330      	adds	r3, #48	; 0x30
 8003d62:	7043      	strb	r3, [r0, #1]
 8003d64:	2300      	movs	r3, #0
 8003d66:	7083      	strb	r3, [r0, #2]
 8003d68:	e7b8      	b.n	8003cdc <print_e+0x38>
 8003d6a:	b10c      	cbz	r4, 8003d70 <print_e+0xcc>
 8003d6c:	f803 0b01 	strb.w	r0, [r3], #1
 8003d70:	780c      	ldrb	r4, [r1, #0]
 8003d72:	3e01      	subs	r6, #1
 8003d74:	f803 4b01 	strb.w	r4, [r3], #1
 8003d78:	2400      	movs	r4, #0
 8003d7a:	e7b9      	b.n	8003cf0 <print_e+0x4c>
 8003d7c:	b10c      	cbz	r4, 8003d82 <print_e+0xde>
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	2400      	movs	r4, #0
 8003d84:	f803 0b01 	strb.w	r0, [r3], #1
 8003d88:	3e01      	subs	r6, #1
 8003d8a:	e7bc      	b.n	8003d06 <print_e+0x62>
 8003d8c:	2765      	movs	r7, #101	; 0x65
 8003d8e:	e7bc      	b.n	8003d0a <print_e+0x66>
 8003d90:	2745      	movs	r7, #69	; 0x45
 8003d92:	e7ba      	b.n	8003d0a <print_e+0x66>
 8003d94:	0000      	movs	r0, r0
	...

08003d98 <_gcvt>:
 8003d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d9c:	4690      	mov	r8, r2
 8003d9e:	461c      	mov	r4, r3
 8003da0:	b08b      	sub	sp, #44	; 0x2c
 8003da2:	4681      	mov	r9, r0
 8003da4:	e9dd 7512 	ldrd	r7, r5, [sp, #72]	; 0x48
 8003da8:	2200      	movs	r2, #0
 8003daa:	2300      	movs	r3, #0
 8003dac:	4640      	mov	r0, r8
 8003dae:	4621      	mov	r1, r4
 8003db0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8003db2:	f7fc fdfb 	bl	80009ac <__aeabi_dcmplt>
 8003db6:	b108      	cbz	r0, 8003dbc <_gcvt+0x24>
 8003db8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	f7fc fde8 	bl	8000998 <__aeabi_dcmpeq>
 8003dc8:	b138      	cbz	r0, 8003dda <_gcvt+0x42>
 8003dca:	2330      	movs	r3, #48	; 0x30
 8003dcc:	702b      	strb	r3, [r5, #0]
 8003dce:	2300      	movs	r3, #0
 8003dd0:	706b      	strb	r3, [r5, #1]
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	b00b      	add	sp, #44	; 0x2c
 8003dd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003dda:	4640      	mov	r0, r8
 8003ddc:	a34c      	add	r3, pc, #304	; (adr r3, 8003f10 <_gcvt+0x178>)
 8003dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de2:	4621      	mov	r1, r4
 8003de4:	f7fc fdec 	bl	80009c0 <__aeabi_dcmple>
 8003de8:	b160      	cbz	r0, 8003e04 <_gcvt+0x6c>
 8003dea:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8003dee:	3f01      	subs	r7, #1
 8003df0:	9301      	str	r3, [sp, #4]
 8003df2:	4642      	mov	r2, r8
 8003df4:	4623      	mov	r3, r4
 8003df6:	4629      	mov	r1, r5
 8003df8:	4648      	mov	r0, r9
 8003dfa:	9602      	str	r6, [sp, #8]
 8003dfc:	9700      	str	r7, [sp, #0]
 8003dfe:	f7ff ff51 	bl	8003ca4 <print_e>
 8003e02:	e7e6      	b.n	8003dd2 <_gcvt+0x3a>
 8003e04:	4638      	mov	r0, r7
 8003e06:	f000 fc09 	bl	800461c <_mprec_log10>
 8003e0a:	4642      	mov	r2, r8
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	f7fc fdd7 	bl	80009c0 <__aeabi_dcmple>
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d1e9      	bne.n	8003dea <_gcvt+0x52>
 8003e16:	ab09      	add	r3, sp, #36	; 0x24
 8003e18:	9304      	str	r3, [sp, #16]
 8003e1a:	ab08      	add	r3, sp, #32
 8003e1c:	9303      	str	r3, [sp, #12]
 8003e1e:	ab07      	add	r3, sp, #28
 8003e20:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003e24:	2302      	movs	r3, #2
 8003e26:	4642      	mov	r2, r8
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4648      	mov	r0, r9
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	f000 fd7b 	bl	8004928 <_dtoa_r>
 8003e32:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e36:	9a07      	ldr	r2, [sp, #28]
 8003e38:	4601      	mov	r1, r0
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d00f      	beq.n	8003e5e <_gcvt+0xc6>
 8003e3e:	462b      	mov	r3, r5
 8003e40:	442f      	add	r7, r5
 8003e42:	4608      	mov	r0, r1
 8003e44:	f811 cb01 	ldrb.w	ip, [r1], #1
 8003e48:	9a07      	ldr	r2, [sp, #28]
 8003e4a:	1afc      	subs	r4, r7, r3
 8003e4c:	f1bc 0f00 	cmp.w	ip, #0
 8003e50:	d001      	beq.n	8003e56 <_gcvt+0xbe>
 8003e52:	2a00      	cmp	r2, #0
 8003e54:	dc07      	bgt.n	8003e66 <_gcvt+0xce>
 8003e56:	2100      	movs	r1, #0
 8003e58:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8003e5c:	e00c      	b.n	8003e78 <_gcvt+0xe0>
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f000 fcb0 	bl	80047c4 <strcpy>
 8003e64:	e7b5      	b.n	8003dd2 <_gcvt+0x3a>
 8003e66:	3a01      	subs	r2, #1
 8003e68:	f803 cb01 	strb.w	ip, [r3], #1
 8003e6c:	9207      	str	r2, [sp, #28]
 8003e6e:	e7e8      	b.n	8003e42 <_gcvt+0xaa>
 8003e70:	2101      	movs	r1, #1
 8003e72:	f803 cb01 	strb.w	ip, [r3], #1
 8003e76:	3c01      	subs	r4, #1
 8003e78:	2a00      	cmp	r2, #0
 8003e7a:	4617      	mov	r7, r2
 8003e7c:	dc2a      	bgt.n	8003ed4 <_gcvt+0x13c>
 8003e7e:	b101      	cbz	r1, 8003e82 <_gcvt+0xea>
 8003e80:	9207      	str	r2, [sp, #28]
 8003e82:	b90e      	cbnz	r6, 8003e88 <_gcvt+0xf0>
 8003e84:	7802      	ldrb	r2, [r0, #0]
 8003e86:	b312      	cbz	r2, 8003ece <_gcvt+0x136>
 8003e88:	42ab      	cmp	r3, r5
 8003e8a:	bf04      	itt	eq
 8003e8c:	2230      	moveq	r2, #48	; 0x30
 8003e8e:	f803 2b01 	strbeq.w	r2, [r3], #1
 8003e92:	222e      	movs	r2, #46	; 0x2e
 8003e94:	4619      	mov	r1, r3
 8003e96:	2700      	movs	r7, #0
 8003e98:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	9a07      	ldr	r2, [sp, #28]
 8003ea0:	eba2 0c03 	sub.w	ip, r2, r3
 8003ea4:	eb1c 0f01 	cmn.w	ip, r1
 8003ea8:	d41c      	bmi.n	8003ee4 <_gcvt+0x14c>
 8003eaa:	2a00      	cmp	r2, #0
 8003eac:	f1c2 0100 	rsb	r1, r2, #0
 8003eb0:	bfc8      	it	gt
 8003eb2:	2100      	movgt	r1, #0
 8003eb4:	f101 0c01 	add.w	ip, r1, #1
 8003eb8:	4463      	add	r3, ip
 8003eba:	440a      	add	r2, r1
 8003ebc:	b107      	cbz	r7, 8003ec0 <_gcvt+0x128>
 8003ebe:	9207      	str	r2, [sp, #28]
 8003ec0:	1e42      	subs	r2, r0, #1
 8003ec2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8003ec6:	b109      	cbz	r1, 8003ecc <_gcvt+0x134>
 8003ec8:	2c00      	cmp	r4, #0
 8003eca:	dc0f      	bgt.n	8003eec <_gcvt+0x154>
 8003ecc:	b9de      	cbnz	r6, 8003f06 <_gcvt+0x16e>
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e77e      	b.n	8003dd2 <_gcvt+0x3a>
 8003ed4:	2c00      	cmp	r4, #0
 8003ed6:	f102 32ff 	add.w	r2, r2, #4294967295
 8003eda:	dcc9      	bgt.n	8003e70 <_gcvt+0xd8>
 8003edc:	2900      	cmp	r1, #0
 8003ede:	d0d0      	beq.n	8003e82 <_gcvt+0xea>
 8003ee0:	9707      	str	r7, [sp, #28]
 8003ee2:	e7ce      	b.n	8003e82 <_gcvt+0xea>
 8003ee4:	2701      	movs	r7, #1
 8003ee6:	f801 ef01 	strb.w	lr, [r1, #1]!
 8003eea:	e7db      	b.n	8003ea4 <_gcvt+0x10c>
 8003eec:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef0:	3c01      	subs	r4, #1
 8003ef2:	e7e6      	b.n	8003ec2 <_gcvt+0x12a>
 8003ef4:	f802 6b01 	strb.w	r6, [r2], #1
 8003ef8:	1a81      	subs	r1, r0, r2
 8003efa:	2900      	cmp	r1, #0
 8003efc:	dcfa      	bgt.n	8003ef4 <_gcvt+0x15c>
 8003efe:	2c00      	cmp	r4, #0
 8003f00:	bfa8      	it	ge
 8003f02:	191b      	addge	r3, r3, r4
 8003f04:	e7e3      	b.n	8003ece <_gcvt+0x136>
 8003f06:	461a      	mov	r2, r3
 8003f08:	2630      	movs	r6, #48	; 0x30
 8003f0a:	1918      	adds	r0, r3, r4
 8003f0c:	e7f4      	b.n	8003ef8 <_gcvt+0x160>
 8003f0e:	bf00      	nop
 8003f10:	eb1c432d 	.word	0xeb1c432d
 8003f14:	3f1a36e2 	.word	0x3f1a36e2

08003f18 <_Balloc>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	460d      	mov	r5, r1
 8003f20:	b976      	cbnz	r6, 8003f40 <_Balloc+0x28>
 8003f22:	2010      	movs	r0, #16
 8003f24:	f001 fb00 	bl	8005528 <malloc>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6260      	str	r0, [r4, #36]	; 0x24
 8003f2c:	b920      	cbnz	r0, 8003f38 <_Balloc+0x20>
 8003f2e:	2166      	movs	r1, #102	; 0x66
 8003f30:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <_Balloc+0x78>)
 8003f32:	4818      	ldr	r0, [pc, #96]	; (8003f94 <_Balloc+0x7c>)
 8003f34:	f000 fc4e 	bl	80047d4 <__assert_func>
 8003f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003f3c:	6006      	str	r6, [r0, #0]
 8003f3e:	60c6      	str	r6, [r0, #12]
 8003f40:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f42:	68f3      	ldr	r3, [r6, #12]
 8003f44:	b183      	cbz	r3, 8003f68 <_Balloc+0x50>
 8003f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003f4e:	b9b8      	cbnz	r0, 8003f80 <_Balloc+0x68>
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f605 	lsl.w	r6, r1, r5
 8003f56:	1d72      	adds	r2, r6, #5
 8003f58:	4620      	mov	r0, r4
 8003f5a:	0092      	lsls	r2, r2, #2
 8003f5c:	f000 fb7a 	bl	8004654 <_calloc_r>
 8003f60:	b160      	cbz	r0, 8003f7c <_Balloc+0x64>
 8003f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003f66:	e00e      	b.n	8003f86 <_Balloc+0x6e>
 8003f68:	2221      	movs	r2, #33	; 0x21
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 fb71 	bl	8004654 <_calloc_r>
 8003f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f74:	60f0      	str	r0, [r6, #12]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e4      	bne.n	8003f46 <_Balloc+0x2e>
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	6802      	ldr	r2, [r0, #0]
 8003f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003f86:	2300      	movs	r3, #0
 8003f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f8c:	e7f7      	b.n	8003f7e <_Balloc+0x66>
 8003f8e:	bf00      	nop
 8003f90:	08006400 	.word	0x08006400
 8003f94:	08006417 	.word	0x08006417

08003f98 <_Bfree>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003f9c:	4605      	mov	r5, r0
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	b976      	cbnz	r6, 8003fc0 <_Bfree+0x28>
 8003fa2:	2010      	movs	r0, #16
 8003fa4:	f001 fac0 	bl	8005528 <malloc>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	6268      	str	r0, [r5, #36]	; 0x24
 8003fac:	b920      	cbnz	r0, 8003fb8 <_Bfree+0x20>
 8003fae:	218a      	movs	r1, #138	; 0x8a
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <_Bfree+0x3c>)
 8003fb2:	4809      	ldr	r0, [pc, #36]	; (8003fd8 <_Bfree+0x40>)
 8003fb4:	f000 fc0e 	bl	80047d4 <__assert_func>
 8003fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003fbc:	6006      	str	r6, [r0, #0]
 8003fbe:	60c6      	str	r6, [r0, #12]
 8003fc0:	b13c      	cbz	r4, 8003fd2 <_Bfree+0x3a>
 8003fc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003fc4:	6862      	ldr	r2, [r4, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003fcc:	6021      	str	r1, [r4, #0]
 8003fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003fd2:	bd70      	pop	{r4, r5, r6, pc}
 8003fd4:	08006400 	.word	0x08006400
 8003fd8:	08006417 	.word	0x08006417

08003fdc <__multadd>:
 8003fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe0:	4607      	mov	r7, r0
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	461e      	mov	r6, r3
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	690d      	ldr	r5, [r1, #16]
 8003fea:	f101 0c14 	add.w	ip, r1, #20
 8003fee:	f8dc 3000 	ldr.w	r3, [ip]
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	b299      	uxth	r1, r3
 8003ff6:	fb02 6101 	mla	r1, r2, r1, r6
 8003ffa:	0c1e      	lsrs	r6, r3, #16
 8003ffc:	0c0b      	lsrs	r3, r1, #16
 8003ffe:	fb02 3306 	mla	r3, r2, r6, r3
 8004002:	b289      	uxth	r1, r1
 8004004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004008:	4285      	cmp	r5, r0
 800400a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800400e:	f84c 1b04 	str.w	r1, [ip], #4
 8004012:	dcec      	bgt.n	8003fee <__multadd+0x12>
 8004014:	b30e      	cbz	r6, 800405a <__multadd+0x7e>
 8004016:	68a3      	ldr	r3, [r4, #8]
 8004018:	42ab      	cmp	r3, r5
 800401a:	dc19      	bgt.n	8004050 <__multadd+0x74>
 800401c:	6861      	ldr	r1, [r4, #4]
 800401e:	4638      	mov	r0, r7
 8004020:	3101      	adds	r1, #1
 8004022:	f7ff ff79 	bl	8003f18 <_Balloc>
 8004026:	4680      	mov	r8, r0
 8004028:	b928      	cbnz	r0, 8004036 <__multadd+0x5a>
 800402a:	4602      	mov	r2, r0
 800402c:	21b5      	movs	r1, #181	; 0xb5
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <__multadd+0x84>)
 8004030:	480c      	ldr	r0, [pc, #48]	; (8004064 <__multadd+0x88>)
 8004032:	f000 fbcf 	bl	80047d4 <__assert_func>
 8004036:	6922      	ldr	r2, [r4, #16]
 8004038:	f104 010c 	add.w	r1, r4, #12
 800403c:	3202      	adds	r2, #2
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	300c      	adds	r0, #12
 8004042:	f001 fa79 	bl	8005538 <memcpy>
 8004046:	4621      	mov	r1, r4
 8004048:	4638      	mov	r0, r7
 800404a:	f7ff ffa5 	bl	8003f98 <_Bfree>
 800404e:	4644      	mov	r4, r8
 8004050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004054:	3501      	adds	r5, #1
 8004056:	615e      	str	r6, [r3, #20]
 8004058:	6125      	str	r5, [r4, #16]
 800405a:	4620      	mov	r0, r4
 800405c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004060:	08006473 	.word	0x08006473
 8004064:	08006417 	.word	0x08006417

08004068 <__hi0bits>:
 8004068:	0c02      	lsrs	r2, r0, #16
 800406a:	0412      	lsls	r2, r2, #16
 800406c:	4603      	mov	r3, r0
 800406e:	b9ca      	cbnz	r2, 80040a4 <__hi0bits+0x3c>
 8004070:	0403      	lsls	r3, r0, #16
 8004072:	2010      	movs	r0, #16
 8004074:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004078:	bf04      	itt	eq
 800407a:	021b      	lsleq	r3, r3, #8
 800407c:	3008      	addeq	r0, #8
 800407e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004082:	bf04      	itt	eq
 8004084:	011b      	lsleq	r3, r3, #4
 8004086:	3004      	addeq	r0, #4
 8004088:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800408c:	bf04      	itt	eq
 800408e:	009b      	lsleq	r3, r3, #2
 8004090:	3002      	addeq	r0, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	db05      	blt.n	80040a2 <__hi0bits+0x3a>
 8004096:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800409a:	f100 0001 	add.w	r0, r0, #1
 800409e:	bf08      	it	eq
 80040a0:	2020      	moveq	r0, #32
 80040a2:	4770      	bx	lr
 80040a4:	2000      	movs	r0, #0
 80040a6:	e7e5      	b.n	8004074 <__hi0bits+0xc>

080040a8 <__lo0bits>:
 80040a8:	6803      	ldr	r3, [r0, #0]
 80040aa:	4602      	mov	r2, r0
 80040ac:	f013 0007 	ands.w	r0, r3, #7
 80040b0:	d00b      	beq.n	80040ca <__lo0bits+0x22>
 80040b2:	07d9      	lsls	r1, r3, #31
 80040b4:	d421      	bmi.n	80040fa <__lo0bits+0x52>
 80040b6:	0798      	lsls	r0, r3, #30
 80040b8:	bf49      	itett	mi
 80040ba:	085b      	lsrmi	r3, r3, #1
 80040bc:	089b      	lsrpl	r3, r3, #2
 80040be:	2001      	movmi	r0, #1
 80040c0:	6013      	strmi	r3, [r2, #0]
 80040c2:	bf5c      	itt	pl
 80040c4:	2002      	movpl	r0, #2
 80040c6:	6013      	strpl	r3, [r2, #0]
 80040c8:	4770      	bx	lr
 80040ca:	b299      	uxth	r1, r3
 80040cc:	b909      	cbnz	r1, 80040d2 <__lo0bits+0x2a>
 80040ce:	2010      	movs	r0, #16
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	b2d9      	uxtb	r1, r3
 80040d4:	b909      	cbnz	r1, 80040da <__lo0bits+0x32>
 80040d6:	3008      	adds	r0, #8
 80040d8:	0a1b      	lsrs	r3, r3, #8
 80040da:	0719      	lsls	r1, r3, #28
 80040dc:	bf04      	itt	eq
 80040de:	091b      	lsreq	r3, r3, #4
 80040e0:	3004      	addeq	r0, #4
 80040e2:	0799      	lsls	r1, r3, #30
 80040e4:	bf04      	itt	eq
 80040e6:	089b      	lsreq	r3, r3, #2
 80040e8:	3002      	addeq	r0, #2
 80040ea:	07d9      	lsls	r1, r3, #31
 80040ec:	d403      	bmi.n	80040f6 <__lo0bits+0x4e>
 80040ee:	085b      	lsrs	r3, r3, #1
 80040f0:	f100 0001 	add.w	r0, r0, #1
 80040f4:	d003      	beq.n	80040fe <__lo0bits+0x56>
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	4770      	bx	lr
 80040fa:	2000      	movs	r0, #0
 80040fc:	4770      	bx	lr
 80040fe:	2020      	movs	r0, #32
 8004100:	4770      	bx	lr
	...

08004104 <__i2b>:
 8004104:	b510      	push	{r4, lr}
 8004106:	460c      	mov	r4, r1
 8004108:	2101      	movs	r1, #1
 800410a:	f7ff ff05 	bl	8003f18 <_Balloc>
 800410e:	4602      	mov	r2, r0
 8004110:	b928      	cbnz	r0, 800411e <__i2b+0x1a>
 8004112:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__i2b+0x24>)
 8004118:	4804      	ldr	r0, [pc, #16]	; (800412c <__i2b+0x28>)
 800411a:	f000 fb5b 	bl	80047d4 <__assert_func>
 800411e:	2301      	movs	r3, #1
 8004120:	6144      	str	r4, [r0, #20]
 8004122:	6103      	str	r3, [r0, #16]
 8004124:	bd10      	pop	{r4, pc}
 8004126:	bf00      	nop
 8004128:	08006473 	.word	0x08006473
 800412c:	08006417 	.word	0x08006417

08004130 <__multiply>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	4691      	mov	r9, r2
 8004136:	690a      	ldr	r2, [r1, #16]
 8004138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800413c:	460c      	mov	r4, r1
 800413e:	429a      	cmp	r2, r3
 8004140:	bfbe      	ittt	lt
 8004142:	460b      	movlt	r3, r1
 8004144:	464c      	movlt	r4, r9
 8004146:	4699      	movlt	r9, r3
 8004148:	6927      	ldr	r7, [r4, #16]
 800414a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800414e:	68a3      	ldr	r3, [r4, #8]
 8004150:	6861      	ldr	r1, [r4, #4]
 8004152:	eb07 060a 	add.w	r6, r7, sl
 8004156:	42b3      	cmp	r3, r6
 8004158:	b085      	sub	sp, #20
 800415a:	bfb8      	it	lt
 800415c:	3101      	addlt	r1, #1
 800415e:	f7ff fedb 	bl	8003f18 <_Balloc>
 8004162:	b930      	cbnz	r0, 8004172 <__multiply+0x42>
 8004164:	4602      	mov	r2, r0
 8004166:	f240 115d 	movw	r1, #349	; 0x15d
 800416a:	4b43      	ldr	r3, [pc, #268]	; (8004278 <__multiply+0x148>)
 800416c:	4843      	ldr	r0, [pc, #268]	; (800427c <__multiply+0x14c>)
 800416e:	f000 fb31 	bl	80047d4 <__assert_func>
 8004172:	f100 0514 	add.w	r5, r0, #20
 8004176:	462b      	mov	r3, r5
 8004178:	2200      	movs	r2, #0
 800417a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800417e:	4543      	cmp	r3, r8
 8004180:	d321      	bcc.n	80041c6 <__multiply+0x96>
 8004182:	f104 0314 	add.w	r3, r4, #20
 8004186:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800418a:	f109 0314 	add.w	r3, r9, #20
 800418e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004192:	9202      	str	r2, [sp, #8]
 8004194:	1b3a      	subs	r2, r7, r4
 8004196:	3a15      	subs	r2, #21
 8004198:	f022 0203 	bic.w	r2, r2, #3
 800419c:	3204      	adds	r2, #4
 800419e:	f104 0115 	add.w	r1, r4, #21
 80041a2:	428f      	cmp	r7, r1
 80041a4:	bf38      	it	cc
 80041a6:	2204      	movcc	r2, #4
 80041a8:	9201      	str	r2, [sp, #4]
 80041aa:	9a02      	ldr	r2, [sp, #8]
 80041ac:	9303      	str	r3, [sp, #12]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d80c      	bhi.n	80041cc <__multiply+0x9c>
 80041b2:	2e00      	cmp	r6, #0
 80041b4:	dd03      	ble.n	80041be <__multiply+0x8e>
 80041b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d059      	beq.n	8004272 <__multiply+0x142>
 80041be:	6106      	str	r6, [r0, #16]
 80041c0:	b005      	add	sp, #20
 80041c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c6:	f843 2b04 	str.w	r2, [r3], #4
 80041ca:	e7d8      	b.n	800417e <__multiply+0x4e>
 80041cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80041d0:	f1ba 0f00 	cmp.w	sl, #0
 80041d4:	d023      	beq.n	800421e <__multiply+0xee>
 80041d6:	46a9      	mov	r9, r5
 80041d8:	f04f 0c00 	mov.w	ip, #0
 80041dc:	f104 0e14 	add.w	lr, r4, #20
 80041e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80041e4:	f8d9 1000 	ldr.w	r1, [r9]
 80041e8:	fa1f fb82 	uxth.w	fp, r2
 80041ec:	b289      	uxth	r1, r1
 80041ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80041f2:	4461      	add	r1, ip
 80041f4:	f8d9 c000 	ldr.w	ip, [r9]
 80041f8:	0c12      	lsrs	r2, r2, #16
 80041fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80041fe:	fb0a c202 	mla	r2, sl, r2, ip
 8004202:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004206:	b289      	uxth	r1, r1
 8004208:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800420c:	4577      	cmp	r7, lr
 800420e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004212:	f849 1b04 	str.w	r1, [r9], #4
 8004216:	d8e3      	bhi.n	80041e0 <__multiply+0xb0>
 8004218:	9a01      	ldr	r2, [sp, #4]
 800421a:	f845 c002 	str.w	ip, [r5, r2]
 800421e:	9a03      	ldr	r2, [sp, #12]
 8004220:	3304      	adds	r3, #4
 8004222:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004226:	f1b9 0f00 	cmp.w	r9, #0
 800422a:	d020      	beq.n	800426e <__multiply+0x13e>
 800422c:	46ae      	mov	lr, r5
 800422e:	f04f 0a00 	mov.w	sl, #0
 8004232:	6829      	ldr	r1, [r5, #0]
 8004234:	f104 0c14 	add.w	ip, r4, #20
 8004238:	f8bc b000 	ldrh.w	fp, [ip]
 800423c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004240:	b289      	uxth	r1, r1
 8004242:	fb09 220b 	mla	r2, r9, fp, r2
 8004246:	4492      	add	sl, r2
 8004248:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800424c:	f84e 1b04 	str.w	r1, [lr], #4
 8004250:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004254:	f8be 1000 	ldrh.w	r1, [lr]
 8004258:	0c12      	lsrs	r2, r2, #16
 800425a:	fb09 1102 	mla	r1, r9, r2, r1
 800425e:	4567      	cmp	r7, ip
 8004260:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004264:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004268:	d8e6      	bhi.n	8004238 <__multiply+0x108>
 800426a:	9a01      	ldr	r2, [sp, #4]
 800426c:	50a9      	str	r1, [r5, r2]
 800426e:	3504      	adds	r5, #4
 8004270:	e79b      	b.n	80041aa <__multiply+0x7a>
 8004272:	3e01      	subs	r6, #1
 8004274:	e79d      	b.n	80041b2 <__multiply+0x82>
 8004276:	bf00      	nop
 8004278:	08006473 	.word	0x08006473
 800427c:	08006417 	.word	0x08006417

08004280 <__pow5mult>:
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	4615      	mov	r5, r2
 8004286:	f012 0203 	ands.w	r2, r2, #3
 800428a:	4606      	mov	r6, r0
 800428c:	460f      	mov	r7, r1
 800428e:	d007      	beq.n	80042a0 <__pow5mult+0x20>
 8004290:	4c25      	ldr	r4, [pc, #148]	; (8004328 <__pow5mult+0xa8>)
 8004292:	3a01      	subs	r2, #1
 8004294:	2300      	movs	r3, #0
 8004296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800429a:	f7ff fe9f 	bl	8003fdc <__multadd>
 800429e:	4607      	mov	r7, r0
 80042a0:	10ad      	asrs	r5, r5, #2
 80042a2:	d03d      	beq.n	8004320 <__pow5mult+0xa0>
 80042a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80042a6:	b97c      	cbnz	r4, 80042c8 <__pow5mult+0x48>
 80042a8:	2010      	movs	r0, #16
 80042aa:	f001 f93d 	bl	8005528 <malloc>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6270      	str	r0, [r6, #36]	; 0x24
 80042b2:	b928      	cbnz	r0, 80042c0 <__pow5mult+0x40>
 80042b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80042b8:	4b1c      	ldr	r3, [pc, #112]	; (800432c <__pow5mult+0xac>)
 80042ba:	481d      	ldr	r0, [pc, #116]	; (8004330 <__pow5mult+0xb0>)
 80042bc:	f000 fa8a 	bl	80047d4 <__assert_func>
 80042c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80042c4:	6004      	str	r4, [r0, #0]
 80042c6:	60c4      	str	r4, [r0, #12]
 80042c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80042cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80042d0:	b94c      	cbnz	r4, 80042e6 <__pow5mult+0x66>
 80042d2:	f240 2171 	movw	r1, #625	; 0x271
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7ff ff14 	bl	8004104 <__i2b>
 80042dc:	2300      	movs	r3, #0
 80042de:	4604      	mov	r4, r0
 80042e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80042e4:	6003      	str	r3, [r0, #0]
 80042e6:	f04f 0900 	mov.w	r9, #0
 80042ea:	07eb      	lsls	r3, r5, #31
 80042ec:	d50a      	bpl.n	8004304 <__pow5mult+0x84>
 80042ee:	4639      	mov	r1, r7
 80042f0:	4622      	mov	r2, r4
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7ff ff1c 	bl	8004130 <__multiply>
 80042f8:	4680      	mov	r8, r0
 80042fa:	4639      	mov	r1, r7
 80042fc:	4630      	mov	r0, r6
 80042fe:	f7ff fe4b 	bl	8003f98 <_Bfree>
 8004302:	4647      	mov	r7, r8
 8004304:	106d      	asrs	r5, r5, #1
 8004306:	d00b      	beq.n	8004320 <__pow5mult+0xa0>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	b938      	cbnz	r0, 800431c <__pow5mult+0x9c>
 800430c:	4622      	mov	r2, r4
 800430e:	4621      	mov	r1, r4
 8004310:	4630      	mov	r0, r6
 8004312:	f7ff ff0d 	bl	8004130 <__multiply>
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	f8c0 9000 	str.w	r9, [r0]
 800431c:	4604      	mov	r4, r0
 800431e:	e7e4      	b.n	80042ea <__pow5mult+0x6a>
 8004320:	4638      	mov	r0, r7
 8004322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004326:	bf00      	nop
 8004328:	08006578 	.word	0x08006578
 800432c:	08006400 	.word	0x08006400
 8004330:	08006417 	.word	0x08006417

08004334 <__lshift>:
 8004334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	460c      	mov	r4, r1
 800433a:	4607      	mov	r7, r0
 800433c:	4691      	mov	r9, r2
 800433e:	6923      	ldr	r3, [r4, #16]
 8004340:	6849      	ldr	r1, [r1, #4]
 8004342:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004346:	68a3      	ldr	r3, [r4, #8]
 8004348:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800434c:	f108 0601 	add.w	r6, r8, #1
 8004350:	42b3      	cmp	r3, r6
 8004352:	db0b      	blt.n	800436c <__lshift+0x38>
 8004354:	4638      	mov	r0, r7
 8004356:	f7ff fddf 	bl	8003f18 <_Balloc>
 800435a:	4605      	mov	r5, r0
 800435c:	b948      	cbnz	r0, 8004372 <__lshift+0x3e>
 800435e:	4602      	mov	r2, r0
 8004360:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004364:	4b29      	ldr	r3, [pc, #164]	; (800440c <__lshift+0xd8>)
 8004366:	482a      	ldr	r0, [pc, #168]	; (8004410 <__lshift+0xdc>)
 8004368:	f000 fa34 	bl	80047d4 <__assert_func>
 800436c:	3101      	adds	r1, #1
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	e7ee      	b.n	8004350 <__lshift+0x1c>
 8004372:	2300      	movs	r3, #0
 8004374:	f100 0114 	add.w	r1, r0, #20
 8004378:	f100 0210 	add.w	r2, r0, #16
 800437c:	4618      	mov	r0, r3
 800437e:	4553      	cmp	r3, sl
 8004380:	db37      	blt.n	80043f2 <__lshift+0xbe>
 8004382:	6920      	ldr	r0, [r4, #16]
 8004384:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004388:	f104 0314 	add.w	r3, r4, #20
 800438c:	f019 091f 	ands.w	r9, r9, #31
 8004390:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004394:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004398:	d02f      	beq.n	80043fa <__lshift+0xc6>
 800439a:	468a      	mov	sl, r1
 800439c:	f04f 0c00 	mov.w	ip, #0
 80043a0:	f1c9 0e20 	rsb	lr, r9, #32
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	fa02 f209 	lsl.w	r2, r2, r9
 80043aa:	ea42 020c 	orr.w	r2, r2, ip
 80043ae:	f84a 2b04 	str.w	r2, [sl], #4
 80043b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b6:	4298      	cmp	r0, r3
 80043b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80043bc:	d8f2      	bhi.n	80043a4 <__lshift+0x70>
 80043be:	1b03      	subs	r3, r0, r4
 80043c0:	3b15      	subs	r3, #21
 80043c2:	f023 0303 	bic.w	r3, r3, #3
 80043c6:	3304      	adds	r3, #4
 80043c8:	f104 0215 	add.w	r2, r4, #21
 80043cc:	4290      	cmp	r0, r2
 80043ce:	bf38      	it	cc
 80043d0:	2304      	movcc	r3, #4
 80043d2:	f841 c003 	str.w	ip, [r1, r3]
 80043d6:	f1bc 0f00 	cmp.w	ip, #0
 80043da:	d001      	beq.n	80043e0 <__lshift+0xac>
 80043dc:	f108 0602 	add.w	r6, r8, #2
 80043e0:	3e01      	subs	r6, #1
 80043e2:	4638      	mov	r0, r7
 80043e4:	4621      	mov	r1, r4
 80043e6:	612e      	str	r6, [r5, #16]
 80043e8:	f7ff fdd6 	bl	8003f98 <_Bfree>
 80043ec:	4628      	mov	r0, r5
 80043ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80043f6:	3301      	adds	r3, #1
 80043f8:	e7c1      	b.n	800437e <__lshift+0x4a>
 80043fa:	3904      	subs	r1, #4
 80043fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004400:	4298      	cmp	r0, r3
 8004402:	f841 2f04 	str.w	r2, [r1, #4]!
 8004406:	d8f9      	bhi.n	80043fc <__lshift+0xc8>
 8004408:	e7ea      	b.n	80043e0 <__lshift+0xac>
 800440a:	bf00      	nop
 800440c:	08006473 	.word	0x08006473
 8004410:	08006417 	.word	0x08006417

08004414 <__mcmp>:
 8004414:	4603      	mov	r3, r0
 8004416:	690a      	ldr	r2, [r1, #16]
 8004418:	6900      	ldr	r0, [r0, #16]
 800441a:	b530      	push	{r4, r5, lr}
 800441c:	1a80      	subs	r0, r0, r2
 800441e:	d10d      	bne.n	800443c <__mcmp+0x28>
 8004420:	3314      	adds	r3, #20
 8004422:	3114      	adds	r1, #20
 8004424:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004428:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800442c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004430:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004434:	4295      	cmp	r5, r2
 8004436:	d002      	beq.n	800443e <__mcmp+0x2a>
 8004438:	d304      	bcc.n	8004444 <__mcmp+0x30>
 800443a:	2001      	movs	r0, #1
 800443c:	bd30      	pop	{r4, r5, pc}
 800443e:	42a3      	cmp	r3, r4
 8004440:	d3f4      	bcc.n	800442c <__mcmp+0x18>
 8004442:	e7fb      	b.n	800443c <__mcmp+0x28>
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	e7f8      	b.n	800443c <__mcmp+0x28>
	...

0800444c <__mdiff>:
 800444c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004450:	460d      	mov	r5, r1
 8004452:	4607      	mov	r7, r0
 8004454:	4611      	mov	r1, r2
 8004456:	4628      	mov	r0, r5
 8004458:	4614      	mov	r4, r2
 800445a:	f7ff ffdb 	bl	8004414 <__mcmp>
 800445e:	1e06      	subs	r6, r0, #0
 8004460:	d111      	bne.n	8004486 <__mdiff+0x3a>
 8004462:	4631      	mov	r1, r6
 8004464:	4638      	mov	r0, r7
 8004466:	f7ff fd57 	bl	8003f18 <_Balloc>
 800446a:	4602      	mov	r2, r0
 800446c:	b928      	cbnz	r0, 800447a <__mdiff+0x2e>
 800446e:	f240 2132 	movw	r1, #562	; 0x232
 8004472:	4b3a      	ldr	r3, [pc, #232]	; (800455c <__mdiff+0x110>)
 8004474:	483a      	ldr	r0, [pc, #232]	; (8004560 <__mdiff+0x114>)
 8004476:	f000 f9ad 	bl	80047d4 <__assert_func>
 800447a:	2301      	movs	r3, #1
 800447c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004480:	4610      	mov	r0, r2
 8004482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004486:	bfa4      	itt	ge
 8004488:	4623      	movge	r3, r4
 800448a:	462c      	movge	r4, r5
 800448c:	4638      	mov	r0, r7
 800448e:	6861      	ldr	r1, [r4, #4]
 8004490:	bfa6      	itte	ge
 8004492:	461d      	movge	r5, r3
 8004494:	2600      	movge	r6, #0
 8004496:	2601      	movlt	r6, #1
 8004498:	f7ff fd3e 	bl	8003f18 <_Balloc>
 800449c:	4602      	mov	r2, r0
 800449e:	b918      	cbnz	r0, 80044a8 <__mdiff+0x5c>
 80044a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80044a4:	4b2d      	ldr	r3, [pc, #180]	; (800455c <__mdiff+0x110>)
 80044a6:	e7e5      	b.n	8004474 <__mdiff+0x28>
 80044a8:	f102 0814 	add.w	r8, r2, #20
 80044ac:	46c2      	mov	sl, r8
 80044ae:	f04f 0c00 	mov.w	ip, #0
 80044b2:	6927      	ldr	r7, [r4, #16]
 80044b4:	60c6      	str	r6, [r0, #12]
 80044b6:	692e      	ldr	r6, [r5, #16]
 80044b8:	f104 0014 	add.w	r0, r4, #20
 80044bc:	f105 0914 	add.w	r9, r5, #20
 80044c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80044c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80044c8:	3410      	adds	r4, #16
 80044ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80044ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80044d2:	fa1f f18b 	uxth.w	r1, fp
 80044d6:	448c      	add	ip, r1
 80044d8:	b299      	uxth	r1, r3
 80044da:	0c1b      	lsrs	r3, r3, #16
 80044dc:	ebac 0101 	sub.w	r1, ip, r1
 80044e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80044e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80044e8:	b289      	uxth	r1, r1
 80044ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80044ee:	454e      	cmp	r6, r9
 80044f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80044f4:	f84a 3b04 	str.w	r3, [sl], #4
 80044f8:	d8e7      	bhi.n	80044ca <__mdiff+0x7e>
 80044fa:	1b73      	subs	r3, r6, r5
 80044fc:	3b15      	subs	r3, #21
 80044fe:	f023 0303 	bic.w	r3, r3, #3
 8004502:	3515      	adds	r5, #21
 8004504:	3304      	adds	r3, #4
 8004506:	42ae      	cmp	r6, r5
 8004508:	bf38      	it	cc
 800450a:	2304      	movcc	r3, #4
 800450c:	4418      	add	r0, r3
 800450e:	4443      	add	r3, r8
 8004510:	461e      	mov	r6, r3
 8004512:	4605      	mov	r5, r0
 8004514:	4575      	cmp	r5, lr
 8004516:	d30e      	bcc.n	8004536 <__mdiff+0xea>
 8004518:	f10e 0103 	add.w	r1, lr, #3
 800451c:	1a09      	subs	r1, r1, r0
 800451e:	f021 0103 	bic.w	r1, r1, #3
 8004522:	3803      	subs	r0, #3
 8004524:	4586      	cmp	lr, r0
 8004526:	bf38      	it	cc
 8004528:	2100      	movcc	r1, #0
 800452a:	4419      	add	r1, r3
 800452c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004530:	b18b      	cbz	r3, 8004556 <__mdiff+0x10a>
 8004532:	6117      	str	r7, [r2, #16]
 8004534:	e7a4      	b.n	8004480 <__mdiff+0x34>
 8004536:	f855 8b04 	ldr.w	r8, [r5], #4
 800453a:	fa1f f188 	uxth.w	r1, r8
 800453e:	4461      	add	r1, ip
 8004540:	140c      	asrs	r4, r1, #16
 8004542:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004546:	b289      	uxth	r1, r1
 8004548:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800454c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004550:	f846 1b04 	str.w	r1, [r6], #4
 8004554:	e7de      	b.n	8004514 <__mdiff+0xc8>
 8004556:	3f01      	subs	r7, #1
 8004558:	e7e8      	b.n	800452c <__mdiff+0xe0>
 800455a:	bf00      	nop
 800455c:	08006473 	.word	0x08006473
 8004560:	08006417 	.word	0x08006417

08004564 <__d2b>:
 8004564:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004568:	2101      	movs	r1, #1
 800456a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800456e:	4690      	mov	r8, r2
 8004570:	461d      	mov	r5, r3
 8004572:	f7ff fcd1 	bl	8003f18 <_Balloc>
 8004576:	4604      	mov	r4, r0
 8004578:	b930      	cbnz	r0, 8004588 <__d2b+0x24>
 800457a:	4602      	mov	r2, r0
 800457c:	f240 310a 	movw	r1, #778	; 0x30a
 8004580:	4b24      	ldr	r3, [pc, #144]	; (8004614 <__d2b+0xb0>)
 8004582:	4825      	ldr	r0, [pc, #148]	; (8004618 <__d2b+0xb4>)
 8004584:	f000 f926 	bl	80047d4 <__assert_func>
 8004588:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800458c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004590:	bb2d      	cbnz	r5, 80045de <__d2b+0x7a>
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	f1b8 0300 	subs.w	r3, r8, #0
 8004598:	d026      	beq.n	80045e8 <__d2b+0x84>
 800459a:	4668      	mov	r0, sp
 800459c:	9300      	str	r3, [sp, #0]
 800459e:	f7ff fd83 	bl	80040a8 <__lo0bits>
 80045a2:	9900      	ldr	r1, [sp, #0]
 80045a4:	b1f0      	cbz	r0, 80045e4 <__d2b+0x80>
 80045a6:	9a01      	ldr	r2, [sp, #4]
 80045a8:	f1c0 0320 	rsb	r3, r0, #32
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	430b      	orrs	r3, r1
 80045b2:	40c2      	lsrs	r2, r0
 80045b4:	6163      	str	r3, [r4, #20]
 80045b6:	9201      	str	r2, [sp, #4]
 80045b8:	9b01      	ldr	r3, [sp, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2102      	movne	r1, #2
 80045c0:	2101      	moveq	r1, #1
 80045c2:	61a3      	str	r3, [r4, #24]
 80045c4:	6121      	str	r1, [r4, #16]
 80045c6:	b1c5      	cbz	r5, 80045fa <__d2b+0x96>
 80045c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80045cc:	4405      	add	r5, r0
 80045ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80045d2:	603d      	str	r5, [r7, #0]
 80045d4:	6030      	str	r0, [r6, #0]
 80045d6:	4620      	mov	r0, r4
 80045d8:	b002      	add	sp, #8
 80045da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e2:	e7d6      	b.n	8004592 <__d2b+0x2e>
 80045e4:	6161      	str	r1, [r4, #20]
 80045e6:	e7e7      	b.n	80045b8 <__d2b+0x54>
 80045e8:	a801      	add	r0, sp, #4
 80045ea:	f7ff fd5d 	bl	80040a8 <__lo0bits>
 80045ee:	2101      	movs	r1, #1
 80045f0:	9b01      	ldr	r3, [sp, #4]
 80045f2:	6121      	str	r1, [r4, #16]
 80045f4:	6163      	str	r3, [r4, #20]
 80045f6:	3020      	adds	r0, #32
 80045f8:	e7e5      	b.n	80045c6 <__d2b+0x62>
 80045fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80045fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004602:	6038      	str	r0, [r7, #0]
 8004604:	6918      	ldr	r0, [r3, #16]
 8004606:	f7ff fd2f 	bl	8004068 <__hi0bits>
 800460a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800460e:	6031      	str	r1, [r6, #0]
 8004610:	e7e1      	b.n	80045d6 <__d2b+0x72>
 8004612:	bf00      	nop
 8004614:	08006473 	.word	0x08006473
 8004618:	08006417 	.word	0x08006417

0800461c <_mprec_log10>:
 800461c:	2817      	cmp	r0, #23
 800461e:	b5d0      	push	{r4, r6, r7, lr}
 8004620:	4604      	mov	r4, r0
 8004622:	dc05      	bgt.n	8004630 <_mprec_log10+0x14>
 8004624:	4808      	ldr	r0, [pc, #32]	; (8004648 <_mprec_log10+0x2c>)
 8004626:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800462a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800462e:	bdd0      	pop	{r4, r6, r7, pc}
 8004630:	2000      	movs	r0, #0
 8004632:	2600      	movs	r6, #0
 8004634:	4905      	ldr	r1, [pc, #20]	; (800464c <_mprec_log10+0x30>)
 8004636:	4f06      	ldr	r7, [pc, #24]	; (8004650 <_mprec_log10+0x34>)
 8004638:	4632      	mov	r2, r6
 800463a:	463b      	mov	r3, r7
 800463c:	f7fb ff44 	bl	80004c8 <__aeabi_dmul>
 8004640:	3c01      	subs	r4, #1
 8004642:	d1f9      	bne.n	8004638 <_mprec_log10+0x1c>
 8004644:	e7f3      	b.n	800462e <_mprec_log10+0x12>
 8004646:	bf00      	nop
 8004648:	080064b0 	.word	0x080064b0
 800464c:	3ff00000 	.word	0x3ff00000
 8004650:	40240000 	.word	0x40240000

08004654 <_calloc_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	fba1 5402 	umull	r5, r4, r1, r2
 800465a:	b934      	cbnz	r4, 800466a <_calloc_r+0x16>
 800465c:	4629      	mov	r1, r5
 800465e:	f000 f82d 	bl	80046bc <_malloc_r>
 8004662:	4606      	mov	r6, r0
 8004664:	b928      	cbnz	r0, 8004672 <_calloc_r+0x1e>
 8004666:	4630      	mov	r0, r6
 8004668:	bd70      	pop	{r4, r5, r6, pc}
 800466a:	220c      	movs	r2, #12
 800466c:	2600      	movs	r6, #0
 800466e:	6002      	str	r2, [r0, #0]
 8004670:	e7f9      	b.n	8004666 <_calloc_r+0x12>
 8004672:	462a      	mov	r2, r5
 8004674:	4621      	mov	r1, r4
 8004676:	f7ff fb0d 	bl	8003c94 <memset>
 800467a:	e7f4      	b.n	8004666 <_calloc_r+0x12>

0800467c <sbrk_aligned>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4e0e      	ldr	r6, [pc, #56]	; (80046b8 <sbrk_aligned+0x3c>)
 8004680:	460c      	mov	r4, r1
 8004682:	6831      	ldr	r1, [r6, #0]
 8004684:	4605      	mov	r5, r0
 8004686:	b911      	cbnz	r1, 800468e <sbrk_aligned+0x12>
 8004688:	f000 f88c 	bl	80047a4 <_sbrk_r>
 800468c:	6030      	str	r0, [r6, #0]
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 f887 	bl	80047a4 <_sbrk_r>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	d00a      	beq.n	80046b0 <sbrk_aligned+0x34>
 800469a:	1cc4      	adds	r4, r0, #3
 800469c:	f024 0403 	bic.w	r4, r4, #3
 80046a0:	42a0      	cmp	r0, r4
 80046a2:	d007      	beq.n	80046b4 <sbrk_aligned+0x38>
 80046a4:	1a21      	subs	r1, r4, r0
 80046a6:	4628      	mov	r0, r5
 80046a8:	f000 f87c 	bl	80047a4 <_sbrk_r>
 80046ac:	3001      	adds	r0, #1
 80046ae:	d101      	bne.n	80046b4 <sbrk_aligned+0x38>
 80046b0:	f04f 34ff 	mov.w	r4, #4294967295
 80046b4:	4620      	mov	r0, r4
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	2000011c 	.word	0x2000011c

080046bc <_malloc_r>:
 80046bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c0:	1ccd      	adds	r5, r1, #3
 80046c2:	f025 0503 	bic.w	r5, r5, #3
 80046c6:	3508      	adds	r5, #8
 80046c8:	2d0c      	cmp	r5, #12
 80046ca:	bf38      	it	cc
 80046cc:	250c      	movcc	r5, #12
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	4607      	mov	r7, r0
 80046d2:	db01      	blt.n	80046d8 <_malloc_r+0x1c>
 80046d4:	42a9      	cmp	r1, r5
 80046d6:	d905      	bls.n	80046e4 <_malloc_r+0x28>
 80046d8:	230c      	movs	r3, #12
 80046da:	2600      	movs	r6, #0
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4630      	mov	r0, r6
 80046e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e4:	4e2e      	ldr	r6, [pc, #184]	; (80047a0 <_malloc_r+0xe4>)
 80046e6:	f000 ff35 	bl	8005554 <__malloc_lock>
 80046ea:	6833      	ldr	r3, [r6, #0]
 80046ec:	461c      	mov	r4, r3
 80046ee:	bb34      	cbnz	r4, 800473e <_malloc_r+0x82>
 80046f0:	4629      	mov	r1, r5
 80046f2:	4638      	mov	r0, r7
 80046f4:	f7ff ffc2 	bl	800467c <sbrk_aligned>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	4604      	mov	r4, r0
 80046fc:	d14d      	bne.n	800479a <_malloc_r+0xde>
 80046fe:	6834      	ldr	r4, [r6, #0]
 8004700:	4626      	mov	r6, r4
 8004702:	2e00      	cmp	r6, #0
 8004704:	d140      	bne.n	8004788 <_malloc_r+0xcc>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4631      	mov	r1, r6
 800470a:	4638      	mov	r0, r7
 800470c:	eb04 0803 	add.w	r8, r4, r3
 8004710:	f000 f848 	bl	80047a4 <_sbrk_r>
 8004714:	4580      	cmp	r8, r0
 8004716:	d13a      	bne.n	800478e <_malloc_r+0xd2>
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	3503      	adds	r5, #3
 800471c:	1a6d      	subs	r5, r5, r1
 800471e:	f025 0503 	bic.w	r5, r5, #3
 8004722:	3508      	adds	r5, #8
 8004724:	2d0c      	cmp	r5, #12
 8004726:	bf38      	it	cc
 8004728:	250c      	movcc	r5, #12
 800472a:	4638      	mov	r0, r7
 800472c:	4629      	mov	r1, r5
 800472e:	f7ff ffa5 	bl	800467c <sbrk_aligned>
 8004732:	3001      	adds	r0, #1
 8004734:	d02b      	beq.n	800478e <_malloc_r+0xd2>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	442b      	add	r3, r5
 800473a:	6023      	str	r3, [r4, #0]
 800473c:	e00e      	b.n	800475c <_malloc_r+0xa0>
 800473e:	6822      	ldr	r2, [r4, #0]
 8004740:	1b52      	subs	r2, r2, r5
 8004742:	d41e      	bmi.n	8004782 <_malloc_r+0xc6>
 8004744:	2a0b      	cmp	r2, #11
 8004746:	d916      	bls.n	8004776 <_malloc_r+0xba>
 8004748:	1961      	adds	r1, r4, r5
 800474a:	42a3      	cmp	r3, r4
 800474c:	6025      	str	r5, [r4, #0]
 800474e:	bf18      	it	ne
 8004750:	6059      	strne	r1, [r3, #4]
 8004752:	6863      	ldr	r3, [r4, #4]
 8004754:	bf08      	it	eq
 8004756:	6031      	streq	r1, [r6, #0]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4638      	mov	r0, r7
 800475e:	f104 060b 	add.w	r6, r4, #11
 8004762:	f000 fefd 	bl	8005560 <__malloc_unlock>
 8004766:	f026 0607 	bic.w	r6, r6, #7
 800476a:	1d23      	adds	r3, r4, #4
 800476c:	1af2      	subs	r2, r6, r3
 800476e:	d0b6      	beq.n	80046de <_malloc_r+0x22>
 8004770:	1b9b      	subs	r3, r3, r6
 8004772:	50a3      	str	r3, [r4, r2]
 8004774:	e7b3      	b.n	80046de <_malloc_r+0x22>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	42a3      	cmp	r3, r4
 800477a:	bf0c      	ite	eq
 800477c:	6032      	streq	r2, [r6, #0]
 800477e:	605a      	strne	r2, [r3, #4]
 8004780:	e7ec      	b.n	800475c <_malloc_r+0xa0>
 8004782:	4623      	mov	r3, r4
 8004784:	6864      	ldr	r4, [r4, #4]
 8004786:	e7b2      	b.n	80046ee <_malloc_r+0x32>
 8004788:	4634      	mov	r4, r6
 800478a:	6876      	ldr	r6, [r6, #4]
 800478c:	e7b9      	b.n	8004702 <_malloc_r+0x46>
 800478e:	230c      	movs	r3, #12
 8004790:	4638      	mov	r0, r7
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	f000 fee4 	bl	8005560 <__malloc_unlock>
 8004798:	e7a1      	b.n	80046de <_malloc_r+0x22>
 800479a:	6025      	str	r5, [r4, #0]
 800479c:	e7de      	b.n	800475c <_malloc_r+0xa0>
 800479e:	bf00      	nop
 80047a0:	20000118 	.word	0x20000118

080047a4 <_sbrk_r>:
 80047a4:	b538      	push	{r3, r4, r5, lr}
 80047a6:	2300      	movs	r3, #0
 80047a8:	4d05      	ldr	r5, [pc, #20]	; (80047c0 <_sbrk_r+0x1c>)
 80047aa:	4604      	mov	r4, r0
 80047ac:	4608      	mov	r0, r1
 80047ae:	602b      	str	r3, [r5, #0]
 80047b0:	f7fc ffc4 	bl	800173c <_sbrk>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d102      	bne.n	80047be <_sbrk_r+0x1a>
 80047b8:	682b      	ldr	r3, [r5, #0]
 80047ba:	b103      	cbz	r3, 80047be <_sbrk_r+0x1a>
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	bd38      	pop	{r3, r4, r5, pc}
 80047c0:	20000120 	.word	0x20000120

080047c4 <strcpy>:
 80047c4:	4603      	mov	r3, r0
 80047c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ca:	f803 2b01 	strb.w	r2, [r3], #1
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d1f9      	bne.n	80047c6 <strcpy+0x2>
 80047d2:	4770      	bx	lr

080047d4 <__assert_func>:
 80047d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047d6:	4614      	mov	r4, r2
 80047d8:	461a      	mov	r2, r3
 80047da:	4b09      	ldr	r3, [pc, #36]	; (8004800 <__assert_func+0x2c>)
 80047dc:	4605      	mov	r5, r0
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68d8      	ldr	r0, [r3, #12]
 80047e2:	b14c      	cbz	r4, 80047f8 <__assert_func+0x24>
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <__assert_func+0x30>)
 80047e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047ea:	9100      	str	r1, [sp, #0]
 80047ec:	462b      	mov	r3, r5
 80047ee:	4906      	ldr	r1, [pc, #24]	; (8004808 <__assert_func+0x34>)
 80047f0:	f000 fe88 	bl	8005504 <fiprintf>
 80047f4:	f001 fab0 	bl	8005d58 <abort>
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <__assert_func+0x38>)
 80047fa:	461c      	mov	r4, r3
 80047fc:	e7f3      	b.n	80047e6 <__assert_func+0x12>
 80047fe:	bf00      	nop
 8004800:	2000000c 	.word	0x2000000c
 8004804:	08006584 	.word	0x08006584
 8004808:	08006591 	.word	0x08006591
 800480c:	080065bf 	.word	0x080065bf

08004810 <quorem>:
 8004810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004814:	6903      	ldr	r3, [r0, #16]
 8004816:	690c      	ldr	r4, [r1, #16]
 8004818:	4607      	mov	r7, r0
 800481a:	42a3      	cmp	r3, r4
 800481c:	f2c0 8082 	blt.w	8004924 <quorem+0x114>
 8004820:	3c01      	subs	r4, #1
 8004822:	f100 0514 	add.w	r5, r0, #20
 8004826:	f101 0814 	add.w	r8, r1, #20
 800482a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004838:	3301      	adds	r3, #1
 800483a:	429a      	cmp	r2, r3
 800483c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004840:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004844:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004848:	d331      	bcc.n	80048ae <quorem+0x9e>
 800484a:	f04f 0e00 	mov.w	lr, #0
 800484e:	4640      	mov	r0, r8
 8004850:	46ac      	mov	ip, r5
 8004852:	46f2      	mov	sl, lr
 8004854:	f850 2b04 	ldr.w	r2, [r0], #4
 8004858:	b293      	uxth	r3, r2
 800485a:	fb06 e303 	mla	r3, r6, r3, lr
 800485e:	0c12      	lsrs	r2, r2, #16
 8004860:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004864:	b29b      	uxth	r3, r3
 8004866:	fb06 e202 	mla	r2, r6, r2, lr
 800486a:	ebaa 0303 	sub.w	r3, sl, r3
 800486e:	f8dc a000 	ldr.w	sl, [ip]
 8004872:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004876:	fa1f fa8a 	uxth.w	sl, sl
 800487a:	4453      	add	r3, sl
 800487c:	f8dc a000 	ldr.w	sl, [ip]
 8004880:	b292      	uxth	r2, r2
 8004882:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004886:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800488a:	b29b      	uxth	r3, r3
 800488c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004890:	4581      	cmp	r9, r0
 8004892:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004896:	f84c 3b04 	str.w	r3, [ip], #4
 800489a:	d2db      	bcs.n	8004854 <quorem+0x44>
 800489c:	f855 300b 	ldr.w	r3, [r5, fp]
 80048a0:	b92b      	cbnz	r3, 80048ae <quorem+0x9e>
 80048a2:	9b01      	ldr	r3, [sp, #4]
 80048a4:	3b04      	subs	r3, #4
 80048a6:	429d      	cmp	r5, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	d32f      	bcc.n	800490c <quorem+0xfc>
 80048ac:	613c      	str	r4, [r7, #16]
 80048ae:	4638      	mov	r0, r7
 80048b0:	f7ff fdb0 	bl	8004414 <__mcmp>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	db25      	blt.n	8004904 <quorem+0xf4>
 80048b8:	4628      	mov	r0, r5
 80048ba:	f04f 0c00 	mov.w	ip, #0
 80048be:	3601      	adds	r6, #1
 80048c0:	f858 1b04 	ldr.w	r1, [r8], #4
 80048c4:	f8d0 e000 	ldr.w	lr, [r0]
 80048c8:	b28b      	uxth	r3, r1
 80048ca:	ebac 0303 	sub.w	r3, ip, r3
 80048ce:	fa1f f28e 	uxth.w	r2, lr
 80048d2:	4413      	add	r3, r2
 80048d4:	0c0a      	lsrs	r2, r1, #16
 80048d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048de:	b29b      	uxth	r3, r3
 80048e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048e4:	45c1      	cmp	r9, r8
 80048e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048ea:	f840 3b04 	str.w	r3, [r0], #4
 80048ee:	d2e7      	bcs.n	80048c0 <quorem+0xb0>
 80048f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048f8:	b922      	cbnz	r2, 8004904 <quorem+0xf4>
 80048fa:	3b04      	subs	r3, #4
 80048fc:	429d      	cmp	r5, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	d30a      	bcc.n	8004918 <quorem+0x108>
 8004902:	613c      	str	r4, [r7, #16]
 8004904:	4630      	mov	r0, r6
 8004906:	b003      	add	sp, #12
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	3b04      	subs	r3, #4
 8004910:	2a00      	cmp	r2, #0
 8004912:	d1cb      	bne.n	80048ac <quorem+0x9c>
 8004914:	3c01      	subs	r4, #1
 8004916:	e7c6      	b.n	80048a6 <quorem+0x96>
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	3b04      	subs	r3, #4
 800491c:	2a00      	cmp	r2, #0
 800491e:	d1f0      	bne.n	8004902 <quorem+0xf2>
 8004920:	3c01      	subs	r4, #1
 8004922:	e7eb      	b.n	80048fc <quorem+0xec>
 8004924:	2000      	movs	r0, #0
 8004926:	e7ee      	b.n	8004906 <quorem+0xf6>

08004928 <_dtoa_r>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	4616      	mov	r6, r2
 800492e:	461f      	mov	r7, r3
 8004930:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004932:	b099      	sub	sp, #100	; 0x64
 8004934:	4605      	mov	r5, r0
 8004936:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800493a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800493e:	b974      	cbnz	r4, 800495e <_dtoa_r+0x36>
 8004940:	2010      	movs	r0, #16
 8004942:	f000 fdf1 	bl	8005528 <malloc>
 8004946:	4602      	mov	r2, r0
 8004948:	6268      	str	r0, [r5, #36]	; 0x24
 800494a:	b920      	cbnz	r0, 8004956 <_dtoa_r+0x2e>
 800494c:	21ea      	movs	r1, #234	; 0xea
 800494e:	4ba8      	ldr	r3, [pc, #672]	; (8004bf0 <_dtoa_r+0x2c8>)
 8004950:	48a8      	ldr	r0, [pc, #672]	; (8004bf4 <_dtoa_r+0x2cc>)
 8004952:	f7ff ff3f 	bl	80047d4 <__assert_func>
 8004956:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800495a:	6004      	str	r4, [r0, #0]
 800495c:	60c4      	str	r4, [r0, #12]
 800495e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004960:	6819      	ldr	r1, [r3, #0]
 8004962:	b151      	cbz	r1, 800497a <_dtoa_r+0x52>
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	2301      	movs	r3, #1
 8004968:	4093      	lsls	r3, r2
 800496a:	604a      	str	r2, [r1, #4]
 800496c:	608b      	str	r3, [r1, #8]
 800496e:	4628      	mov	r0, r5
 8004970:	f7ff fb12 	bl	8003f98 <_Bfree>
 8004974:	2200      	movs	r2, #0
 8004976:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	1e3b      	subs	r3, r7, #0
 800497c:	bfaf      	iteee	ge
 800497e:	2300      	movge	r3, #0
 8004980:	2201      	movlt	r2, #1
 8004982:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004986:	9305      	strlt	r3, [sp, #20]
 8004988:	bfa8      	it	ge
 800498a:	f8c8 3000 	strge.w	r3, [r8]
 800498e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004992:	4b99      	ldr	r3, [pc, #612]	; (8004bf8 <_dtoa_r+0x2d0>)
 8004994:	bfb8      	it	lt
 8004996:	f8c8 2000 	strlt.w	r2, [r8]
 800499a:	ea33 0309 	bics.w	r3, r3, r9
 800499e:	d119      	bne.n	80049d4 <_dtoa_r+0xac>
 80049a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80049a4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049ac:	4333      	orrs	r3, r6
 80049ae:	f000 857f 	beq.w	80054b0 <_dtoa_r+0xb88>
 80049b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049b4:	b953      	cbnz	r3, 80049cc <_dtoa_r+0xa4>
 80049b6:	4b91      	ldr	r3, [pc, #580]	; (8004bfc <_dtoa_r+0x2d4>)
 80049b8:	e022      	b.n	8004a00 <_dtoa_r+0xd8>
 80049ba:	4b91      	ldr	r3, [pc, #580]	; (8004c00 <_dtoa_r+0x2d8>)
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	3308      	adds	r3, #8
 80049c0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	9803      	ldr	r0, [sp, #12]
 80049c6:	b019      	add	sp, #100	; 0x64
 80049c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049cc:	4b8b      	ldr	r3, [pc, #556]	; (8004bfc <_dtoa_r+0x2d4>)
 80049ce:	9303      	str	r3, [sp, #12]
 80049d0:	3303      	adds	r3, #3
 80049d2:	e7f5      	b.n	80049c0 <_dtoa_r+0x98>
 80049d4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80049d8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80049dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80049e0:	2200      	movs	r2, #0
 80049e2:	2300      	movs	r3, #0
 80049e4:	f7fb ffd8 	bl	8000998 <__aeabi_dcmpeq>
 80049e8:	4680      	mov	r8, r0
 80049ea:	b158      	cbz	r0, 8004a04 <_dtoa_r+0xdc>
 80049ec:	2301      	movs	r3, #1
 80049ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8558 	beq.w	80054aa <_dtoa_r+0xb82>
 80049fa:	4882      	ldr	r0, [pc, #520]	; (8004c04 <_dtoa_r+0x2dc>)
 80049fc:	6018      	str	r0, [r3, #0]
 80049fe:	1e43      	subs	r3, r0, #1
 8004a00:	9303      	str	r3, [sp, #12]
 8004a02:	e7df      	b.n	80049c4 <_dtoa_r+0x9c>
 8004a04:	ab16      	add	r3, sp, #88	; 0x58
 8004a06:	9301      	str	r3, [sp, #4]
 8004a08:	ab17      	add	r3, sp, #92	; 0x5c
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a12:	f7ff fda7 	bl	8004564 <__d2b>
 8004a16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004a1a:	4683      	mov	fp, r0
 8004a1c:	2c00      	cmp	r4, #0
 8004a1e:	d07f      	beq.n	8004b20 <_dtoa_r+0x1f8>
 8004a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a26:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004a32:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004a36:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4b72      	ldr	r3, [pc, #456]	; (8004c08 <_dtoa_r+0x2e0>)
 8004a3e:	f7fb fb8b 	bl	8000158 <__aeabi_dsub>
 8004a42:	a365      	add	r3, pc, #404	; (adr r3, 8004bd8 <_dtoa_r+0x2b0>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fd3e 	bl	80004c8 <__aeabi_dmul>
 8004a4c:	a364      	add	r3, pc, #400	; (adr r3, 8004be0 <_dtoa_r+0x2b8>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f7fb fb83 	bl	800015c <__adddf3>
 8004a56:	4606      	mov	r6, r0
 8004a58:	4620      	mov	r0, r4
 8004a5a:	460f      	mov	r7, r1
 8004a5c:	f7fb fcca 	bl	80003f4 <__aeabi_i2d>
 8004a60:	a361      	add	r3, pc, #388	; (adr r3, 8004be8 <_dtoa_r+0x2c0>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fd2f 	bl	80004c8 <__aeabi_dmul>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4630      	mov	r0, r6
 8004a70:	4639      	mov	r1, r7
 8004a72:	f7fb fb73 	bl	800015c <__adddf3>
 8004a76:	4606      	mov	r6, r0
 8004a78:	460f      	mov	r7, r1
 8004a7a:	f7fb ffbf 	bl	80009fc <__aeabi_d2iz>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	4682      	mov	sl, r0
 8004a82:	2300      	movs	r3, #0
 8004a84:	4630      	mov	r0, r6
 8004a86:	4639      	mov	r1, r7
 8004a88:	f7fb ff90 	bl	80009ac <__aeabi_dcmplt>
 8004a8c:	b148      	cbz	r0, 8004aa2 <_dtoa_r+0x17a>
 8004a8e:	4650      	mov	r0, sl
 8004a90:	f7fb fcb0 	bl	80003f4 <__aeabi_i2d>
 8004a94:	4632      	mov	r2, r6
 8004a96:	463b      	mov	r3, r7
 8004a98:	f7fb ff7e 	bl	8000998 <__aeabi_dcmpeq>
 8004a9c:	b908      	cbnz	r0, 8004aa2 <_dtoa_r+0x17a>
 8004a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aa2:	f1ba 0f16 	cmp.w	sl, #22
 8004aa6:	d858      	bhi.n	8004b5a <_dtoa_r+0x232>
 8004aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004aac:	4b57      	ldr	r3, [pc, #348]	; (8004c0c <_dtoa_r+0x2e4>)
 8004aae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab6:	f7fb ff79 	bl	80009ac <__aeabi_dcmplt>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d04f      	beq.n	8004b5e <_dtoa_r+0x236>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ac4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ac6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ac8:	1b1c      	subs	r4, r3, r4
 8004aca:	1e63      	subs	r3, r4, #1
 8004acc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ace:	bf49      	itett	mi
 8004ad0:	f1c4 0301 	rsbmi	r3, r4, #1
 8004ad4:	2300      	movpl	r3, #0
 8004ad6:	9306      	strmi	r3, [sp, #24]
 8004ad8:	2300      	movmi	r3, #0
 8004ada:	bf54      	ite	pl
 8004adc:	9306      	strpl	r3, [sp, #24]
 8004ade:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004ae0:	f1ba 0f00 	cmp.w	sl, #0
 8004ae4:	db3d      	blt.n	8004b62 <_dtoa_r+0x23a>
 8004ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ae8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004aec:	4453      	add	r3, sl
 8004aee:	9309      	str	r3, [sp, #36]	; 0x24
 8004af0:	2300      	movs	r3, #0
 8004af2:	930a      	str	r3, [sp, #40]	; 0x28
 8004af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004af6:	2b09      	cmp	r3, #9
 8004af8:	f200 808c 	bhi.w	8004c14 <_dtoa_r+0x2ec>
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	bfc4      	itt	gt
 8004b00:	3b04      	subgt	r3, #4
 8004b02:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b06:	bfc8      	it	gt
 8004b08:	2400      	movgt	r4, #0
 8004b0a:	f1a3 0302 	sub.w	r3, r3, #2
 8004b0e:	bfd8      	it	le
 8004b10:	2401      	movle	r4, #1
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	f200 808a 	bhi.w	8004c2c <_dtoa_r+0x304>
 8004b18:	e8df f003 	tbb	[pc, r3]
 8004b1c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004b20:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004b24:	441c      	add	r4, r3
 8004b26:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	bfc3      	ittte	gt
 8004b2e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004b32:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004b36:	fa09 f303 	lslgt.w	r3, r9, r3
 8004b3a:	f1c3 0320 	rsble	r3, r3, #32
 8004b3e:	bfc6      	itte	gt
 8004b40:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004b44:	4318      	orrgt	r0, r3
 8004b46:	fa06 f003 	lslle.w	r0, r6, r3
 8004b4a:	f7fb fc43 	bl	80003d4 <__aeabi_ui2d>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004b54:	3c01      	subs	r4, #1
 8004b56:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b58:	e76f      	b.n	8004a3a <_dtoa_r+0x112>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e7b2      	b.n	8004ac4 <_dtoa_r+0x19c>
 8004b5e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b60:	e7b1      	b.n	8004ac6 <_dtoa_r+0x19e>
 8004b62:	9b06      	ldr	r3, [sp, #24]
 8004b64:	eba3 030a 	sub.w	r3, r3, sl
 8004b68:	9306      	str	r3, [sp, #24]
 8004b6a:	f1ca 0300 	rsb	r3, sl, #0
 8004b6e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b70:	2300      	movs	r3, #0
 8004b72:	930e      	str	r3, [sp, #56]	; 0x38
 8004b74:	e7be      	b.n	8004af4 <_dtoa_r+0x1cc>
 8004b76:	2300      	movs	r3, #0
 8004b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dc58      	bgt.n	8004c32 <_dtoa_r+0x30a>
 8004b80:	f04f 0901 	mov.w	r9, #1
 8004b84:	464b      	mov	r3, r9
 8004b86:	f8cd 9020 	str.w	r9, [sp, #32]
 8004b8a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004b8e:	2200      	movs	r2, #0
 8004b90:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004b92:	6042      	str	r2, [r0, #4]
 8004b94:	2204      	movs	r2, #4
 8004b96:	f102 0614 	add.w	r6, r2, #20
 8004b9a:	429e      	cmp	r6, r3
 8004b9c:	6841      	ldr	r1, [r0, #4]
 8004b9e:	d94e      	bls.n	8004c3e <_dtoa_r+0x316>
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f7ff f9b9 	bl	8003f18 <_Balloc>
 8004ba6:	9003      	str	r0, [sp, #12]
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d14c      	bne.n	8004c46 <_dtoa_r+0x31e>
 8004bac:	4602      	mov	r2, r0
 8004bae:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bb2:	4b17      	ldr	r3, [pc, #92]	; (8004c10 <_dtoa_r+0x2e8>)
 8004bb4:	e6cc      	b.n	8004950 <_dtoa_r+0x28>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7de      	b.n	8004b78 <_dtoa_r+0x250>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004bc0:	eb0a 0903 	add.w	r9, sl, r3
 8004bc4:	f109 0301 	add.w	r3, r9, #1
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	9308      	str	r3, [sp, #32]
 8004bcc:	bfb8      	it	lt
 8004bce:	2301      	movlt	r3, #1
 8004bd0:	e7dd      	b.n	8004b8e <_dtoa_r+0x266>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e7f2      	b.n	8004bbc <_dtoa_r+0x294>
 8004bd6:	bf00      	nop
 8004bd8:	636f4361 	.word	0x636f4361
 8004bdc:	3fd287a7 	.word	0x3fd287a7
 8004be0:	8b60c8b3 	.word	0x8b60c8b3
 8004be4:	3fc68a28 	.word	0x3fc68a28
 8004be8:	509f79fb 	.word	0x509f79fb
 8004bec:	3fd34413 	.word	0x3fd34413
 8004bf0:	08006400 	.word	0x08006400
 8004bf4:	080065cf 	.word	0x080065cf
 8004bf8:	7ff00000 	.word	0x7ff00000
 8004bfc:	080065c9 	.word	0x080065c9
 8004c00:	080065c0 	.word	0x080065c0
 8004c04:	080065ce 	.word	0x080065ce
 8004c08:	3ff80000 	.word	0x3ff80000
 8004c0c:	080064b0 	.word	0x080064b0
 8004c10:	08006473 	.word	0x08006473
 8004c14:	2401      	movs	r4, #1
 8004c16:	2300      	movs	r3, #0
 8004c18:	940b      	str	r4, [sp, #44]	; 0x2c
 8004c1a:	9322      	str	r3, [sp, #136]	; 0x88
 8004c1c:	f04f 39ff 	mov.w	r9, #4294967295
 8004c20:	2200      	movs	r2, #0
 8004c22:	2312      	movs	r3, #18
 8004c24:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c28:	9223      	str	r2, [sp, #140]	; 0x8c
 8004c2a:	e7b0      	b.n	8004b8e <_dtoa_r+0x266>
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c30:	e7f4      	b.n	8004c1c <_dtoa_r+0x2f4>
 8004c32:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004c36:	464b      	mov	r3, r9
 8004c38:	f8cd 9020 	str.w	r9, [sp, #32]
 8004c3c:	e7a7      	b.n	8004b8e <_dtoa_r+0x266>
 8004c3e:	3101      	adds	r1, #1
 8004c40:	6041      	str	r1, [r0, #4]
 8004c42:	0052      	lsls	r2, r2, #1
 8004c44:	e7a7      	b.n	8004b96 <_dtoa_r+0x26e>
 8004c46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004c48:	9a03      	ldr	r2, [sp, #12]
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	9b08      	ldr	r3, [sp, #32]
 8004c4e:	2b0e      	cmp	r3, #14
 8004c50:	f200 80a8 	bhi.w	8004da4 <_dtoa_r+0x47c>
 8004c54:	2c00      	cmp	r4, #0
 8004c56:	f000 80a5 	beq.w	8004da4 <_dtoa_r+0x47c>
 8004c5a:	f1ba 0f00 	cmp.w	sl, #0
 8004c5e:	dd34      	ble.n	8004cca <_dtoa_r+0x3a2>
 8004c60:	4a9a      	ldr	r2, [pc, #616]	; (8004ecc <_dtoa_r+0x5a4>)
 8004c62:	f00a 030f 	and.w	r3, sl, #15
 8004c66:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c6a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004c6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c72:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004c76:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004c7a:	d016      	beq.n	8004caa <_dtoa_r+0x382>
 8004c7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c80:	4b93      	ldr	r3, [pc, #588]	; (8004ed0 <_dtoa_r+0x5a8>)
 8004c82:	2703      	movs	r7, #3
 8004c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c88:	f7fb fd48 	bl	800071c <__aeabi_ddiv>
 8004c8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c90:	f004 040f 	and.w	r4, r4, #15
 8004c94:	4e8e      	ldr	r6, [pc, #568]	; (8004ed0 <_dtoa_r+0x5a8>)
 8004c96:	b954      	cbnz	r4, 8004cae <_dtoa_r+0x386>
 8004c98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ca0:	f7fb fd3c 	bl	800071c <__aeabi_ddiv>
 8004ca4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ca8:	e029      	b.n	8004cfe <_dtoa_r+0x3d6>
 8004caa:	2702      	movs	r7, #2
 8004cac:	e7f2      	b.n	8004c94 <_dtoa_r+0x36c>
 8004cae:	07e1      	lsls	r1, r4, #31
 8004cb0:	d508      	bpl.n	8004cc4 <_dtoa_r+0x39c>
 8004cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004cba:	f7fb fc05 	bl	80004c8 <__aeabi_dmul>
 8004cbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004cc2:	3701      	adds	r7, #1
 8004cc4:	1064      	asrs	r4, r4, #1
 8004cc6:	3608      	adds	r6, #8
 8004cc8:	e7e5      	b.n	8004c96 <_dtoa_r+0x36e>
 8004cca:	f000 80a5 	beq.w	8004e18 <_dtoa_r+0x4f0>
 8004cce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cd2:	f1ca 0400 	rsb	r4, sl, #0
 8004cd6:	4b7d      	ldr	r3, [pc, #500]	; (8004ecc <_dtoa_r+0x5a4>)
 8004cd8:	f004 020f 	and.w	r2, r4, #15
 8004cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f7fb fbf0 	bl	80004c8 <__aeabi_dmul>
 8004ce8:	2702      	movs	r7, #2
 8004cea:	2300      	movs	r3, #0
 8004cec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cf0:	4e77      	ldr	r6, [pc, #476]	; (8004ed0 <_dtoa_r+0x5a8>)
 8004cf2:	1124      	asrs	r4, r4, #4
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	f040 8084 	bne.w	8004e02 <_dtoa_r+0x4da>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1d2      	bne.n	8004ca4 <_dtoa_r+0x37c>
 8004cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 808b 	beq.w	8004e1c <_dtoa_r+0x4f4>
 8004d06:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004d0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d12:	2200      	movs	r2, #0
 8004d14:	4b6f      	ldr	r3, [pc, #444]	; (8004ed4 <_dtoa_r+0x5ac>)
 8004d16:	f7fb fe49 	bl	80009ac <__aeabi_dcmplt>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d07e      	beq.n	8004e1c <_dtoa_r+0x4f4>
 8004d1e:	9b08      	ldr	r3, [sp, #32]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d07b      	beq.n	8004e1c <_dtoa_r+0x4f4>
 8004d24:	f1b9 0f00 	cmp.w	r9, #0
 8004d28:	dd38      	ble.n	8004d9c <_dtoa_r+0x474>
 8004d2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4b69      	ldr	r3, [pc, #420]	; (8004ed8 <_dtoa_r+0x5b0>)
 8004d32:	f7fb fbc9 	bl	80004c8 <__aeabi_dmul>
 8004d36:	464c      	mov	r4, r9
 8004d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d3c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004d40:	3701      	adds	r7, #1
 8004d42:	4638      	mov	r0, r7
 8004d44:	f7fb fb56 	bl	80003f4 <__aeabi_i2d>
 8004d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d4c:	f7fb fbbc 	bl	80004c8 <__aeabi_dmul>
 8004d50:	2200      	movs	r2, #0
 8004d52:	4b62      	ldr	r3, [pc, #392]	; (8004edc <_dtoa_r+0x5b4>)
 8004d54:	f7fb fa02 	bl	800015c <__adddf3>
 8004d58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004d5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004d60:	9611      	str	r6, [sp, #68]	; 0x44
 8004d62:	2c00      	cmp	r4, #0
 8004d64:	d15d      	bne.n	8004e22 <_dtoa_r+0x4fa>
 8004d66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	4b5c      	ldr	r3, [pc, #368]	; (8004ee0 <_dtoa_r+0x5b8>)
 8004d6e:	f7fb f9f3 	bl	8000158 <__aeabi_dsub>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d7a:	4633      	mov	r3, r6
 8004d7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d7e:	f7fb fe33 	bl	80009e8 <__aeabi_dcmpgt>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	f040 829c 	bne.w	80052c0 <_dtoa_r+0x998>
 8004d88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d8e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004d92:	f7fb fe0b 	bl	80009ac <__aeabi_dcmplt>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f040 8290 	bne.w	80052bc <_dtoa_r+0x994>
 8004d9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004da0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004da4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f2c0 8152 	blt.w	8005050 <_dtoa_r+0x728>
 8004dac:	f1ba 0f0e 	cmp.w	sl, #14
 8004db0:	f300 814e 	bgt.w	8005050 <_dtoa_r+0x728>
 8004db4:	4b45      	ldr	r3, [pc, #276]	; (8004ecc <_dtoa_r+0x5a4>)
 8004db6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004dba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dbe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004dc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f280 80db 	bge.w	8004f80 <_dtoa_r+0x658>
 8004dca:	9b08      	ldr	r3, [sp, #32]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f300 80d7 	bgt.w	8004f80 <_dtoa_r+0x658>
 8004dd2:	f040 8272 	bne.w	80052ba <_dtoa_r+0x992>
 8004dd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	4b40      	ldr	r3, [pc, #256]	; (8004ee0 <_dtoa_r+0x5b8>)
 8004dde:	f7fb fb73 	bl	80004c8 <__aeabi_dmul>
 8004de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004de6:	f7fb fdf5 	bl	80009d4 <__aeabi_dcmpge>
 8004dea:	9c08      	ldr	r4, [sp, #32]
 8004dec:	4626      	mov	r6, r4
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f040 8248 	bne.w	8005284 <_dtoa_r+0x95c>
 8004df4:	2331      	movs	r3, #49	; 0x31
 8004df6:	9f03      	ldr	r7, [sp, #12]
 8004df8:	f10a 0a01 	add.w	sl, sl, #1
 8004dfc:	f807 3b01 	strb.w	r3, [r7], #1
 8004e00:	e244      	b.n	800528c <_dtoa_r+0x964>
 8004e02:	07e2      	lsls	r2, r4, #31
 8004e04:	d505      	bpl.n	8004e12 <_dtoa_r+0x4ea>
 8004e06:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e0a:	f7fb fb5d 	bl	80004c8 <__aeabi_dmul>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	3701      	adds	r7, #1
 8004e12:	1064      	asrs	r4, r4, #1
 8004e14:	3608      	adds	r6, #8
 8004e16:	e76d      	b.n	8004cf4 <_dtoa_r+0x3cc>
 8004e18:	2702      	movs	r7, #2
 8004e1a:	e770      	b.n	8004cfe <_dtoa_r+0x3d6>
 8004e1c:	46d0      	mov	r8, sl
 8004e1e:	9c08      	ldr	r4, [sp, #32]
 8004e20:	e78f      	b.n	8004d42 <_dtoa_r+0x41a>
 8004e22:	9903      	ldr	r1, [sp, #12]
 8004e24:	4b29      	ldr	r3, [pc, #164]	; (8004ecc <_dtoa_r+0x5a4>)
 8004e26:	4421      	add	r1, r4
 8004e28:	9112      	str	r1, [sp, #72]	; 0x48
 8004e2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e30:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004e34:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e38:	2900      	cmp	r1, #0
 8004e3a:	d055      	beq.n	8004ee8 <_dtoa_r+0x5c0>
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	4929      	ldr	r1, [pc, #164]	; (8004ee4 <_dtoa_r+0x5bc>)
 8004e40:	f7fb fc6c 	bl	800071c <__aeabi_ddiv>
 8004e44:	463b      	mov	r3, r7
 8004e46:	4632      	mov	r2, r6
 8004e48:	f7fb f986 	bl	8000158 <__aeabi_dsub>
 8004e4c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e50:	9f03      	ldr	r7, [sp, #12]
 8004e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e56:	f7fb fdd1 	bl	80009fc <__aeabi_d2iz>
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	f7fb faca 	bl	80003f4 <__aeabi_i2d>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e68:	f7fb f976 	bl	8000158 <__aeabi_dsub>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	3430      	adds	r4, #48	; 0x30
 8004e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e7a:	f807 4b01 	strb.w	r4, [r7], #1
 8004e7e:	f7fb fd95 	bl	80009ac <__aeabi_dcmplt>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	d174      	bne.n	8004f70 <_dtoa_r+0x648>
 8004e86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e8a:	2000      	movs	r0, #0
 8004e8c:	4911      	ldr	r1, [pc, #68]	; (8004ed4 <_dtoa_r+0x5ac>)
 8004e8e:	f7fb f963 	bl	8000158 <__aeabi_dsub>
 8004e92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e96:	f7fb fd89 	bl	80009ac <__aeabi_dcmplt>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	f040 80b7 	bne.w	800500e <_dtoa_r+0x6e6>
 8004ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ea2:	429f      	cmp	r7, r3
 8004ea4:	f43f af7a 	beq.w	8004d9c <_dtoa_r+0x474>
 8004ea8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eac:	2200      	movs	r2, #0
 8004eae:	4b0a      	ldr	r3, [pc, #40]	; (8004ed8 <_dtoa_r+0x5b0>)
 8004eb0:	f7fb fb0a 	bl	80004c8 <__aeabi_dmul>
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004eba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <_dtoa_r+0x5b0>)
 8004ec0:	f7fb fb02 	bl	80004c8 <__aeabi_dmul>
 8004ec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ec8:	e7c3      	b.n	8004e52 <_dtoa_r+0x52a>
 8004eca:	bf00      	nop
 8004ecc:	080064b0 	.word	0x080064b0
 8004ed0:	08006488 	.word	0x08006488
 8004ed4:	3ff00000 	.word	0x3ff00000
 8004ed8:	40240000 	.word	0x40240000
 8004edc:	401c0000 	.word	0x401c0000
 8004ee0:	40140000 	.word	0x40140000
 8004ee4:	3fe00000 	.word	0x3fe00000
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4639      	mov	r1, r7
 8004eec:	f7fb faec 	bl	80004c8 <__aeabi_dmul>
 8004ef0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ef2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ef6:	9c03      	ldr	r4, [sp, #12]
 8004ef8:	9314      	str	r3, [sp, #80]	; 0x50
 8004efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004efe:	f7fb fd7d 	bl	80009fc <__aeabi_d2iz>
 8004f02:	9015      	str	r0, [sp, #84]	; 0x54
 8004f04:	f7fb fa76 	bl	80003f4 <__aeabi_i2d>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f10:	f7fb f922 	bl	8000158 <__aeabi_dsub>
 8004f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f16:	4606      	mov	r6, r0
 8004f18:	3330      	adds	r3, #48	; 0x30
 8004f1a:	f804 3b01 	strb.w	r3, [r4], #1
 8004f1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f20:	460f      	mov	r7, r1
 8004f22:	429c      	cmp	r4, r3
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	d124      	bne.n	8004f74 <_dtoa_r+0x64c>
 8004f2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f2e:	4bb0      	ldr	r3, [pc, #704]	; (80051f0 <_dtoa_r+0x8c8>)
 8004f30:	f7fb f914 	bl	800015c <__adddf3>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4630      	mov	r0, r6
 8004f3a:	4639      	mov	r1, r7
 8004f3c:	f7fb fd54 	bl	80009e8 <__aeabi_dcmpgt>
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d163      	bne.n	800500c <_dtoa_r+0x6e4>
 8004f44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f48:	2000      	movs	r0, #0
 8004f4a:	49a9      	ldr	r1, [pc, #676]	; (80051f0 <_dtoa_r+0x8c8>)
 8004f4c:	f7fb f904 	bl	8000158 <__aeabi_dsub>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4630      	mov	r0, r6
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb fd28 	bl	80009ac <__aeabi_dcmplt>
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f43f af1d 	beq.w	8004d9c <_dtoa_r+0x474>
 8004f62:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f64:	1e7b      	subs	r3, r7, #1
 8004f66:	9314      	str	r3, [sp, #80]	; 0x50
 8004f68:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004f6c:	2b30      	cmp	r3, #48	; 0x30
 8004f6e:	d0f8      	beq.n	8004f62 <_dtoa_r+0x63a>
 8004f70:	46c2      	mov	sl, r8
 8004f72:	e03b      	b.n	8004fec <_dtoa_r+0x6c4>
 8004f74:	4b9f      	ldr	r3, [pc, #636]	; (80051f4 <_dtoa_r+0x8cc>)
 8004f76:	f7fb faa7 	bl	80004c8 <__aeabi_dmul>
 8004f7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f7e:	e7bc      	b.n	8004efa <_dtoa_r+0x5d2>
 8004f80:	9f03      	ldr	r7, [sp, #12]
 8004f82:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8004f86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	4649      	mov	r1, r9
 8004f8e:	f7fb fbc5 	bl	800071c <__aeabi_ddiv>
 8004f92:	f7fb fd33 	bl	80009fc <__aeabi_d2iz>
 8004f96:	4604      	mov	r4, r0
 8004f98:	f7fb fa2c 	bl	80003f4 <__aeabi_i2d>
 8004f9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fa0:	f7fb fa92 	bl	80004c8 <__aeabi_dmul>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4649      	mov	r1, r9
 8004fac:	f7fb f8d4 	bl	8000158 <__aeabi_dsub>
 8004fb0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8004fb4:	f807 6b01 	strb.w	r6, [r7], #1
 8004fb8:	9e03      	ldr	r6, [sp, #12]
 8004fba:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004fbe:	1bbe      	subs	r6, r7, r6
 8004fc0:	45b4      	cmp	ip, r6
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	d136      	bne.n	8005036 <_dtoa_r+0x70e>
 8004fc8:	f7fb f8c8 	bl	800015c <__adddf3>
 8004fcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4689      	mov	r9, r1
 8004fd4:	f7fb fd08 	bl	80009e8 <__aeabi_dcmpgt>
 8004fd8:	bb58      	cbnz	r0, 8005032 <_dtoa_r+0x70a>
 8004fda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	f7fb fcd9 	bl	8000998 <__aeabi_dcmpeq>
 8004fe6:	b108      	cbz	r0, 8004fec <_dtoa_r+0x6c4>
 8004fe8:	07e1      	lsls	r1, r4, #31
 8004fea:	d422      	bmi.n	8005032 <_dtoa_r+0x70a>
 8004fec:	4628      	mov	r0, r5
 8004fee:	4659      	mov	r1, fp
 8004ff0:	f7fe ffd2 	bl	8003f98 <_Bfree>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	703b      	strb	r3, [r7, #0]
 8004ff8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004ffa:	f10a 0001 	add.w	r0, sl, #1
 8004ffe:	6018      	str	r0, [r3, #0]
 8005000:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005002:	2b00      	cmp	r3, #0
 8005004:	f43f acde 	beq.w	80049c4 <_dtoa_r+0x9c>
 8005008:	601f      	str	r7, [r3, #0]
 800500a:	e4db      	b.n	80049c4 <_dtoa_r+0x9c>
 800500c:	4627      	mov	r7, r4
 800500e:	463b      	mov	r3, r7
 8005010:	461f      	mov	r7, r3
 8005012:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005016:	2a39      	cmp	r2, #57	; 0x39
 8005018:	d107      	bne.n	800502a <_dtoa_r+0x702>
 800501a:	9a03      	ldr	r2, [sp, #12]
 800501c:	429a      	cmp	r2, r3
 800501e:	d1f7      	bne.n	8005010 <_dtoa_r+0x6e8>
 8005020:	2230      	movs	r2, #48	; 0x30
 8005022:	9903      	ldr	r1, [sp, #12]
 8005024:	f108 0801 	add.w	r8, r8, #1
 8005028:	700a      	strb	r2, [r1, #0]
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	3201      	adds	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
 8005030:	e79e      	b.n	8004f70 <_dtoa_r+0x648>
 8005032:	46d0      	mov	r8, sl
 8005034:	e7eb      	b.n	800500e <_dtoa_r+0x6e6>
 8005036:	2200      	movs	r2, #0
 8005038:	4b6e      	ldr	r3, [pc, #440]	; (80051f4 <_dtoa_r+0x8cc>)
 800503a:	f7fb fa45 	bl	80004c8 <__aeabi_dmul>
 800503e:	2200      	movs	r2, #0
 8005040:	2300      	movs	r3, #0
 8005042:	4680      	mov	r8, r0
 8005044:	4689      	mov	r9, r1
 8005046:	f7fb fca7 	bl	8000998 <__aeabi_dcmpeq>
 800504a:	2800      	cmp	r0, #0
 800504c:	d09b      	beq.n	8004f86 <_dtoa_r+0x65e>
 800504e:	e7cd      	b.n	8004fec <_dtoa_r+0x6c4>
 8005050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005052:	2a00      	cmp	r2, #0
 8005054:	f000 80d0 	beq.w	80051f8 <_dtoa_r+0x8d0>
 8005058:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800505a:	2a01      	cmp	r2, #1
 800505c:	f300 80ae 	bgt.w	80051bc <_dtoa_r+0x894>
 8005060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005062:	2a00      	cmp	r2, #0
 8005064:	f000 80a6 	beq.w	80051b4 <_dtoa_r+0x88c>
 8005068:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800506c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800506e:	9f06      	ldr	r7, [sp, #24]
 8005070:	9a06      	ldr	r2, [sp, #24]
 8005072:	2101      	movs	r1, #1
 8005074:	441a      	add	r2, r3
 8005076:	9206      	str	r2, [sp, #24]
 8005078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800507a:	4628      	mov	r0, r5
 800507c:	441a      	add	r2, r3
 800507e:	9209      	str	r2, [sp, #36]	; 0x24
 8005080:	f7ff f840 	bl	8004104 <__i2b>
 8005084:	4606      	mov	r6, r0
 8005086:	2f00      	cmp	r7, #0
 8005088:	dd0c      	ble.n	80050a4 <_dtoa_r+0x77c>
 800508a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	dd09      	ble.n	80050a4 <_dtoa_r+0x77c>
 8005090:	42bb      	cmp	r3, r7
 8005092:	bfa8      	it	ge
 8005094:	463b      	movge	r3, r7
 8005096:	9a06      	ldr	r2, [sp, #24]
 8005098:	1aff      	subs	r7, r7, r3
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	9206      	str	r2, [sp, #24]
 800509e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	9309      	str	r3, [sp, #36]	; 0x24
 80050a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a6:	b1f3      	cbz	r3, 80050e6 <_dtoa_r+0x7be>
 80050a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80a8 	beq.w	8005200 <_dtoa_r+0x8d8>
 80050b0:	2c00      	cmp	r4, #0
 80050b2:	dd10      	ble.n	80050d6 <_dtoa_r+0x7ae>
 80050b4:	4631      	mov	r1, r6
 80050b6:	4622      	mov	r2, r4
 80050b8:	4628      	mov	r0, r5
 80050ba:	f7ff f8e1 	bl	8004280 <__pow5mult>
 80050be:	465a      	mov	r2, fp
 80050c0:	4601      	mov	r1, r0
 80050c2:	4606      	mov	r6, r0
 80050c4:	4628      	mov	r0, r5
 80050c6:	f7ff f833 	bl	8004130 <__multiply>
 80050ca:	4680      	mov	r8, r0
 80050cc:	4659      	mov	r1, fp
 80050ce:	4628      	mov	r0, r5
 80050d0:	f7fe ff62 	bl	8003f98 <_Bfree>
 80050d4:	46c3      	mov	fp, r8
 80050d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d8:	1b1a      	subs	r2, r3, r4
 80050da:	d004      	beq.n	80050e6 <_dtoa_r+0x7be>
 80050dc:	4659      	mov	r1, fp
 80050de:	4628      	mov	r0, r5
 80050e0:	f7ff f8ce 	bl	8004280 <__pow5mult>
 80050e4:	4683      	mov	fp, r0
 80050e6:	2101      	movs	r1, #1
 80050e8:	4628      	mov	r0, r5
 80050ea:	f7ff f80b 	bl	8004104 <__i2b>
 80050ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050f0:	4604      	mov	r4, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f340 8086 	ble.w	8005204 <_dtoa_r+0x8dc>
 80050f8:	461a      	mov	r2, r3
 80050fa:	4601      	mov	r1, r0
 80050fc:	4628      	mov	r0, r5
 80050fe:	f7ff f8bf 	bl	8004280 <__pow5mult>
 8005102:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005104:	4604      	mov	r4, r0
 8005106:	2b01      	cmp	r3, #1
 8005108:	dd7f      	ble.n	800520a <_dtoa_r+0x8e2>
 800510a:	f04f 0800 	mov.w	r8, #0
 800510e:	6923      	ldr	r3, [r4, #16]
 8005110:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005114:	6918      	ldr	r0, [r3, #16]
 8005116:	f7fe ffa7 	bl	8004068 <__hi0bits>
 800511a:	f1c0 0020 	rsb	r0, r0, #32
 800511e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005120:	4418      	add	r0, r3
 8005122:	f010 001f 	ands.w	r0, r0, #31
 8005126:	f000 8092 	beq.w	800524e <_dtoa_r+0x926>
 800512a:	f1c0 0320 	rsb	r3, r0, #32
 800512e:	2b04      	cmp	r3, #4
 8005130:	f340 808a 	ble.w	8005248 <_dtoa_r+0x920>
 8005134:	f1c0 001c 	rsb	r0, r0, #28
 8005138:	9b06      	ldr	r3, [sp, #24]
 800513a:	4407      	add	r7, r0
 800513c:	4403      	add	r3, r0
 800513e:	9306      	str	r3, [sp, #24]
 8005140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005142:	4403      	add	r3, r0
 8005144:	9309      	str	r3, [sp, #36]	; 0x24
 8005146:	9b06      	ldr	r3, [sp, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	dd05      	ble.n	8005158 <_dtoa_r+0x830>
 800514c:	4659      	mov	r1, fp
 800514e:	461a      	mov	r2, r3
 8005150:	4628      	mov	r0, r5
 8005152:	f7ff f8ef 	bl	8004334 <__lshift>
 8005156:	4683      	mov	fp, r0
 8005158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	dd05      	ble.n	800516a <_dtoa_r+0x842>
 800515e:	4621      	mov	r1, r4
 8005160:	461a      	mov	r2, r3
 8005162:	4628      	mov	r0, r5
 8005164:	f7ff f8e6 	bl	8004334 <__lshift>
 8005168:	4604      	mov	r4, r0
 800516a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d070      	beq.n	8005252 <_dtoa_r+0x92a>
 8005170:	4621      	mov	r1, r4
 8005172:	4658      	mov	r0, fp
 8005174:	f7ff f94e 	bl	8004414 <__mcmp>
 8005178:	2800      	cmp	r0, #0
 800517a:	da6a      	bge.n	8005252 <_dtoa_r+0x92a>
 800517c:	2300      	movs	r3, #0
 800517e:	4659      	mov	r1, fp
 8005180:	220a      	movs	r2, #10
 8005182:	4628      	mov	r0, r5
 8005184:	f7fe ff2a 	bl	8003fdc <__multadd>
 8005188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800518a:	4683      	mov	fp, r0
 800518c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 8194 	beq.w	80054be <_dtoa_r+0xb96>
 8005196:	4631      	mov	r1, r6
 8005198:	2300      	movs	r3, #0
 800519a:	220a      	movs	r2, #10
 800519c:	4628      	mov	r0, r5
 800519e:	f7fe ff1d 	bl	8003fdc <__multadd>
 80051a2:	f1b9 0f00 	cmp.w	r9, #0
 80051a6:	4606      	mov	r6, r0
 80051a8:	f300 8093 	bgt.w	80052d2 <_dtoa_r+0x9aa>
 80051ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	dc57      	bgt.n	8005262 <_dtoa_r+0x93a>
 80051b2:	e08e      	b.n	80052d2 <_dtoa_r+0x9aa>
 80051b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051ba:	e757      	b.n	800506c <_dtoa_r+0x744>
 80051bc:	9b08      	ldr	r3, [sp, #32]
 80051be:	1e5c      	subs	r4, r3, #1
 80051c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c2:	42a3      	cmp	r3, r4
 80051c4:	bfb7      	itett	lt
 80051c6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80051c8:	1b1c      	subge	r4, r3, r4
 80051ca:	1ae2      	sublt	r2, r4, r3
 80051cc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80051ce:	bfbe      	ittt	lt
 80051d0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80051d2:	189b      	addlt	r3, r3, r2
 80051d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80051d6:	9b08      	ldr	r3, [sp, #32]
 80051d8:	bfb8      	it	lt
 80051da:	2400      	movlt	r4, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	bfbb      	ittet	lt
 80051e0:	9b06      	ldrlt	r3, [sp, #24]
 80051e2:	9a08      	ldrlt	r2, [sp, #32]
 80051e4:	9f06      	ldrge	r7, [sp, #24]
 80051e6:	1a9f      	sublt	r7, r3, r2
 80051e8:	bfac      	ite	ge
 80051ea:	9b08      	ldrge	r3, [sp, #32]
 80051ec:	2300      	movlt	r3, #0
 80051ee:	e73f      	b.n	8005070 <_dtoa_r+0x748>
 80051f0:	3fe00000 	.word	0x3fe00000
 80051f4:	40240000 	.word	0x40240000
 80051f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051fa:	9f06      	ldr	r7, [sp, #24]
 80051fc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80051fe:	e742      	b.n	8005086 <_dtoa_r+0x75e>
 8005200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005202:	e76b      	b.n	80050dc <_dtoa_r+0x7b4>
 8005204:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005206:	2b01      	cmp	r3, #1
 8005208:	dc19      	bgt.n	800523e <_dtoa_r+0x916>
 800520a:	9b04      	ldr	r3, [sp, #16]
 800520c:	b9bb      	cbnz	r3, 800523e <_dtoa_r+0x916>
 800520e:	9b05      	ldr	r3, [sp, #20]
 8005210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005214:	b99b      	cbnz	r3, 800523e <_dtoa_r+0x916>
 8005216:	9b05      	ldr	r3, [sp, #20]
 8005218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800521c:	0d1b      	lsrs	r3, r3, #20
 800521e:	051b      	lsls	r3, r3, #20
 8005220:	b183      	cbz	r3, 8005244 <_dtoa_r+0x91c>
 8005222:	f04f 0801 	mov.w	r8, #1
 8005226:	9b06      	ldr	r3, [sp, #24]
 8005228:	3301      	adds	r3, #1
 800522a:	9306      	str	r3, [sp, #24]
 800522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800522e:	3301      	adds	r3, #1
 8005230:	9309      	str	r3, [sp, #36]	; 0x24
 8005232:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005234:	2b00      	cmp	r3, #0
 8005236:	f47f af6a 	bne.w	800510e <_dtoa_r+0x7e6>
 800523a:	2001      	movs	r0, #1
 800523c:	e76f      	b.n	800511e <_dtoa_r+0x7f6>
 800523e:	f04f 0800 	mov.w	r8, #0
 8005242:	e7f6      	b.n	8005232 <_dtoa_r+0x90a>
 8005244:	4698      	mov	r8, r3
 8005246:	e7f4      	b.n	8005232 <_dtoa_r+0x90a>
 8005248:	f43f af7d 	beq.w	8005146 <_dtoa_r+0x81e>
 800524c:	4618      	mov	r0, r3
 800524e:	301c      	adds	r0, #28
 8005250:	e772      	b.n	8005138 <_dtoa_r+0x810>
 8005252:	9b08      	ldr	r3, [sp, #32]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dc36      	bgt.n	80052c6 <_dtoa_r+0x99e>
 8005258:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800525a:	2b02      	cmp	r3, #2
 800525c:	dd33      	ble.n	80052c6 <_dtoa_r+0x99e>
 800525e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005262:	f1b9 0f00 	cmp.w	r9, #0
 8005266:	d10d      	bne.n	8005284 <_dtoa_r+0x95c>
 8005268:	4621      	mov	r1, r4
 800526a:	464b      	mov	r3, r9
 800526c:	2205      	movs	r2, #5
 800526e:	4628      	mov	r0, r5
 8005270:	f7fe feb4 	bl	8003fdc <__multadd>
 8005274:	4601      	mov	r1, r0
 8005276:	4604      	mov	r4, r0
 8005278:	4658      	mov	r0, fp
 800527a:	f7ff f8cb 	bl	8004414 <__mcmp>
 800527e:	2800      	cmp	r0, #0
 8005280:	f73f adb8 	bgt.w	8004df4 <_dtoa_r+0x4cc>
 8005284:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005286:	9f03      	ldr	r7, [sp, #12]
 8005288:	ea6f 0a03 	mvn.w	sl, r3
 800528c:	f04f 0800 	mov.w	r8, #0
 8005290:	4621      	mov	r1, r4
 8005292:	4628      	mov	r0, r5
 8005294:	f7fe fe80 	bl	8003f98 <_Bfree>
 8005298:	2e00      	cmp	r6, #0
 800529a:	f43f aea7 	beq.w	8004fec <_dtoa_r+0x6c4>
 800529e:	f1b8 0f00 	cmp.w	r8, #0
 80052a2:	d005      	beq.n	80052b0 <_dtoa_r+0x988>
 80052a4:	45b0      	cmp	r8, r6
 80052a6:	d003      	beq.n	80052b0 <_dtoa_r+0x988>
 80052a8:	4641      	mov	r1, r8
 80052aa:	4628      	mov	r0, r5
 80052ac:	f7fe fe74 	bl	8003f98 <_Bfree>
 80052b0:	4631      	mov	r1, r6
 80052b2:	4628      	mov	r0, r5
 80052b4:	f7fe fe70 	bl	8003f98 <_Bfree>
 80052b8:	e698      	b.n	8004fec <_dtoa_r+0x6c4>
 80052ba:	2400      	movs	r4, #0
 80052bc:	4626      	mov	r6, r4
 80052be:	e7e1      	b.n	8005284 <_dtoa_r+0x95c>
 80052c0:	46c2      	mov	sl, r8
 80052c2:	4626      	mov	r6, r4
 80052c4:	e596      	b.n	8004df4 <_dtoa_r+0x4cc>
 80052c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80fd 	beq.w	80054cc <_dtoa_r+0xba4>
 80052d2:	2f00      	cmp	r7, #0
 80052d4:	dd05      	ble.n	80052e2 <_dtoa_r+0x9ba>
 80052d6:	4631      	mov	r1, r6
 80052d8:	463a      	mov	r2, r7
 80052da:	4628      	mov	r0, r5
 80052dc:	f7ff f82a 	bl	8004334 <__lshift>
 80052e0:	4606      	mov	r6, r0
 80052e2:	f1b8 0f00 	cmp.w	r8, #0
 80052e6:	d05c      	beq.n	80053a2 <_dtoa_r+0xa7a>
 80052e8:	4628      	mov	r0, r5
 80052ea:	6871      	ldr	r1, [r6, #4]
 80052ec:	f7fe fe14 	bl	8003f18 <_Balloc>
 80052f0:	4607      	mov	r7, r0
 80052f2:	b928      	cbnz	r0, 8005300 <_dtoa_r+0x9d8>
 80052f4:	4602      	mov	r2, r0
 80052f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80052fa:	4b7f      	ldr	r3, [pc, #508]	; (80054f8 <_dtoa_r+0xbd0>)
 80052fc:	f7ff bb28 	b.w	8004950 <_dtoa_r+0x28>
 8005300:	6932      	ldr	r2, [r6, #16]
 8005302:	f106 010c 	add.w	r1, r6, #12
 8005306:	3202      	adds	r2, #2
 8005308:	0092      	lsls	r2, r2, #2
 800530a:	300c      	adds	r0, #12
 800530c:	f000 f914 	bl	8005538 <memcpy>
 8005310:	2201      	movs	r2, #1
 8005312:	4639      	mov	r1, r7
 8005314:	4628      	mov	r0, r5
 8005316:	f7ff f80d 	bl	8004334 <__lshift>
 800531a:	46b0      	mov	r8, r6
 800531c:	4606      	mov	r6, r0
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	9308      	str	r3, [sp, #32]
 8005324:	9b03      	ldr	r3, [sp, #12]
 8005326:	444b      	add	r3, r9
 8005328:	930a      	str	r3, [sp, #40]	; 0x28
 800532a:	9b04      	ldr	r3, [sp, #16]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	9b08      	ldr	r3, [sp, #32]
 8005334:	4621      	mov	r1, r4
 8005336:	3b01      	subs	r3, #1
 8005338:	4658      	mov	r0, fp
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	f7ff fa68 	bl	8004810 <quorem>
 8005340:	4603      	mov	r3, r0
 8005342:	4641      	mov	r1, r8
 8005344:	3330      	adds	r3, #48	; 0x30
 8005346:	9006      	str	r0, [sp, #24]
 8005348:	4658      	mov	r0, fp
 800534a:	930b      	str	r3, [sp, #44]	; 0x2c
 800534c:	f7ff f862 	bl	8004414 <__mcmp>
 8005350:	4632      	mov	r2, r6
 8005352:	4681      	mov	r9, r0
 8005354:	4621      	mov	r1, r4
 8005356:	4628      	mov	r0, r5
 8005358:	f7ff f878 	bl	800444c <__mdiff>
 800535c:	68c2      	ldr	r2, [r0, #12]
 800535e:	4607      	mov	r7, r0
 8005360:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005362:	bb02      	cbnz	r2, 80053a6 <_dtoa_r+0xa7e>
 8005364:	4601      	mov	r1, r0
 8005366:	4658      	mov	r0, fp
 8005368:	f7ff f854 	bl	8004414 <__mcmp>
 800536c:	4602      	mov	r2, r0
 800536e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005370:	4639      	mov	r1, r7
 8005372:	4628      	mov	r0, r5
 8005374:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005378:	f7fe fe0e 	bl	8003f98 <_Bfree>
 800537c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800537e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005380:	9f08      	ldr	r7, [sp, #32]
 8005382:	ea43 0102 	orr.w	r1, r3, r2
 8005386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005388:	430b      	orrs	r3, r1
 800538a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800538c:	d10d      	bne.n	80053aa <_dtoa_r+0xa82>
 800538e:	2b39      	cmp	r3, #57	; 0x39
 8005390:	d029      	beq.n	80053e6 <_dtoa_r+0xabe>
 8005392:	f1b9 0f00 	cmp.w	r9, #0
 8005396:	dd01      	ble.n	800539c <_dtoa_r+0xa74>
 8005398:	9b06      	ldr	r3, [sp, #24]
 800539a:	3331      	adds	r3, #49	; 0x31
 800539c:	9a04      	ldr	r2, [sp, #16]
 800539e:	7013      	strb	r3, [r2, #0]
 80053a0:	e776      	b.n	8005290 <_dtoa_r+0x968>
 80053a2:	4630      	mov	r0, r6
 80053a4:	e7b9      	b.n	800531a <_dtoa_r+0x9f2>
 80053a6:	2201      	movs	r2, #1
 80053a8:	e7e2      	b.n	8005370 <_dtoa_r+0xa48>
 80053aa:	f1b9 0f00 	cmp.w	r9, #0
 80053ae:	db06      	blt.n	80053be <_dtoa_r+0xa96>
 80053b0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80053b2:	ea41 0909 	orr.w	r9, r1, r9
 80053b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053b8:	ea59 0101 	orrs.w	r1, r9, r1
 80053bc:	d120      	bne.n	8005400 <_dtoa_r+0xad8>
 80053be:	2a00      	cmp	r2, #0
 80053c0:	ddec      	ble.n	800539c <_dtoa_r+0xa74>
 80053c2:	4659      	mov	r1, fp
 80053c4:	2201      	movs	r2, #1
 80053c6:	4628      	mov	r0, r5
 80053c8:	9308      	str	r3, [sp, #32]
 80053ca:	f7fe ffb3 	bl	8004334 <__lshift>
 80053ce:	4621      	mov	r1, r4
 80053d0:	4683      	mov	fp, r0
 80053d2:	f7ff f81f 	bl	8004414 <__mcmp>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	9b08      	ldr	r3, [sp, #32]
 80053da:	dc02      	bgt.n	80053e2 <_dtoa_r+0xaba>
 80053dc:	d1de      	bne.n	800539c <_dtoa_r+0xa74>
 80053de:	07da      	lsls	r2, r3, #31
 80053e0:	d5dc      	bpl.n	800539c <_dtoa_r+0xa74>
 80053e2:	2b39      	cmp	r3, #57	; 0x39
 80053e4:	d1d8      	bne.n	8005398 <_dtoa_r+0xa70>
 80053e6:	2339      	movs	r3, #57	; 0x39
 80053e8:	9a04      	ldr	r2, [sp, #16]
 80053ea:	7013      	strb	r3, [r2, #0]
 80053ec:	463b      	mov	r3, r7
 80053ee:	461f      	mov	r7, r3
 80053f0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	2a39      	cmp	r2, #57	; 0x39
 80053f8:	d050      	beq.n	800549c <_dtoa_r+0xb74>
 80053fa:	3201      	adds	r2, #1
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e747      	b.n	8005290 <_dtoa_r+0x968>
 8005400:	2a00      	cmp	r2, #0
 8005402:	dd03      	ble.n	800540c <_dtoa_r+0xae4>
 8005404:	2b39      	cmp	r3, #57	; 0x39
 8005406:	d0ee      	beq.n	80053e6 <_dtoa_r+0xabe>
 8005408:	3301      	adds	r3, #1
 800540a:	e7c7      	b.n	800539c <_dtoa_r+0xa74>
 800540c:	9a08      	ldr	r2, [sp, #32]
 800540e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005410:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005414:	428a      	cmp	r2, r1
 8005416:	d02a      	beq.n	800546e <_dtoa_r+0xb46>
 8005418:	4659      	mov	r1, fp
 800541a:	2300      	movs	r3, #0
 800541c:	220a      	movs	r2, #10
 800541e:	4628      	mov	r0, r5
 8005420:	f7fe fddc 	bl	8003fdc <__multadd>
 8005424:	45b0      	cmp	r8, r6
 8005426:	4683      	mov	fp, r0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	f04f 020a 	mov.w	r2, #10
 8005430:	4641      	mov	r1, r8
 8005432:	4628      	mov	r0, r5
 8005434:	d107      	bne.n	8005446 <_dtoa_r+0xb1e>
 8005436:	f7fe fdd1 	bl	8003fdc <__multadd>
 800543a:	4680      	mov	r8, r0
 800543c:	4606      	mov	r6, r0
 800543e:	9b08      	ldr	r3, [sp, #32]
 8005440:	3301      	adds	r3, #1
 8005442:	9308      	str	r3, [sp, #32]
 8005444:	e775      	b.n	8005332 <_dtoa_r+0xa0a>
 8005446:	f7fe fdc9 	bl	8003fdc <__multadd>
 800544a:	4631      	mov	r1, r6
 800544c:	4680      	mov	r8, r0
 800544e:	2300      	movs	r3, #0
 8005450:	220a      	movs	r2, #10
 8005452:	4628      	mov	r0, r5
 8005454:	f7fe fdc2 	bl	8003fdc <__multadd>
 8005458:	4606      	mov	r6, r0
 800545a:	e7f0      	b.n	800543e <_dtoa_r+0xb16>
 800545c:	f1b9 0f00 	cmp.w	r9, #0
 8005460:	bfcc      	ite	gt
 8005462:	464f      	movgt	r7, r9
 8005464:	2701      	movle	r7, #1
 8005466:	f04f 0800 	mov.w	r8, #0
 800546a:	9a03      	ldr	r2, [sp, #12]
 800546c:	4417      	add	r7, r2
 800546e:	4659      	mov	r1, fp
 8005470:	2201      	movs	r2, #1
 8005472:	4628      	mov	r0, r5
 8005474:	9308      	str	r3, [sp, #32]
 8005476:	f7fe ff5d 	bl	8004334 <__lshift>
 800547a:	4621      	mov	r1, r4
 800547c:	4683      	mov	fp, r0
 800547e:	f7fe ffc9 	bl	8004414 <__mcmp>
 8005482:	2800      	cmp	r0, #0
 8005484:	dcb2      	bgt.n	80053ec <_dtoa_r+0xac4>
 8005486:	d102      	bne.n	800548e <_dtoa_r+0xb66>
 8005488:	9b08      	ldr	r3, [sp, #32]
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d4ae      	bmi.n	80053ec <_dtoa_r+0xac4>
 800548e:	463b      	mov	r3, r7
 8005490:	461f      	mov	r7, r3
 8005492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005496:	2a30      	cmp	r2, #48	; 0x30
 8005498:	d0fa      	beq.n	8005490 <_dtoa_r+0xb68>
 800549a:	e6f9      	b.n	8005290 <_dtoa_r+0x968>
 800549c:	9a03      	ldr	r2, [sp, #12]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d1a5      	bne.n	80053ee <_dtoa_r+0xac6>
 80054a2:	2331      	movs	r3, #49	; 0x31
 80054a4:	f10a 0a01 	add.w	sl, sl, #1
 80054a8:	e779      	b.n	800539e <_dtoa_r+0xa76>
 80054aa:	4b14      	ldr	r3, [pc, #80]	; (80054fc <_dtoa_r+0xbd4>)
 80054ac:	f7ff baa8 	b.w	8004a00 <_dtoa_r+0xd8>
 80054b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f47f aa81 	bne.w	80049ba <_dtoa_r+0x92>
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <_dtoa_r+0xbd8>)
 80054ba:	f7ff baa1 	b.w	8004a00 <_dtoa_r+0xd8>
 80054be:	f1b9 0f00 	cmp.w	r9, #0
 80054c2:	dc03      	bgt.n	80054cc <_dtoa_r+0xba4>
 80054c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	f73f aecb 	bgt.w	8005262 <_dtoa_r+0x93a>
 80054cc:	9f03      	ldr	r7, [sp, #12]
 80054ce:	4621      	mov	r1, r4
 80054d0:	4658      	mov	r0, fp
 80054d2:	f7ff f99d 	bl	8004810 <quorem>
 80054d6:	9a03      	ldr	r2, [sp, #12]
 80054d8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80054dc:	f807 3b01 	strb.w	r3, [r7], #1
 80054e0:	1aba      	subs	r2, r7, r2
 80054e2:	4591      	cmp	r9, r2
 80054e4:	ddba      	ble.n	800545c <_dtoa_r+0xb34>
 80054e6:	4659      	mov	r1, fp
 80054e8:	2300      	movs	r3, #0
 80054ea:	220a      	movs	r2, #10
 80054ec:	4628      	mov	r0, r5
 80054ee:	f7fe fd75 	bl	8003fdc <__multadd>
 80054f2:	4683      	mov	fp, r0
 80054f4:	e7eb      	b.n	80054ce <_dtoa_r+0xba6>
 80054f6:	bf00      	nop
 80054f8:	08006473 	.word	0x08006473
 80054fc:	080065cd 	.word	0x080065cd
 8005500:	080065c0 	.word	0x080065c0

08005504 <fiprintf>:
 8005504:	b40e      	push	{r1, r2, r3}
 8005506:	b503      	push	{r0, r1, lr}
 8005508:	4601      	mov	r1, r0
 800550a:	ab03      	add	r3, sp, #12
 800550c:	4805      	ldr	r0, [pc, #20]	; (8005524 <fiprintf+0x20>)
 800550e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	f000 f899 	bl	800564c <_vfiprintf_r>
 800551a:	b002      	add	sp, #8
 800551c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005520:	b003      	add	sp, #12
 8005522:	4770      	bx	lr
 8005524:	2000000c 	.word	0x2000000c

08005528 <malloc>:
 8005528:	4b02      	ldr	r3, [pc, #8]	; (8005534 <malloc+0xc>)
 800552a:	4601      	mov	r1, r0
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	f7ff b8c5 	b.w	80046bc <_malloc_r>
 8005532:	bf00      	nop
 8005534:	2000000c 	.word	0x2000000c

08005538 <memcpy>:
 8005538:	440a      	add	r2, r1
 800553a:	4291      	cmp	r1, r2
 800553c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005540:	d100      	bne.n	8005544 <memcpy+0xc>
 8005542:	4770      	bx	lr
 8005544:	b510      	push	{r4, lr}
 8005546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800554a:	4291      	cmp	r1, r2
 800554c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005550:	d1f9      	bne.n	8005546 <memcpy+0xe>
 8005552:	bd10      	pop	{r4, pc}

08005554 <__malloc_lock>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__malloc_lock+0x8>)
 8005556:	f000 bdbb 	b.w	80060d0 <__retarget_lock_acquire_recursive>
 800555a:	bf00      	nop
 800555c:	20000124 	.word	0x20000124

08005560 <__malloc_unlock>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__malloc_unlock+0x8>)
 8005562:	f000 bdb6 	b.w	80060d2 <__retarget_lock_release_recursive>
 8005566:	bf00      	nop
 8005568:	20000124 	.word	0x20000124

0800556c <_free_r>:
 800556c:	b538      	push	{r3, r4, r5, lr}
 800556e:	4605      	mov	r5, r0
 8005570:	2900      	cmp	r1, #0
 8005572:	d040      	beq.n	80055f6 <_free_r+0x8a>
 8005574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005578:	1f0c      	subs	r4, r1, #4
 800557a:	2b00      	cmp	r3, #0
 800557c:	bfb8      	it	lt
 800557e:	18e4      	addlt	r4, r4, r3
 8005580:	f7ff ffe8 	bl	8005554 <__malloc_lock>
 8005584:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <_free_r+0x8c>)
 8005586:	6813      	ldr	r3, [r2, #0]
 8005588:	b933      	cbnz	r3, 8005598 <_free_r+0x2c>
 800558a:	6063      	str	r3, [r4, #4]
 800558c:	6014      	str	r4, [r2, #0]
 800558e:	4628      	mov	r0, r5
 8005590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005594:	f7ff bfe4 	b.w	8005560 <__malloc_unlock>
 8005598:	42a3      	cmp	r3, r4
 800559a:	d908      	bls.n	80055ae <_free_r+0x42>
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	1821      	adds	r1, r4, r0
 80055a0:	428b      	cmp	r3, r1
 80055a2:	bf01      	itttt	eq
 80055a4:	6819      	ldreq	r1, [r3, #0]
 80055a6:	685b      	ldreq	r3, [r3, #4]
 80055a8:	1809      	addeq	r1, r1, r0
 80055aa:	6021      	streq	r1, [r4, #0]
 80055ac:	e7ed      	b.n	800558a <_free_r+0x1e>
 80055ae:	461a      	mov	r2, r3
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	b10b      	cbz	r3, 80055b8 <_free_r+0x4c>
 80055b4:	42a3      	cmp	r3, r4
 80055b6:	d9fa      	bls.n	80055ae <_free_r+0x42>
 80055b8:	6811      	ldr	r1, [r2, #0]
 80055ba:	1850      	adds	r0, r2, r1
 80055bc:	42a0      	cmp	r0, r4
 80055be:	d10b      	bne.n	80055d8 <_free_r+0x6c>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	4401      	add	r1, r0
 80055c4:	1850      	adds	r0, r2, r1
 80055c6:	4283      	cmp	r3, r0
 80055c8:	6011      	str	r1, [r2, #0]
 80055ca:	d1e0      	bne.n	800558e <_free_r+0x22>
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	4401      	add	r1, r0
 80055d2:	6011      	str	r1, [r2, #0]
 80055d4:	6053      	str	r3, [r2, #4]
 80055d6:	e7da      	b.n	800558e <_free_r+0x22>
 80055d8:	d902      	bls.n	80055e0 <_free_r+0x74>
 80055da:	230c      	movs	r3, #12
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	e7d6      	b.n	800558e <_free_r+0x22>
 80055e0:	6820      	ldr	r0, [r4, #0]
 80055e2:	1821      	adds	r1, r4, r0
 80055e4:	428b      	cmp	r3, r1
 80055e6:	bf01      	itttt	eq
 80055e8:	6819      	ldreq	r1, [r3, #0]
 80055ea:	685b      	ldreq	r3, [r3, #4]
 80055ec:	1809      	addeq	r1, r1, r0
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	6054      	str	r4, [r2, #4]
 80055f4:	e7cb      	b.n	800558e <_free_r+0x22>
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	20000118 	.word	0x20000118

080055fc <__sfputc_r>:
 80055fc:	6893      	ldr	r3, [r2, #8]
 80055fe:	b410      	push	{r4}
 8005600:	3b01      	subs	r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	6093      	str	r3, [r2, #8]
 8005606:	da07      	bge.n	8005618 <__sfputc_r+0x1c>
 8005608:	6994      	ldr	r4, [r2, #24]
 800560a:	42a3      	cmp	r3, r4
 800560c:	db01      	blt.n	8005612 <__sfputc_r+0x16>
 800560e:	290a      	cmp	r1, #10
 8005610:	d102      	bne.n	8005618 <__sfputc_r+0x1c>
 8005612:	bc10      	pop	{r4}
 8005614:	f000 bae0 	b.w	8005bd8 <__swbuf_r>
 8005618:	6813      	ldr	r3, [r2, #0]
 800561a:	1c58      	adds	r0, r3, #1
 800561c:	6010      	str	r0, [r2, #0]
 800561e:	7019      	strb	r1, [r3, #0]
 8005620:	4608      	mov	r0, r1
 8005622:	bc10      	pop	{r4}
 8005624:	4770      	bx	lr

08005626 <__sfputs_r>:
 8005626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005628:	4606      	mov	r6, r0
 800562a:	460f      	mov	r7, r1
 800562c:	4614      	mov	r4, r2
 800562e:	18d5      	adds	r5, r2, r3
 8005630:	42ac      	cmp	r4, r5
 8005632:	d101      	bne.n	8005638 <__sfputs_r+0x12>
 8005634:	2000      	movs	r0, #0
 8005636:	e007      	b.n	8005648 <__sfputs_r+0x22>
 8005638:	463a      	mov	r2, r7
 800563a:	4630      	mov	r0, r6
 800563c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005640:	f7ff ffdc 	bl	80055fc <__sfputc_r>
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	d1f3      	bne.n	8005630 <__sfputs_r+0xa>
 8005648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800564c <_vfiprintf_r>:
 800564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005650:	460d      	mov	r5, r1
 8005652:	4614      	mov	r4, r2
 8005654:	4698      	mov	r8, r3
 8005656:	4606      	mov	r6, r0
 8005658:	b09d      	sub	sp, #116	; 0x74
 800565a:	b118      	cbz	r0, 8005664 <_vfiprintf_r+0x18>
 800565c:	6983      	ldr	r3, [r0, #24]
 800565e:	b90b      	cbnz	r3, 8005664 <_vfiprintf_r+0x18>
 8005660:	f000 fc98 	bl	8005f94 <__sinit>
 8005664:	4b89      	ldr	r3, [pc, #548]	; (800588c <_vfiprintf_r+0x240>)
 8005666:	429d      	cmp	r5, r3
 8005668:	d11b      	bne.n	80056a2 <_vfiprintf_r+0x56>
 800566a:	6875      	ldr	r5, [r6, #4]
 800566c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800566e:	07d9      	lsls	r1, r3, #31
 8005670:	d405      	bmi.n	800567e <_vfiprintf_r+0x32>
 8005672:	89ab      	ldrh	r3, [r5, #12]
 8005674:	059a      	lsls	r2, r3, #22
 8005676:	d402      	bmi.n	800567e <_vfiprintf_r+0x32>
 8005678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800567a:	f000 fd29 	bl	80060d0 <__retarget_lock_acquire_recursive>
 800567e:	89ab      	ldrh	r3, [r5, #12]
 8005680:	071b      	lsls	r3, r3, #28
 8005682:	d501      	bpl.n	8005688 <_vfiprintf_r+0x3c>
 8005684:	692b      	ldr	r3, [r5, #16]
 8005686:	b9eb      	cbnz	r3, 80056c4 <_vfiprintf_r+0x78>
 8005688:	4629      	mov	r1, r5
 800568a:	4630      	mov	r0, r6
 800568c:	f000 faf6 	bl	8005c7c <__swsetup_r>
 8005690:	b1c0      	cbz	r0, 80056c4 <_vfiprintf_r+0x78>
 8005692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005694:	07dc      	lsls	r4, r3, #31
 8005696:	d50e      	bpl.n	80056b6 <_vfiprintf_r+0x6a>
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	b01d      	add	sp, #116	; 0x74
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a2:	4b7b      	ldr	r3, [pc, #492]	; (8005890 <_vfiprintf_r+0x244>)
 80056a4:	429d      	cmp	r5, r3
 80056a6:	d101      	bne.n	80056ac <_vfiprintf_r+0x60>
 80056a8:	68b5      	ldr	r5, [r6, #8]
 80056aa:	e7df      	b.n	800566c <_vfiprintf_r+0x20>
 80056ac:	4b79      	ldr	r3, [pc, #484]	; (8005894 <_vfiprintf_r+0x248>)
 80056ae:	429d      	cmp	r5, r3
 80056b0:	bf08      	it	eq
 80056b2:	68f5      	ldreq	r5, [r6, #12]
 80056b4:	e7da      	b.n	800566c <_vfiprintf_r+0x20>
 80056b6:	89ab      	ldrh	r3, [r5, #12]
 80056b8:	0598      	lsls	r0, r3, #22
 80056ba:	d4ed      	bmi.n	8005698 <_vfiprintf_r+0x4c>
 80056bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056be:	f000 fd08 	bl	80060d2 <__retarget_lock_release_recursive>
 80056c2:	e7e9      	b.n	8005698 <_vfiprintf_r+0x4c>
 80056c4:	2300      	movs	r3, #0
 80056c6:	9309      	str	r3, [sp, #36]	; 0x24
 80056c8:	2320      	movs	r3, #32
 80056ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056ce:	2330      	movs	r3, #48	; 0x30
 80056d0:	f04f 0901 	mov.w	r9, #1
 80056d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005898 <_vfiprintf_r+0x24c>
 80056dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056e0:	4623      	mov	r3, r4
 80056e2:	469a      	mov	sl, r3
 80056e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e8:	b10a      	cbz	r2, 80056ee <_vfiprintf_r+0xa2>
 80056ea:	2a25      	cmp	r2, #37	; 0x25
 80056ec:	d1f9      	bne.n	80056e2 <_vfiprintf_r+0x96>
 80056ee:	ebba 0b04 	subs.w	fp, sl, r4
 80056f2:	d00b      	beq.n	800570c <_vfiprintf_r+0xc0>
 80056f4:	465b      	mov	r3, fp
 80056f6:	4622      	mov	r2, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7ff ff93 	bl	8005626 <__sfputs_r>
 8005700:	3001      	adds	r0, #1
 8005702:	f000 80aa 	beq.w	800585a <_vfiprintf_r+0x20e>
 8005706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005708:	445a      	add	r2, fp
 800570a:	9209      	str	r2, [sp, #36]	; 0x24
 800570c:	f89a 3000 	ldrb.w	r3, [sl]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 80a2 	beq.w	800585a <_vfiprintf_r+0x20e>
 8005716:	2300      	movs	r3, #0
 8005718:	f04f 32ff 	mov.w	r2, #4294967295
 800571c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005720:	f10a 0a01 	add.w	sl, sl, #1
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	9307      	str	r3, [sp, #28]
 8005728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800572c:	931a      	str	r3, [sp, #104]	; 0x68
 800572e:	4654      	mov	r4, sl
 8005730:	2205      	movs	r2, #5
 8005732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005736:	4858      	ldr	r0, [pc, #352]	; (8005898 <_vfiprintf_r+0x24c>)
 8005738:	f000 fd32 	bl	80061a0 <memchr>
 800573c:	9a04      	ldr	r2, [sp, #16]
 800573e:	b9d8      	cbnz	r0, 8005778 <_vfiprintf_r+0x12c>
 8005740:	06d1      	lsls	r1, r2, #27
 8005742:	bf44      	itt	mi
 8005744:	2320      	movmi	r3, #32
 8005746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800574a:	0713      	lsls	r3, r2, #28
 800574c:	bf44      	itt	mi
 800574e:	232b      	movmi	r3, #43	; 0x2b
 8005750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005754:	f89a 3000 	ldrb.w	r3, [sl]
 8005758:	2b2a      	cmp	r3, #42	; 0x2a
 800575a:	d015      	beq.n	8005788 <_vfiprintf_r+0x13c>
 800575c:	4654      	mov	r4, sl
 800575e:	2000      	movs	r0, #0
 8005760:	f04f 0c0a 	mov.w	ip, #10
 8005764:	9a07      	ldr	r2, [sp, #28]
 8005766:	4621      	mov	r1, r4
 8005768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800576c:	3b30      	subs	r3, #48	; 0x30
 800576e:	2b09      	cmp	r3, #9
 8005770:	d94e      	bls.n	8005810 <_vfiprintf_r+0x1c4>
 8005772:	b1b0      	cbz	r0, 80057a2 <_vfiprintf_r+0x156>
 8005774:	9207      	str	r2, [sp, #28]
 8005776:	e014      	b.n	80057a2 <_vfiprintf_r+0x156>
 8005778:	eba0 0308 	sub.w	r3, r0, r8
 800577c:	fa09 f303 	lsl.w	r3, r9, r3
 8005780:	4313      	orrs	r3, r2
 8005782:	46a2      	mov	sl, r4
 8005784:	9304      	str	r3, [sp, #16]
 8005786:	e7d2      	b.n	800572e <_vfiprintf_r+0xe2>
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	1d19      	adds	r1, r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	9103      	str	r1, [sp, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfbb      	ittet	lt
 8005794:	425b      	neglt	r3, r3
 8005796:	f042 0202 	orrlt.w	r2, r2, #2
 800579a:	9307      	strge	r3, [sp, #28]
 800579c:	9307      	strlt	r3, [sp, #28]
 800579e:	bfb8      	it	lt
 80057a0:	9204      	strlt	r2, [sp, #16]
 80057a2:	7823      	ldrb	r3, [r4, #0]
 80057a4:	2b2e      	cmp	r3, #46	; 0x2e
 80057a6:	d10c      	bne.n	80057c2 <_vfiprintf_r+0x176>
 80057a8:	7863      	ldrb	r3, [r4, #1]
 80057aa:	2b2a      	cmp	r3, #42	; 0x2a
 80057ac:	d135      	bne.n	800581a <_vfiprintf_r+0x1ce>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	3402      	adds	r4, #2
 80057b2:	1d1a      	adds	r2, r3, #4
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	9203      	str	r2, [sp, #12]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	bfb8      	it	lt
 80057bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80057c0:	9305      	str	r3, [sp, #20]
 80057c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800589c <_vfiprintf_r+0x250>
 80057c6:	2203      	movs	r2, #3
 80057c8:	4650      	mov	r0, sl
 80057ca:	7821      	ldrb	r1, [r4, #0]
 80057cc:	f000 fce8 	bl	80061a0 <memchr>
 80057d0:	b140      	cbz	r0, 80057e4 <_vfiprintf_r+0x198>
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	eba0 000a 	sub.w	r0, r0, sl
 80057d8:	fa03 f000 	lsl.w	r0, r3, r0
 80057dc:	9b04      	ldr	r3, [sp, #16]
 80057de:	3401      	adds	r4, #1
 80057e0:	4303      	orrs	r3, r0
 80057e2:	9304      	str	r3, [sp, #16]
 80057e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e8:	2206      	movs	r2, #6
 80057ea:	482d      	ldr	r0, [pc, #180]	; (80058a0 <_vfiprintf_r+0x254>)
 80057ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057f0:	f000 fcd6 	bl	80061a0 <memchr>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d03f      	beq.n	8005878 <_vfiprintf_r+0x22c>
 80057f8:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <_vfiprintf_r+0x258>)
 80057fa:	bb1b      	cbnz	r3, 8005844 <_vfiprintf_r+0x1f8>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	3307      	adds	r3, #7
 8005800:	f023 0307 	bic.w	r3, r3, #7
 8005804:	3308      	adds	r3, #8
 8005806:	9303      	str	r3, [sp, #12]
 8005808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800580a:	443b      	add	r3, r7
 800580c:	9309      	str	r3, [sp, #36]	; 0x24
 800580e:	e767      	b.n	80056e0 <_vfiprintf_r+0x94>
 8005810:	460c      	mov	r4, r1
 8005812:	2001      	movs	r0, #1
 8005814:	fb0c 3202 	mla	r2, ip, r2, r3
 8005818:	e7a5      	b.n	8005766 <_vfiprintf_r+0x11a>
 800581a:	2300      	movs	r3, #0
 800581c:	f04f 0c0a 	mov.w	ip, #10
 8005820:	4619      	mov	r1, r3
 8005822:	3401      	adds	r4, #1
 8005824:	9305      	str	r3, [sp, #20]
 8005826:	4620      	mov	r0, r4
 8005828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800582c:	3a30      	subs	r2, #48	; 0x30
 800582e:	2a09      	cmp	r2, #9
 8005830:	d903      	bls.n	800583a <_vfiprintf_r+0x1ee>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0c5      	beq.n	80057c2 <_vfiprintf_r+0x176>
 8005836:	9105      	str	r1, [sp, #20]
 8005838:	e7c3      	b.n	80057c2 <_vfiprintf_r+0x176>
 800583a:	4604      	mov	r4, r0
 800583c:	2301      	movs	r3, #1
 800583e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005842:	e7f0      	b.n	8005826 <_vfiprintf_r+0x1da>
 8005844:	ab03      	add	r3, sp, #12
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	462a      	mov	r2, r5
 800584a:	4630      	mov	r0, r6
 800584c:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <_vfiprintf_r+0x25c>)
 800584e:	a904      	add	r1, sp, #16
 8005850:	f3af 8000 	nop.w
 8005854:	4607      	mov	r7, r0
 8005856:	1c78      	adds	r0, r7, #1
 8005858:	d1d6      	bne.n	8005808 <_vfiprintf_r+0x1bc>
 800585a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800585c:	07d9      	lsls	r1, r3, #31
 800585e:	d405      	bmi.n	800586c <_vfiprintf_r+0x220>
 8005860:	89ab      	ldrh	r3, [r5, #12]
 8005862:	059a      	lsls	r2, r3, #22
 8005864:	d402      	bmi.n	800586c <_vfiprintf_r+0x220>
 8005866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005868:	f000 fc33 	bl	80060d2 <__retarget_lock_release_recursive>
 800586c:	89ab      	ldrh	r3, [r5, #12]
 800586e:	065b      	lsls	r3, r3, #25
 8005870:	f53f af12 	bmi.w	8005698 <_vfiprintf_r+0x4c>
 8005874:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005876:	e711      	b.n	800569c <_vfiprintf_r+0x50>
 8005878:	ab03      	add	r3, sp, #12
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	462a      	mov	r2, r5
 800587e:	4630      	mov	r0, r6
 8005880:	4b09      	ldr	r3, [pc, #36]	; (80058a8 <_vfiprintf_r+0x25c>)
 8005882:	a904      	add	r1, sp, #16
 8005884:	f000 f882 	bl	800598c <_printf_i>
 8005888:	e7e4      	b.n	8005854 <_vfiprintf_r+0x208>
 800588a:	bf00      	nop
 800588c:	08006680 	.word	0x08006680
 8005890:	080066a0 	.word	0x080066a0
 8005894:	08006660 	.word	0x08006660
 8005898:	0800662a 	.word	0x0800662a
 800589c:	08006630 	.word	0x08006630
 80058a0:	08006634 	.word	0x08006634
 80058a4:	00000000 	.word	0x00000000
 80058a8:	08005627 	.word	0x08005627

080058ac <_printf_common>:
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	4616      	mov	r6, r2
 80058b2:	4699      	mov	r9, r3
 80058b4:	688a      	ldr	r2, [r1, #8]
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	4607      	mov	r7, r0
 80058ba:	4293      	cmp	r3, r2
 80058bc:	bfb8      	it	lt
 80058be:	4613      	movlt	r3, r2
 80058c0:	6033      	str	r3, [r6, #0]
 80058c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c6:	460c      	mov	r4, r1
 80058c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058cc:	b10a      	cbz	r2, 80058d2 <_printf_common+0x26>
 80058ce:	3301      	adds	r3, #1
 80058d0:	6033      	str	r3, [r6, #0]
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	0699      	lsls	r1, r3, #26
 80058d6:	bf42      	ittt	mi
 80058d8:	6833      	ldrmi	r3, [r6, #0]
 80058da:	3302      	addmi	r3, #2
 80058dc:	6033      	strmi	r3, [r6, #0]
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	f015 0506 	ands.w	r5, r5, #6
 80058e4:	d106      	bne.n	80058f4 <_printf_common+0x48>
 80058e6:	f104 0a19 	add.w	sl, r4, #25
 80058ea:	68e3      	ldr	r3, [r4, #12]
 80058ec:	6832      	ldr	r2, [r6, #0]
 80058ee:	1a9b      	subs	r3, r3, r2
 80058f0:	42ab      	cmp	r3, r5
 80058f2:	dc28      	bgt.n	8005946 <_printf_common+0x9a>
 80058f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058f8:	1e13      	subs	r3, r2, #0
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	bf18      	it	ne
 80058fe:	2301      	movne	r3, #1
 8005900:	0692      	lsls	r2, r2, #26
 8005902:	d42d      	bmi.n	8005960 <_printf_common+0xb4>
 8005904:	4649      	mov	r1, r9
 8005906:	4638      	mov	r0, r7
 8005908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800590c:	47c0      	blx	r8
 800590e:	3001      	adds	r0, #1
 8005910:	d020      	beq.n	8005954 <_printf_common+0xa8>
 8005912:	6823      	ldr	r3, [r4, #0]
 8005914:	68e5      	ldr	r5, [r4, #12]
 8005916:	f003 0306 	and.w	r3, r3, #6
 800591a:	2b04      	cmp	r3, #4
 800591c:	bf18      	it	ne
 800591e:	2500      	movne	r5, #0
 8005920:	6832      	ldr	r2, [r6, #0]
 8005922:	f04f 0600 	mov.w	r6, #0
 8005926:	68a3      	ldr	r3, [r4, #8]
 8005928:	bf08      	it	eq
 800592a:	1aad      	subeq	r5, r5, r2
 800592c:	6922      	ldr	r2, [r4, #16]
 800592e:	bf08      	it	eq
 8005930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005934:	4293      	cmp	r3, r2
 8005936:	bfc4      	itt	gt
 8005938:	1a9b      	subgt	r3, r3, r2
 800593a:	18ed      	addgt	r5, r5, r3
 800593c:	341a      	adds	r4, #26
 800593e:	42b5      	cmp	r5, r6
 8005940:	d11a      	bne.n	8005978 <_printf_common+0xcc>
 8005942:	2000      	movs	r0, #0
 8005944:	e008      	b.n	8005958 <_printf_common+0xac>
 8005946:	2301      	movs	r3, #1
 8005948:	4652      	mov	r2, sl
 800594a:	4649      	mov	r1, r9
 800594c:	4638      	mov	r0, r7
 800594e:	47c0      	blx	r8
 8005950:	3001      	adds	r0, #1
 8005952:	d103      	bne.n	800595c <_printf_common+0xb0>
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800595c:	3501      	adds	r5, #1
 800595e:	e7c4      	b.n	80058ea <_printf_common+0x3e>
 8005960:	2030      	movs	r0, #48	; 0x30
 8005962:	18e1      	adds	r1, r4, r3
 8005964:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005968:	1c5a      	adds	r2, r3, #1
 800596a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800596e:	4422      	add	r2, r4
 8005970:	3302      	adds	r3, #2
 8005972:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005976:	e7c5      	b.n	8005904 <_printf_common+0x58>
 8005978:	2301      	movs	r3, #1
 800597a:	4622      	mov	r2, r4
 800597c:	4649      	mov	r1, r9
 800597e:	4638      	mov	r0, r7
 8005980:	47c0      	blx	r8
 8005982:	3001      	adds	r0, #1
 8005984:	d0e6      	beq.n	8005954 <_printf_common+0xa8>
 8005986:	3601      	adds	r6, #1
 8005988:	e7d9      	b.n	800593e <_printf_common+0x92>
	...

0800598c <_printf_i>:
 800598c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	7e0f      	ldrb	r7, [r1, #24]
 8005992:	4691      	mov	r9, r2
 8005994:	2f78      	cmp	r7, #120	; 0x78
 8005996:	4680      	mov	r8, r0
 8005998:	460c      	mov	r4, r1
 800599a:	469a      	mov	sl, r3
 800599c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800599e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059a2:	d807      	bhi.n	80059b4 <_printf_i+0x28>
 80059a4:	2f62      	cmp	r7, #98	; 0x62
 80059a6:	d80a      	bhi.n	80059be <_printf_i+0x32>
 80059a8:	2f00      	cmp	r7, #0
 80059aa:	f000 80d9 	beq.w	8005b60 <_printf_i+0x1d4>
 80059ae:	2f58      	cmp	r7, #88	; 0x58
 80059b0:	f000 80a4 	beq.w	8005afc <_printf_i+0x170>
 80059b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059bc:	e03a      	b.n	8005a34 <_printf_i+0xa8>
 80059be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059c2:	2b15      	cmp	r3, #21
 80059c4:	d8f6      	bhi.n	80059b4 <_printf_i+0x28>
 80059c6:	a101      	add	r1, pc, #4	; (adr r1, 80059cc <_printf_i+0x40>)
 80059c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059cc:	08005a25 	.word	0x08005a25
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	080059b5 	.word	0x080059b5
 80059d8:	080059b5 	.word	0x080059b5
 80059dc:	080059b5 	.word	0x080059b5
 80059e0:	080059b5 	.word	0x080059b5
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	080059b5 	.word	0x080059b5
 80059ec:	080059b5 	.word	0x080059b5
 80059f0:	080059b5 	.word	0x080059b5
 80059f4:	080059b5 	.word	0x080059b5
 80059f8:	08005b47 	.word	0x08005b47
 80059fc:	08005a69 	.word	0x08005a69
 8005a00:	08005b29 	.word	0x08005b29
 8005a04:	080059b5 	.word	0x080059b5
 8005a08:	080059b5 	.word	0x080059b5
 8005a0c:	08005b69 	.word	0x08005b69
 8005a10:	080059b5 	.word	0x080059b5
 8005a14:	08005a69 	.word	0x08005a69
 8005a18:	080059b5 	.word	0x080059b5
 8005a1c:	080059b5 	.word	0x080059b5
 8005a20:	08005b31 	.word	0x08005b31
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	1d1a      	adds	r2, r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	602a      	str	r2, [r5, #0]
 8005a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a34:	2301      	movs	r3, #1
 8005a36:	e0a4      	b.n	8005b82 <_printf_i+0x1f6>
 8005a38:	6820      	ldr	r0, [r4, #0]
 8005a3a:	6829      	ldr	r1, [r5, #0]
 8005a3c:	0606      	lsls	r6, r0, #24
 8005a3e:	f101 0304 	add.w	r3, r1, #4
 8005a42:	d50a      	bpl.n	8005a5a <_printf_i+0xce>
 8005a44:	680e      	ldr	r6, [r1, #0]
 8005a46:	602b      	str	r3, [r5, #0]
 8005a48:	2e00      	cmp	r6, #0
 8005a4a:	da03      	bge.n	8005a54 <_printf_i+0xc8>
 8005a4c:	232d      	movs	r3, #45	; 0x2d
 8005a4e:	4276      	negs	r6, r6
 8005a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a54:	230a      	movs	r3, #10
 8005a56:	485e      	ldr	r0, [pc, #376]	; (8005bd0 <_printf_i+0x244>)
 8005a58:	e019      	b.n	8005a8e <_printf_i+0x102>
 8005a5a:	680e      	ldr	r6, [r1, #0]
 8005a5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a60:	602b      	str	r3, [r5, #0]
 8005a62:	bf18      	it	ne
 8005a64:	b236      	sxthne	r6, r6
 8005a66:	e7ef      	b.n	8005a48 <_printf_i+0xbc>
 8005a68:	682b      	ldr	r3, [r5, #0]
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1d19      	adds	r1, r3, #4
 8005a6e:	6029      	str	r1, [r5, #0]
 8005a70:	0601      	lsls	r1, r0, #24
 8005a72:	d501      	bpl.n	8005a78 <_printf_i+0xec>
 8005a74:	681e      	ldr	r6, [r3, #0]
 8005a76:	e002      	b.n	8005a7e <_printf_i+0xf2>
 8005a78:	0646      	lsls	r6, r0, #25
 8005a7a:	d5fb      	bpl.n	8005a74 <_printf_i+0xe8>
 8005a7c:	881e      	ldrh	r6, [r3, #0]
 8005a7e:	2f6f      	cmp	r7, #111	; 0x6f
 8005a80:	bf0c      	ite	eq
 8005a82:	2308      	moveq	r3, #8
 8005a84:	230a      	movne	r3, #10
 8005a86:	4852      	ldr	r0, [pc, #328]	; (8005bd0 <_printf_i+0x244>)
 8005a88:	2100      	movs	r1, #0
 8005a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a8e:	6865      	ldr	r5, [r4, #4]
 8005a90:	2d00      	cmp	r5, #0
 8005a92:	bfa8      	it	ge
 8005a94:	6821      	ldrge	r1, [r4, #0]
 8005a96:	60a5      	str	r5, [r4, #8]
 8005a98:	bfa4      	itt	ge
 8005a9a:	f021 0104 	bicge.w	r1, r1, #4
 8005a9e:	6021      	strge	r1, [r4, #0]
 8005aa0:	b90e      	cbnz	r6, 8005aa6 <_printf_i+0x11a>
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	d04d      	beq.n	8005b42 <_printf_i+0x1b6>
 8005aa6:	4615      	mov	r5, r2
 8005aa8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005aac:	fb03 6711 	mls	r7, r3, r1, r6
 8005ab0:	5dc7      	ldrb	r7, [r0, r7]
 8005ab2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005ab6:	4637      	mov	r7, r6
 8005ab8:	42bb      	cmp	r3, r7
 8005aba:	460e      	mov	r6, r1
 8005abc:	d9f4      	bls.n	8005aa8 <_printf_i+0x11c>
 8005abe:	2b08      	cmp	r3, #8
 8005ac0:	d10b      	bne.n	8005ada <_printf_i+0x14e>
 8005ac2:	6823      	ldr	r3, [r4, #0]
 8005ac4:	07de      	lsls	r6, r3, #31
 8005ac6:	d508      	bpl.n	8005ada <_printf_i+0x14e>
 8005ac8:	6923      	ldr	r3, [r4, #16]
 8005aca:	6861      	ldr	r1, [r4, #4]
 8005acc:	4299      	cmp	r1, r3
 8005ace:	bfde      	ittt	le
 8005ad0:	2330      	movle	r3, #48	; 0x30
 8005ad2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ad6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005ada:	1b52      	subs	r2, r2, r5
 8005adc:	6122      	str	r2, [r4, #16]
 8005ade:	464b      	mov	r3, r9
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	f8cd a000 	str.w	sl, [sp]
 8005ae8:	aa03      	add	r2, sp, #12
 8005aea:	f7ff fedf 	bl	80058ac <_printf_common>
 8005aee:	3001      	adds	r0, #1
 8005af0:	d14c      	bne.n	8005b8c <_printf_i+0x200>
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	b004      	add	sp, #16
 8005af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005afc:	4834      	ldr	r0, [pc, #208]	; (8005bd0 <_printf_i+0x244>)
 8005afe:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b02:	6829      	ldr	r1, [r5, #0]
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b0a:	6029      	str	r1, [r5, #0]
 8005b0c:	061d      	lsls	r5, r3, #24
 8005b0e:	d514      	bpl.n	8005b3a <_printf_i+0x1ae>
 8005b10:	07df      	lsls	r7, r3, #31
 8005b12:	bf44      	itt	mi
 8005b14:	f043 0320 	orrmi.w	r3, r3, #32
 8005b18:	6023      	strmi	r3, [r4, #0]
 8005b1a:	b91e      	cbnz	r6, 8005b24 <_printf_i+0x198>
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	f023 0320 	bic.w	r3, r3, #32
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	2310      	movs	r3, #16
 8005b26:	e7af      	b.n	8005a88 <_printf_i+0xfc>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	f043 0320 	orr.w	r3, r3, #32
 8005b2e:	6023      	str	r3, [r4, #0]
 8005b30:	2378      	movs	r3, #120	; 0x78
 8005b32:	4828      	ldr	r0, [pc, #160]	; (8005bd4 <_printf_i+0x248>)
 8005b34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b38:	e7e3      	b.n	8005b02 <_printf_i+0x176>
 8005b3a:	0659      	lsls	r1, r3, #25
 8005b3c:	bf48      	it	mi
 8005b3e:	b2b6      	uxthmi	r6, r6
 8005b40:	e7e6      	b.n	8005b10 <_printf_i+0x184>
 8005b42:	4615      	mov	r5, r2
 8005b44:	e7bb      	b.n	8005abe <_printf_i+0x132>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	6826      	ldr	r6, [r4, #0]
 8005b4a:	1d18      	adds	r0, r3, #4
 8005b4c:	6961      	ldr	r1, [r4, #20]
 8005b4e:	6028      	str	r0, [r5, #0]
 8005b50:	0635      	lsls	r5, r6, #24
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	d501      	bpl.n	8005b5a <_printf_i+0x1ce>
 8005b56:	6019      	str	r1, [r3, #0]
 8005b58:	e002      	b.n	8005b60 <_printf_i+0x1d4>
 8005b5a:	0670      	lsls	r0, r6, #25
 8005b5c:	d5fb      	bpl.n	8005b56 <_printf_i+0x1ca>
 8005b5e:	8019      	strh	r1, [r3, #0]
 8005b60:	2300      	movs	r3, #0
 8005b62:	4615      	mov	r5, r2
 8005b64:	6123      	str	r3, [r4, #16]
 8005b66:	e7ba      	b.n	8005ade <_printf_i+0x152>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	1d1a      	adds	r2, r3, #4
 8005b6e:	602a      	str	r2, [r5, #0]
 8005b70:	681d      	ldr	r5, [r3, #0]
 8005b72:	6862      	ldr	r2, [r4, #4]
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 fb13 	bl	80061a0 <memchr>
 8005b7a:	b108      	cbz	r0, 8005b80 <_printf_i+0x1f4>
 8005b7c:	1b40      	subs	r0, r0, r5
 8005b7e:	6060      	str	r0, [r4, #4]
 8005b80:	6863      	ldr	r3, [r4, #4]
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	2300      	movs	r3, #0
 8005b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b8a:	e7a8      	b.n	8005ade <_printf_i+0x152>
 8005b8c:	462a      	mov	r2, r5
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4640      	mov	r0, r8
 8005b92:	6923      	ldr	r3, [r4, #16]
 8005b94:	47d0      	blx	sl
 8005b96:	3001      	adds	r0, #1
 8005b98:	d0ab      	beq.n	8005af2 <_printf_i+0x166>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	079b      	lsls	r3, r3, #30
 8005b9e:	d413      	bmi.n	8005bc8 <_printf_i+0x23c>
 8005ba0:	68e0      	ldr	r0, [r4, #12]
 8005ba2:	9b03      	ldr	r3, [sp, #12]
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	bfb8      	it	lt
 8005ba8:	4618      	movlt	r0, r3
 8005baa:	e7a4      	b.n	8005af6 <_printf_i+0x16a>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4632      	mov	r2, r6
 8005bb0:	4649      	mov	r1, r9
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	47d0      	blx	sl
 8005bb6:	3001      	adds	r0, #1
 8005bb8:	d09b      	beq.n	8005af2 <_printf_i+0x166>
 8005bba:	3501      	adds	r5, #1
 8005bbc:	68e3      	ldr	r3, [r4, #12]
 8005bbe:	9903      	ldr	r1, [sp, #12]
 8005bc0:	1a5b      	subs	r3, r3, r1
 8005bc2:	42ab      	cmp	r3, r5
 8005bc4:	dcf2      	bgt.n	8005bac <_printf_i+0x220>
 8005bc6:	e7eb      	b.n	8005ba0 <_printf_i+0x214>
 8005bc8:	2500      	movs	r5, #0
 8005bca:	f104 0619 	add.w	r6, r4, #25
 8005bce:	e7f5      	b.n	8005bbc <_printf_i+0x230>
 8005bd0:	0800663b 	.word	0x0800663b
 8005bd4:	0800664c 	.word	0x0800664c

08005bd8 <__swbuf_r>:
 8005bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bda:	460e      	mov	r6, r1
 8005bdc:	4614      	mov	r4, r2
 8005bde:	4605      	mov	r5, r0
 8005be0:	b118      	cbz	r0, 8005bea <__swbuf_r+0x12>
 8005be2:	6983      	ldr	r3, [r0, #24]
 8005be4:	b90b      	cbnz	r3, 8005bea <__swbuf_r+0x12>
 8005be6:	f000 f9d5 	bl	8005f94 <__sinit>
 8005bea:	4b21      	ldr	r3, [pc, #132]	; (8005c70 <__swbuf_r+0x98>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	d12b      	bne.n	8005c48 <__swbuf_r+0x70>
 8005bf0:	686c      	ldr	r4, [r5, #4]
 8005bf2:	69a3      	ldr	r3, [r4, #24]
 8005bf4:	60a3      	str	r3, [r4, #8]
 8005bf6:	89a3      	ldrh	r3, [r4, #12]
 8005bf8:	071a      	lsls	r2, r3, #28
 8005bfa:	d52f      	bpl.n	8005c5c <__swbuf_r+0x84>
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	b36b      	cbz	r3, 8005c5c <__swbuf_r+0x84>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	6820      	ldr	r0, [r4, #0]
 8005c04:	b2f6      	uxtb	r6, r6
 8005c06:	1ac0      	subs	r0, r0, r3
 8005c08:	6963      	ldr	r3, [r4, #20]
 8005c0a:	4637      	mov	r7, r6
 8005c0c:	4283      	cmp	r3, r0
 8005c0e:	dc04      	bgt.n	8005c1a <__swbuf_r+0x42>
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f92a 	bl	8005e6c <_fflush_r>
 8005c18:	bb30      	cbnz	r0, 8005c68 <__swbuf_r+0x90>
 8005c1a:	68a3      	ldr	r3, [r4, #8]
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	60a3      	str	r3, [r4, #8]
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	6022      	str	r2, [r4, #0]
 8005c28:	701e      	strb	r6, [r3, #0]
 8005c2a:	6963      	ldr	r3, [r4, #20]
 8005c2c:	4283      	cmp	r3, r0
 8005c2e:	d004      	beq.n	8005c3a <__swbuf_r+0x62>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	07db      	lsls	r3, r3, #31
 8005c34:	d506      	bpl.n	8005c44 <__swbuf_r+0x6c>
 8005c36:	2e0a      	cmp	r6, #10
 8005c38:	d104      	bne.n	8005c44 <__swbuf_r+0x6c>
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	f000 f915 	bl	8005e6c <_fflush_r>
 8005c42:	b988      	cbnz	r0, 8005c68 <__swbuf_r+0x90>
 8005c44:	4638      	mov	r0, r7
 8005c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <__swbuf_r+0x9c>)
 8005c4a:	429c      	cmp	r4, r3
 8005c4c:	d101      	bne.n	8005c52 <__swbuf_r+0x7a>
 8005c4e:	68ac      	ldr	r4, [r5, #8]
 8005c50:	e7cf      	b.n	8005bf2 <__swbuf_r+0x1a>
 8005c52:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <__swbuf_r+0xa0>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	bf08      	it	eq
 8005c58:	68ec      	ldreq	r4, [r5, #12]
 8005c5a:	e7ca      	b.n	8005bf2 <__swbuf_r+0x1a>
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 f80c 	bl	8005c7c <__swsetup_r>
 8005c64:	2800      	cmp	r0, #0
 8005c66:	d0cb      	beq.n	8005c00 <__swbuf_r+0x28>
 8005c68:	f04f 37ff 	mov.w	r7, #4294967295
 8005c6c:	e7ea      	b.n	8005c44 <__swbuf_r+0x6c>
 8005c6e:	bf00      	nop
 8005c70:	08006680 	.word	0x08006680
 8005c74:	080066a0 	.word	0x080066a0
 8005c78:	08006660 	.word	0x08006660

08005c7c <__swsetup_r>:
 8005c7c:	4b32      	ldr	r3, [pc, #200]	; (8005d48 <__swsetup_r+0xcc>)
 8005c7e:	b570      	push	{r4, r5, r6, lr}
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	4606      	mov	r6, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	b125      	cbz	r5, 8005c92 <__swsetup_r+0x16>
 8005c88:	69ab      	ldr	r3, [r5, #24]
 8005c8a:	b913      	cbnz	r3, 8005c92 <__swsetup_r+0x16>
 8005c8c:	4628      	mov	r0, r5
 8005c8e:	f000 f981 	bl	8005f94 <__sinit>
 8005c92:	4b2e      	ldr	r3, [pc, #184]	; (8005d4c <__swsetup_r+0xd0>)
 8005c94:	429c      	cmp	r4, r3
 8005c96:	d10f      	bne.n	8005cb8 <__swsetup_r+0x3c>
 8005c98:	686c      	ldr	r4, [r5, #4]
 8005c9a:	89a3      	ldrh	r3, [r4, #12]
 8005c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ca0:	0719      	lsls	r1, r3, #28
 8005ca2:	d42c      	bmi.n	8005cfe <__swsetup_r+0x82>
 8005ca4:	06dd      	lsls	r5, r3, #27
 8005ca6:	d411      	bmi.n	8005ccc <__swsetup_r+0x50>
 8005ca8:	2309      	movs	r3, #9
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	81a3      	strh	r3, [r4, #12]
 8005cb6:	e03e      	b.n	8005d36 <__swsetup_r+0xba>
 8005cb8:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <__swsetup_r+0xd4>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	d101      	bne.n	8005cc2 <__swsetup_r+0x46>
 8005cbe:	68ac      	ldr	r4, [r5, #8]
 8005cc0:	e7eb      	b.n	8005c9a <__swsetup_r+0x1e>
 8005cc2:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <__swsetup_r+0xd8>)
 8005cc4:	429c      	cmp	r4, r3
 8005cc6:	bf08      	it	eq
 8005cc8:	68ec      	ldreq	r4, [r5, #12]
 8005cca:	e7e6      	b.n	8005c9a <__swsetup_r+0x1e>
 8005ccc:	0758      	lsls	r0, r3, #29
 8005cce:	d512      	bpl.n	8005cf6 <__swsetup_r+0x7a>
 8005cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd2:	b141      	cbz	r1, 8005ce6 <__swsetup_r+0x6a>
 8005cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	d002      	beq.n	8005ce2 <__swsetup_r+0x66>
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f7ff fc45 	bl	800556c <_free_r>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	89a3      	ldrh	r3, [r4, #12]
 8005cf8:	f043 0308 	orr.w	r3, r3, #8
 8005cfc:	81a3      	strh	r3, [r4, #12]
 8005cfe:	6923      	ldr	r3, [r4, #16]
 8005d00:	b94b      	cbnz	r3, 8005d16 <__swsetup_r+0x9a>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d0c:	d003      	beq.n	8005d16 <__swsetup_r+0x9a>
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4630      	mov	r0, r6
 8005d12:	f000 fa05 	bl	8006120 <__smakebuf_r>
 8005d16:	89a0      	ldrh	r0, [r4, #12]
 8005d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d1c:	f010 0301 	ands.w	r3, r0, #1
 8005d20:	d00a      	beq.n	8005d38 <__swsetup_r+0xbc>
 8005d22:	2300      	movs	r3, #0
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	6963      	ldr	r3, [r4, #20]
 8005d28:	425b      	negs	r3, r3
 8005d2a:	61a3      	str	r3, [r4, #24]
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	b943      	cbnz	r3, 8005d42 <__swsetup_r+0xc6>
 8005d30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d34:	d1ba      	bne.n	8005cac <__swsetup_r+0x30>
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	0781      	lsls	r1, r0, #30
 8005d3a:	bf58      	it	pl
 8005d3c:	6963      	ldrpl	r3, [r4, #20]
 8005d3e:	60a3      	str	r3, [r4, #8]
 8005d40:	e7f4      	b.n	8005d2c <__swsetup_r+0xb0>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e7f7      	b.n	8005d36 <__swsetup_r+0xba>
 8005d46:	bf00      	nop
 8005d48:	2000000c 	.word	0x2000000c
 8005d4c:	08006680 	.word	0x08006680
 8005d50:	080066a0 	.word	0x080066a0
 8005d54:	08006660 	.word	0x08006660

08005d58 <abort>:
 8005d58:	2006      	movs	r0, #6
 8005d5a:	b508      	push	{r3, lr}
 8005d5c:	f000 fa56 	bl	800620c <raise>
 8005d60:	2001      	movs	r0, #1
 8005d62:	f7fb fc78 	bl	8001656 <_exit>
	...

08005d68 <__sflush_r>:
 8005d68:	898a      	ldrh	r2, [r1, #12]
 8005d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	0710      	lsls	r0, r2, #28
 8005d70:	460c      	mov	r4, r1
 8005d72:	d457      	bmi.n	8005e24 <__sflush_r+0xbc>
 8005d74:	684b      	ldr	r3, [r1, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	dc04      	bgt.n	8005d84 <__sflush_r+0x1c>
 8005d7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dc01      	bgt.n	8005d84 <__sflush_r+0x1c>
 8005d80:	2000      	movs	r0, #0
 8005d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d86:	2e00      	cmp	r6, #0
 8005d88:	d0fa      	beq.n	8005d80 <__sflush_r+0x18>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d90:	682f      	ldr	r7, [r5, #0]
 8005d92:	602b      	str	r3, [r5, #0]
 8005d94:	d032      	beq.n	8005dfc <__sflush_r+0x94>
 8005d96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	075a      	lsls	r2, r3, #29
 8005d9c:	d505      	bpl.n	8005daa <__sflush_r+0x42>
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	1ac0      	subs	r0, r0, r3
 8005da2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005da4:	b10b      	cbz	r3, 8005daa <__sflush_r+0x42>
 8005da6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005da8:	1ac0      	subs	r0, r0, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	4602      	mov	r2, r0
 8005dae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005db0:	4628      	mov	r0, r5
 8005db2:	6a21      	ldr	r1, [r4, #32]
 8005db4:	47b0      	blx	r6
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	d106      	bne.n	8005dca <__sflush_r+0x62>
 8005dbc:	6829      	ldr	r1, [r5, #0]
 8005dbe:	291d      	cmp	r1, #29
 8005dc0:	d82c      	bhi.n	8005e1c <__sflush_r+0xb4>
 8005dc2:	4a29      	ldr	r2, [pc, #164]	; (8005e68 <__sflush_r+0x100>)
 8005dc4:	40ca      	lsrs	r2, r1
 8005dc6:	07d6      	lsls	r6, r2, #31
 8005dc8:	d528      	bpl.n	8005e1c <__sflush_r+0xb4>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6062      	str	r2, [r4, #4]
 8005dce:	6922      	ldr	r2, [r4, #16]
 8005dd0:	04d9      	lsls	r1, r3, #19
 8005dd2:	6022      	str	r2, [r4, #0]
 8005dd4:	d504      	bpl.n	8005de0 <__sflush_r+0x78>
 8005dd6:	1c42      	adds	r2, r0, #1
 8005dd8:	d101      	bne.n	8005dde <__sflush_r+0x76>
 8005dda:	682b      	ldr	r3, [r5, #0]
 8005ddc:	b903      	cbnz	r3, 8005de0 <__sflush_r+0x78>
 8005dde:	6560      	str	r0, [r4, #84]	; 0x54
 8005de0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005de2:	602f      	str	r7, [r5, #0]
 8005de4:	2900      	cmp	r1, #0
 8005de6:	d0cb      	beq.n	8005d80 <__sflush_r+0x18>
 8005de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dec:	4299      	cmp	r1, r3
 8005dee:	d002      	beq.n	8005df6 <__sflush_r+0x8e>
 8005df0:	4628      	mov	r0, r5
 8005df2:	f7ff fbbb 	bl	800556c <_free_r>
 8005df6:	2000      	movs	r0, #0
 8005df8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dfa:	e7c2      	b.n	8005d82 <__sflush_r+0x1a>
 8005dfc:	6a21      	ldr	r1, [r4, #32]
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4628      	mov	r0, r5
 8005e02:	47b0      	blx	r6
 8005e04:	1c41      	adds	r1, r0, #1
 8005e06:	d1c7      	bne.n	8005d98 <__sflush_r+0x30>
 8005e08:	682b      	ldr	r3, [r5, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d0c4      	beq.n	8005d98 <__sflush_r+0x30>
 8005e0e:	2b1d      	cmp	r3, #29
 8005e10:	d001      	beq.n	8005e16 <__sflush_r+0xae>
 8005e12:	2b16      	cmp	r3, #22
 8005e14:	d101      	bne.n	8005e1a <__sflush_r+0xb2>
 8005e16:	602f      	str	r7, [r5, #0]
 8005e18:	e7b2      	b.n	8005d80 <__sflush_r+0x18>
 8005e1a:	89a3      	ldrh	r3, [r4, #12]
 8005e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e20:	81a3      	strh	r3, [r4, #12]
 8005e22:	e7ae      	b.n	8005d82 <__sflush_r+0x1a>
 8005e24:	690f      	ldr	r7, [r1, #16]
 8005e26:	2f00      	cmp	r7, #0
 8005e28:	d0aa      	beq.n	8005d80 <__sflush_r+0x18>
 8005e2a:	0793      	lsls	r3, r2, #30
 8005e2c:	bf18      	it	ne
 8005e2e:	2300      	movne	r3, #0
 8005e30:	680e      	ldr	r6, [r1, #0]
 8005e32:	bf08      	it	eq
 8005e34:	694b      	ldreq	r3, [r1, #20]
 8005e36:	1bf6      	subs	r6, r6, r7
 8005e38:	600f      	str	r7, [r1, #0]
 8005e3a:	608b      	str	r3, [r1, #8]
 8005e3c:	2e00      	cmp	r6, #0
 8005e3e:	dd9f      	ble.n	8005d80 <__sflush_r+0x18>
 8005e40:	4633      	mov	r3, r6
 8005e42:	463a      	mov	r2, r7
 8005e44:	4628      	mov	r0, r5
 8005e46:	6a21      	ldr	r1, [r4, #32]
 8005e48:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005e4c:	47e0      	blx	ip
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	dc06      	bgt.n	8005e60 <__sflush_r+0xf8>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	e790      	b.n	8005d82 <__sflush_r+0x1a>
 8005e60:	4407      	add	r7, r0
 8005e62:	1a36      	subs	r6, r6, r0
 8005e64:	e7ea      	b.n	8005e3c <__sflush_r+0xd4>
 8005e66:	bf00      	nop
 8005e68:	20400001 	.word	0x20400001

08005e6c <_fflush_r>:
 8005e6c:	b538      	push	{r3, r4, r5, lr}
 8005e6e:	690b      	ldr	r3, [r1, #16]
 8005e70:	4605      	mov	r5, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	b913      	cbnz	r3, 8005e7c <_fflush_r+0x10>
 8005e76:	2500      	movs	r5, #0
 8005e78:	4628      	mov	r0, r5
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	b118      	cbz	r0, 8005e86 <_fflush_r+0x1a>
 8005e7e:	6983      	ldr	r3, [r0, #24]
 8005e80:	b90b      	cbnz	r3, 8005e86 <_fflush_r+0x1a>
 8005e82:	f000 f887 	bl	8005f94 <__sinit>
 8005e86:	4b14      	ldr	r3, [pc, #80]	; (8005ed8 <_fflush_r+0x6c>)
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d11b      	bne.n	8005ec4 <_fflush_r+0x58>
 8005e8c:	686c      	ldr	r4, [r5, #4]
 8005e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0ef      	beq.n	8005e76 <_fflush_r+0xa>
 8005e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e98:	07d0      	lsls	r0, r2, #31
 8005e9a:	d404      	bmi.n	8005ea6 <_fflush_r+0x3a>
 8005e9c:	0599      	lsls	r1, r3, #22
 8005e9e:	d402      	bmi.n	8005ea6 <_fflush_r+0x3a>
 8005ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ea2:	f000 f915 	bl	80060d0 <__retarget_lock_acquire_recursive>
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	f7ff ff5d 	bl	8005d68 <__sflush_r>
 8005eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	07da      	lsls	r2, r3, #31
 8005eb4:	d4e0      	bmi.n	8005e78 <_fflush_r+0xc>
 8005eb6:	89a3      	ldrh	r3, [r4, #12]
 8005eb8:	059b      	lsls	r3, r3, #22
 8005eba:	d4dd      	bmi.n	8005e78 <_fflush_r+0xc>
 8005ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ebe:	f000 f908 	bl	80060d2 <__retarget_lock_release_recursive>
 8005ec2:	e7d9      	b.n	8005e78 <_fflush_r+0xc>
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <_fflush_r+0x70>)
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d101      	bne.n	8005ece <_fflush_r+0x62>
 8005eca:	68ac      	ldr	r4, [r5, #8]
 8005ecc:	e7df      	b.n	8005e8e <_fflush_r+0x22>
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <_fflush_r+0x74>)
 8005ed0:	429c      	cmp	r4, r3
 8005ed2:	bf08      	it	eq
 8005ed4:	68ec      	ldreq	r4, [r5, #12]
 8005ed6:	e7da      	b.n	8005e8e <_fflush_r+0x22>
 8005ed8:	08006680 	.word	0x08006680
 8005edc:	080066a0 	.word	0x080066a0
 8005ee0:	08006660 	.word	0x08006660

08005ee4 <std>:
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	4604      	mov	r4, r0
 8005eea:	e9c0 3300 	strd	r3, r3, [r0]
 8005eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ef2:	6083      	str	r3, [r0, #8]
 8005ef4:	8181      	strh	r1, [r0, #12]
 8005ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ef8:	81c2      	strh	r2, [r0, #14]
 8005efa:	6183      	str	r3, [r0, #24]
 8005efc:	4619      	mov	r1, r3
 8005efe:	2208      	movs	r2, #8
 8005f00:	305c      	adds	r0, #92	; 0x5c
 8005f02:	f7fd fec7 	bl	8003c94 <memset>
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <std+0x38>)
 8005f08:	6224      	str	r4, [r4, #32]
 8005f0a:	6263      	str	r3, [r4, #36]	; 0x24
 8005f0c:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <std+0x3c>)
 8005f0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f10:	4b04      	ldr	r3, [pc, #16]	; (8005f24 <std+0x40>)
 8005f12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f14:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <std+0x44>)
 8005f16:	6323      	str	r3, [r4, #48]	; 0x30
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	bf00      	nop
 8005f1c:	08006245 	.word	0x08006245
 8005f20:	08006267 	.word	0x08006267
 8005f24:	0800629f 	.word	0x0800629f
 8005f28:	080062c3 	.word	0x080062c3

08005f2c <_cleanup_r>:
 8005f2c:	4901      	ldr	r1, [pc, #4]	; (8005f34 <_cleanup_r+0x8>)
 8005f2e:	f000 b8af 	b.w	8006090 <_fwalk_reent>
 8005f32:	bf00      	nop
 8005f34:	08005e6d 	.word	0x08005e6d

08005f38 <__sfmoreglue>:
 8005f38:	2268      	movs	r2, #104	; 0x68
 8005f3a:	b570      	push	{r4, r5, r6, lr}
 8005f3c:	1e4d      	subs	r5, r1, #1
 8005f3e:	4355      	muls	r5, r2
 8005f40:	460e      	mov	r6, r1
 8005f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f46:	f7fe fbb9 	bl	80046bc <_malloc_r>
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	b140      	cbz	r0, 8005f60 <__sfmoreglue+0x28>
 8005f4e:	2100      	movs	r1, #0
 8005f50:	e9c0 1600 	strd	r1, r6, [r0]
 8005f54:	300c      	adds	r0, #12
 8005f56:	60a0      	str	r0, [r4, #8]
 8005f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f5c:	f7fd fe9a 	bl	8003c94 <memset>
 8005f60:	4620      	mov	r0, r4
 8005f62:	bd70      	pop	{r4, r5, r6, pc}

08005f64 <__sfp_lock_acquire>:
 8005f64:	4801      	ldr	r0, [pc, #4]	; (8005f6c <__sfp_lock_acquire+0x8>)
 8005f66:	f000 b8b3 	b.w	80060d0 <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	20000125 	.word	0x20000125

08005f70 <__sfp_lock_release>:
 8005f70:	4801      	ldr	r0, [pc, #4]	; (8005f78 <__sfp_lock_release+0x8>)
 8005f72:	f000 b8ae 	b.w	80060d2 <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	20000125 	.word	0x20000125

08005f7c <__sinit_lock_acquire>:
 8005f7c:	4801      	ldr	r0, [pc, #4]	; (8005f84 <__sinit_lock_acquire+0x8>)
 8005f7e:	f000 b8a7 	b.w	80060d0 <__retarget_lock_acquire_recursive>
 8005f82:	bf00      	nop
 8005f84:	20000126 	.word	0x20000126

08005f88 <__sinit_lock_release>:
 8005f88:	4801      	ldr	r0, [pc, #4]	; (8005f90 <__sinit_lock_release+0x8>)
 8005f8a:	f000 b8a2 	b.w	80060d2 <__retarget_lock_release_recursive>
 8005f8e:	bf00      	nop
 8005f90:	20000126 	.word	0x20000126

08005f94 <__sinit>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	4604      	mov	r4, r0
 8005f98:	f7ff fff0 	bl	8005f7c <__sinit_lock_acquire>
 8005f9c:	69a3      	ldr	r3, [r4, #24]
 8005f9e:	b11b      	cbz	r3, 8005fa8 <__sinit+0x14>
 8005fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa4:	f7ff bff0 	b.w	8005f88 <__sinit_lock_release>
 8005fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fac:	6523      	str	r3, [r4, #80]	; 0x50
 8005fae:	4b13      	ldr	r3, [pc, #76]	; (8005ffc <__sinit+0x68>)
 8005fb0:	4a13      	ldr	r2, [pc, #76]	; (8006000 <__sinit+0x6c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fb6:	42a3      	cmp	r3, r4
 8005fb8:	bf08      	it	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	bf08      	it	eq
 8005fc0:	61a3      	streq	r3, [r4, #24]
 8005fc2:	f000 f81f 	bl	8006004 <__sfp>
 8005fc6:	6060      	str	r0, [r4, #4]
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 f81b 	bl	8006004 <__sfp>
 8005fce:	60a0      	str	r0, [r4, #8]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f817 	bl	8006004 <__sfp>
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2104      	movs	r1, #4
 8005fda:	60e0      	str	r0, [r4, #12]
 8005fdc:	6860      	ldr	r0, [r4, #4]
 8005fde:	f7ff ff81 	bl	8005ee4 <std>
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	2109      	movs	r1, #9
 8005fe6:	68a0      	ldr	r0, [r4, #8]
 8005fe8:	f7ff ff7c 	bl	8005ee4 <std>
 8005fec:	2202      	movs	r2, #2
 8005fee:	2112      	movs	r1, #18
 8005ff0:	68e0      	ldr	r0, [r4, #12]
 8005ff2:	f7ff ff77 	bl	8005ee4 <std>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	61a3      	str	r3, [r4, #24]
 8005ffa:	e7d1      	b.n	8005fa0 <__sinit+0xc>
 8005ffc:	080063fc 	.word	0x080063fc
 8006000:	08005f2d 	.word	0x08005f2d

08006004 <__sfp>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	4607      	mov	r7, r0
 8006008:	f7ff ffac 	bl	8005f64 <__sfp_lock_acquire>
 800600c:	4b1e      	ldr	r3, [pc, #120]	; (8006088 <__sfp+0x84>)
 800600e:	681e      	ldr	r6, [r3, #0]
 8006010:	69b3      	ldr	r3, [r6, #24]
 8006012:	b913      	cbnz	r3, 800601a <__sfp+0x16>
 8006014:	4630      	mov	r0, r6
 8006016:	f7ff ffbd 	bl	8005f94 <__sinit>
 800601a:	3648      	adds	r6, #72	; 0x48
 800601c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006020:	3b01      	subs	r3, #1
 8006022:	d503      	bpl.n	800602c <__sfp+0x28>
 8006024:	6833      	ldr	r3, [r6, #0]
 8006026:	b30b      	cbz	r3, 800606c <__sfp+0x68>
 8006028:	6836      	ldr	r6, [r6, #0]
 800602a:	e7f7      	b.n	800601c <__sfp+0x18>
 800602c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006030:	b9d5      	cbnz	r5, 8006068 <__sfp+0x64>
 8006032:	4b16      	ldr	r3, [pc, #88]	; (800608c <__sfp+0x88>)
 8006034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006038:	60e3      	str	r3, [r4, #12]
 800603a:	6665      	str	r5, [r4, #100]	; 0x64
 800603c:	f000 f847 	bl	80060ce <__retarget_lock_init_recursive>
 8006040:	f7ff ff96 	bl	8005f70 <__sfp_lock_release>
 8006044:	2208      	movs	r2, #8
 8006046:	4629      	mov	r1, r5
 8006048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800604c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006050:	6025      	str	r5, [r4, #0]
 8006052:	61a5      	str	r5, [r4, #24]
 8006054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006058:	f7fd fe1c 	bl	8003c94 <memset>
 800605c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006064:	4620      	mov	r0, r4
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006068:	3468      	adds	r4, #104	; 0x68
 800606a:	e7d9      	b.n	8006020 <__sfp+0x1c>
 800606c:	2104      	movs	r1, #4
 800606e:	4638      	mov	r0, r7
 8006070:	f7ff ff62 	bl	8005f38 <__sfmoreglue>
 8006074:	4604      	mov	r4, r0
 8006076:	6030      	str	r0, [r6, #0]
 8006078:	2800      	cmp	r0, #0
 800607a:	d1d5      	bne.n	8006028 <__sfp+0x24>
 800607c:	f7ff ff78 	bl	8005f70 <__sfp_lock_release>
 8006080:	230c      	movs	r3, #12
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	e7ee      	b.n	8006064 <__sfp+0x60>
 8006086:	bf00      	nop
 8006088:	080063fc 	.word	0x080063fc
 800608c:	ffff0001 	.word	0xffff0001

08006090 <_fwalk_reent>:
 8006090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006094:	4606      	mov	r6, r0
 8006096:	4688      	mov	r8, r1
 8006098:	2700      	movs	r7, #0
 800609a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800609e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060a2:	f1b9 0901 	subs.w	r9, r9, #1
 80060a6:	d505      	bpl.n	80060b4 <_fwalk_reent+0x24>
 80060a8:	6824      	ldr	r4, [r4, #0]
 80060aa:	2c00      	cmp	r4, #0
 80060ac:	d1f7      	bne.n	800609e <_fwalk_reent+0xe>
 80060ae:	4638      	mov	r0, r7
 80060b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b4:	89ab      	ldrh	r3, [r5, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d907      	bls.n	80060ca <_fwalk_reent+0x3a>
 80060ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060be:	3301      	adds	r3, #1
 80060c0:	d003      	beq.n	80060ca <_fwalk_reent+0x3a>
 80060c2:	4629      	mov	r1, r5
 80060c4:	4630      	mov	r0, r6
 80060c6:	47c0      	blx	r8
 80060c8:	4307      	orrs	r7, r0
 80060ca:	3568      	adds	r5, #104	; 0x68
 80060cc:	e7e9      	b.n	80060a2 <_fwalk_reent+0x12>

080060ce <__retarget_lock_init_recursive>:
 80060ce:	4770      	bx	lr

080060d0 <__retarget_lock_acquire_recursive>:
 80060d0:	4770      	bx	lr

080060d2 <__retarget_lock_release_recursive>:
 80060d2:	4770      	bx	lr

080060d4 <__swhatbuf_r>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	460e      	mov	r6, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	4614      	mov	r4, r2
 80060de:	2900      	cmp	r1, #0
 80060e0:	461d      	mov	r5, r3
 80060e2:	b096      	sub	sp, #88	; 0x58
 80060e4:	da08      	bge.n	80060f8 <__swhatbuf_r+0x24>
 80060e6:	2200      	movs	r2, #0
 80060e8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80060ec:	602a      	str	r2, [r5, #0]
 80060ee:	061a      	lsls	r2, r3, #24
 80060f0:	d410      	bmi.n	8006114 <__swhatbuf_r+0x40>
 80060f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060f6:	e00e      	b.n	8006116 <__swhatbuf_r+0x42>
 80060f8:	466a      	mov	r2, sp
 80060fa:	f000 f909 	bl	8006310 <_fstat_r>
 80060fe:	2800      	cmp	r0, #0
 8006100:	dbf1      	blt.n	80060e6 <__swhatbuf_r+0x12>
 8006102:	9a01      	ldr	r2, [sp, #4]
 8006104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800610c:	425a      	negs	r2, r3
 800610e:	415a      	adcs	r2, r3
 8006110:	602a      	str	r2, [r5, #0]
 8006112:	e7ee      	b.n	80060f2 <__swhatbuf_r+0x1e>
 8006114:	2340      	movs	r3, #64	; 0x40
 8006116:	2000      	movs	r0, #0
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	b016      	add	sp, #88	; 0x58
 800611c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006120 <__smakebuf_r>:
 8006120:	898b      	ldrh	r3, [r1, #12]
 8006122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006124:	079d      	lsls	r5, r3, #30
 8006126:	4606      	mov	r6, r0
 8006128:	460c      	mov	r4, r1
 800612a:	d507      	bpl.n	800613c <__smakebuf_r+0x1c>
 800612c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	2301      	movs	r3, #1
 8006136:	6163      	str	r3, [r4, #20]
 8006138:	b002      	add	sp, #8
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	466a      	mov	r2, sp
 800613e:	ab01      	add	r3, sp, #4
 8006140:	f7ff ffc8 	bl	80060d4 <__swhatbuf_r>
 8006144:	9900      	ldr	r1, [sp, #0]
 8006146:	4605      	mov	r5, r0
 8006148:	4630      	mov	r0, r6
 800614a:	f7fe fab7 	bl	80046bc <_malloc_r>
 800614e:	b948      	cbnz	r0, 8006164 <__smakebuf_r+0x44>
 8006150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006154:	059a      	lsls	r2, r3, #22
 8006156:	d4ef      	bmi.n	8006138 <__smakebuf_r+0x18>
 8006158:	f023 0303 	bic.w	r3, r3, #3
 800615c:	f043 0302 	orr.w	r3, r3, #2
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	e7e3      	b.n	800612c <__smakebuf_r+0xc>
 8006164:	4b0d      	ldr	r3, [pc, #52]	; (800619c <__smakebuf_r+0x7c>)
 8006166:	62b3      	str	r3, [r6, #40]	; 0x28
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	6020      	str	r0, [r4, #0]
 800616c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006170:	81a3      	strh	r3, [r4, #12]
 8006172:	9b00      	ldr	r3, [sp, #0]
 8006174:	6120      	str	r0, [r4, #16]
 8006176:	6163      	str	r3, [r4, #20]
 8006178:	9b01      	ldr	r3, [sp, #4]
 800617a:	b15b      	cbz	r3, 8006194 <__smakebuf_r+0x74>
 800617c:	4630      	mov	r0, r6
 800617e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006182:	f000 f8d7 	bl	8006334 <_isatty_r>
 8006186:	b128      	cbz	r0, 8006194 <__smakebuf_r+0x74>
 8006188:	89a3      	ldrh	r3, [r4, #12]
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	f043 0301 	orr.w	r3, r3, #1
 8006192:	81a3      	strh	r3, [r4, #12]
 8006194:	89a0      	ldrh	r0, [r4, #12]
 8006196:	4305      	orrs	r5, r0
 8006198:	81a5      	strh	r5, [r4, #12]
 800619a:	e7cd      	b.n	8006138 <__smakebuf_r+0x18>
 800619c:	08005f2d 	.word	0x08005f2d

080061a0 <memchr>:
 80061a0:	4603      	mov	r3, r0
 80061a2:	b510      	push	{r4, lr}
 80061a4:	b2c9      	uxtb	r1, r1
 80061a6:	4402      	add	r2, r0
 80061a8:	4293      	cmp	r3, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	d101      	bne.n	80061b2 <memchr+0x12>
 80061ae:	2000      	movs	r0, #0
 80061b0:	e003      	b.n	80061ba <memchr+0x1a>
 80061b2:	7804      	ldrb	r4, [r0, #0]
 80061b4:	3301      	adds	r3, #1
 80061b6:	428c      	cmp	r4, r1
 80061b8:	d1f6      	bne.n	80061a8 <memchr+0x8>
 80061ba:	bd10      	pop	{r4, pc}

080061bc <_raise_r>:
 80061bc:	291f      	cmp	r1, #31
 80061be:	b538      	push	{r3, r4, r5, lr}
 80061c0:	4604      	mov	r4, r0
 80061c2:	460d      	mov	r5, r1
 80061c4:	d904      	bls.n	80061d0 <_raise_r+0x14>
 80061c6:	2316      	movs	r3, #22
 80061c8:	6003      	str	r3, [r0, #0]
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	bd38      	pop	{r3, r4, r5, pc}
 80061d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80061d2:	b112      	cbz	r2, 80061da <_raise_r+0x1e>
 80061d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061d8:	b94b      	cbnz	r3, 80061ee <_raise_r+0x32>
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 f830 	bl	8006240 <_getpid_r>
 80061e0:	462a      	mov	r2, r5
 80061e2:	4601      	mov	r1, r0
 80061e4:	4620      	mov	r0, r4
 80061e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ea:	f000 b817 	b.w	800621c <_kill_r>
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d00a      	beq.n	8006208 <_raise_r+0x4c>
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	d103      	bne.n	80061fe <_raise_r+0x42>
 80061f6:	2316      	movs	r3, #22
 80061f8:	6003      	str	r3, [r0, #0]
 80061fa:	2001      	movs	r0, #1
 80061fc:	e7e7      	b.n	80061ce <_raise_r+0x12>
 80061fe:	2400      	movs	r4, #0
 8006200:	4628      	mov	r0, r5
 8006202:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006206:	4798      	blx	r3
 8006208:	2000      	movs	r0, #0
 800620a:	e7e0      	b.n	80061ce <_raise_r+0x12>

0800620c <raise>:
 800620c:	4b02      	ldr	r3, [pc, #8]	; (8006218 <raise+0xc>)
 800620e:	4601      	mov	r1, r0
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	f7ff bfd3 	b.w	80061bc <_raise_r>
 8006216:	bf00      	nop
 8006218:	2000000c 	.word	0x2000000c

0800621c <_kill_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	2300      	movs	r3, #0
 8006220:	4d06      	ldr	r5, [pc, #24]	; (800623c <_kill_r+0x20>)
 8006222:	4604      	mov	r4, r0
 8006224:	4608      	mov	r0, r1
 8006226:	4611      	mov	r1, r2
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	f7fb fa04 	bl	8001636 <_kill>
 800622e:	1c43      	adds	r3, r0, #1
 8006230:	d102      	bne.n	8006238 <_kill_r+0x1c>
 8006232:	682b      	ldr	r3, [r5, #0]
 8006234:	b103      	cbz	r3, 8006238 <_kill_r+0x1c>
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	bd38      	pop	{r3, r4, r5, pc}
 800623a:	bf00      	nop
 800623c:	20000120 	.word	0x20000120

08006240 <_getpid_r>:
 8006240:	f7fb b9f2 	b.w	8001628 <_getpid>

08006244 <__sread>:
 8006244:	b510      	push	{r4, lr}
 8006246:	460c      	mov	r4, r1
 8006248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800624c:	f000 f894 	bl	8006378 <_read_r>
 8006250:	2800      	cmp	r0, #0
 8006252:	bfab      	itete	ge
 8006254:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006256:	89a3      	ldrhlt	r3, [r4, #12]
 8006258:	181b      	addge	r3, r3, r0
 800625a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800625e:	bfac      	ite	ge
 8006260:	6563      	strge	r3, [r4, #84]	; 0x54
 8006262:	81a3      	strhlt	r3, [r4, #12]
 8006264:	bd10      	pop	{r4, pc}

08006266 <__swrite>:
 8006266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800626a:	461f      	mov	r7, r3
 800626c:	898b      	ldrh	r3, [r1, #12]
 800626e:	4605      	mov	r5, r0
 8006270:	05db      	lsls	r3, r3, #23
 8006272:	460c      	mov	r4, r1
 8006274:	4616      	mov	r6, r2
 8006276:	d505      	bpl.n	8006284 <__swrite+0x1e>
 8006278:	2302      	movs	r3, #2
 800627a:	2200      	movs	r2, #0
 800627c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006280:	f000 f868 	bl	8006354 <_lseek_r>
 8006284:	89a3      	ldrh	r3, [r4, #12]
 8006286:	4632      	mov	r2, r6
 8006288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800628c:	81a3      	strh	r3, [r4, #12]
 800628e:	4628      	mov	r0, r5
 8006290:	463b      	mov	r3, r7
 8006292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800629a:	f000 b817 	b.w	80062cc <_write_r>

0800629e <__sseek>:
 800629e:	b510      	push	{r4, lr}
 80062a0:	460c      	mov	r4, r1
 80062a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a6:	f000 f855 	bl	8006354 <_lseek_r>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	bf15      	itete	ne
 80062b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80062b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80062b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80062ba:	81a3      	strheq	r3, [r4, #12]
 80062bc:	bf18      	it	ne
 80062be:	81a3      	strhne	r3, [r4, #12]
 80062c0:	bd10      	pop	{r4, pc}

080062c2 <__sclose>:
 80062c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c6:	f000 b813 	b.w	80062f0 <_close_r>
	...

080062cc <_write_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	4d05      	ldr	r5, [pc, #20]	; (80062ec <_write_r+0x20>)
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fb f9e2 	bl	80016a4 <_write>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_write_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_write_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	20000120 	.word	0x20000120

080062f0 <_close_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	2300      	movs	r3, #0
 80062f4:	4d05      	ldr	r5, [pc, #20]	; (800630c <_close_r+0x1c>)
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fb f9ee 	bl	80016dc <_close>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_close_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_close_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	20000120 	.word	0x20000120

08006310 <_fstat_r>:
 8006310:	b538      	push	{r3, r4, r5, lr}
 8006312:	2300      	movs	r3, #0
 8006314:	4d06      	ldr	r5, [pc, #24]	; (8006330 <_fstat_r+0x20>)
 8006316:	4604      	mov	r4, r0
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	602b      	str	r3, [r5, #0]
 800631e:	f7fb f9e8 	bl	80016f2 <_fstat>
 8006322:	1c43      	adds	r3, r0, #1
 8006324:	d102      	bne.n	800632c <_fstat_r+0x1c>
 8006326:	682b      	ldr	r3, [r5, #0]
 8006328:	b103      	cbz	r3, 800632c <_fstat_r+0x1c>
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	bf00      	nop
 8006330:	20000120 	.word	0x20000120

08006334 <_isatty_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	2300      	movs	r3, #0
 8006338:	4d05      	ldr	r5, [pc, #20]	; (8006350 <_isatty_r+0x1c>)
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	602b      	str	r3, [r5, #0]
 8006340:	f7fb f9e6 	bl	8001710 <_isatty>
 8006344:	1c43      	adds	r3, r0, #1
 8006346:	d102      	bne.n	800634e <_isatty_r+0x1a>
 8006348:	682b      	ldr	r3, [r5, #0]
 800634a:	b103      	cbz	r3, 800634e <_isatty_r+0x1a>
 800634c:	6023      	str	r3, [r4, #0]
 800634e:	bd38      	pop	{r3, r4, r5, pc}
 8006350:	20000120 	.word	0x20000120

08006354 <_lseek_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	4611      	mov	r1, r2
 800635c:	2200      	movs	r2, #0
 800635e:	4d05      	ldr	r5, [pc, #20]	; (8006374 <_lseek_r+0x20>)
 8006360:	602a      	str	r2, [r5, #0]
 8006362:	461a      	mov	r2, r3
 8006364:	f7fb f9de 	bl	8001724 <_lseek>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_lseek_r+0x1e>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_lseek_r+0x1e>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	20000120 	.word	0x20000120

08006378 <_read_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	2200      	movs	r2, #0
 8006382:	4d05      	ldr	r5, [pc, #20]	; (8006398 <_read_r+0x20>)
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fb f96f 	bl	800166a <_read>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_read_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_read_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000120 	.word	0x20000120

0800639c <_init>:
 800639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639e:	bf00      	nop
 80063a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a2:	bc08      	pop	{r3}
 80063a4:	469e      	mov	lr, r3
 80063a6:	4770      	bx	lr

080063a8 <_fini>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	bf00      	nop
 80063ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ae:	bc08      	pop	{r3}
 80063b0:	469e      	mov	lr, r3
 80063b2:	4770      	bx	lr
